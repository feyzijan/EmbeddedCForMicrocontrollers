

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Dec 16 15:37:36 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	text61,global,reloc=2,class=CODE,delta=1
    75                           	psect	text62,global,reloc=2,class=CODE,delta=1
    76                           	psect	text63,global,reloc=2,class=CODE,delta=1
    77                           	psect	text64,global,reloc=2,class=CODE,delta=1
    78                           	psect	text65,global,reloc=2,class=CODE,delta=1
    79                           	psect	text66,global,reloc=2,class=CODE,delta=1
    80                           	psect	text67,global,reloc=2,class=CODE,delta=1
    81                           	psect	text68,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    85                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    86                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    87                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    88  0000                     
    89                           ; Version 2.35
    90                           ; Generated 05/05/2021 GMT
    91                           ; 
    92                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution. Publication is not required when
   106                           ;        this file is used in an embedded application.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC18F67K40 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     
   125                           	psect	idataCOMRAM
   126  001E00                     __pidataCOMRAM:
   127                           	callstack 0
   128                           
   129                           ;initializer for _int_high
   130  001E00  0CB2               	dw	3250
   131                           
   132                           ;initializer for _reverse_time
   133  001E02  0A28               	dw	2600
   134                           
   135                           ;initializer for _turning_time
   136  001E04  0074               	dw	116
   137                           
   138                           ;initializer for _peak_power
   139  001E06  19                 	db	25
   140  0000                     _ANSELFbits	set	3764
   141  0000                     _PIR0bits	set	3635
   142  0000                     _ANSELBbits	set	3738
   143  0000                     _IPR0bits	set	3615
   144  0000                     _PIE0bits	set	3625
   145  0000                     _RC7PPS	set	3689
   146  0000                     _RE2PPS	set	3700
   147  0000                     _SSP2BUF	set	3797
   148  0000                     _SSP2CON2bits	set	3802
   149  0000                     _SSP2CON2	set	3802
   150  0000                     _SSP2STAT	set	3800
   151  0000                     _RD6PPS	set	3696
   152  0000                     _RD5PPS	set	3695
   153  0000                     _SSP2CLKPPS	set	3612
   154  0000                     _SSP2DATPPS	set	3613
   155  0000                     _ANSELDbits	set	3751
   156  0000                     _SSP2ADD	set	3798
   157  0000                     _SSP2CON1bits	set	3801
   158  0000                     _LATFbits	set	3966
   159  0000                     _LATAbits	set	3961
   160  0000                     _LATEbits	set	3965
   161  0000                     _LATGbits	set	3967
   162  0000                     _TRISFbits	set	3974
   163  0000                     _TRISHbits	set	3976
   164  0000                     _TRISAbits	set	3969
   165  0000                     _TMR0L	set	4051
   166  0000                     _TMR0H	set	4052
   167  0000                     _T0CON0bits	set	4053
   168  0000                     _T0CON1bits	set	4054
   169  0000                     _TRISBbits	set	3970
   170  0000                     _INTCONbits	set	4082
   171  0000                     _LATHbits	set	3968
   172  0000                     _PWM7CONbits	set	4001
   173  0000                     _PWM6CONbits	set	4004
   174  0000                     _TRISCbits	set	3971
   175  0000                     _TRISGbits	set	3975
   176  0000                     _TRISEbits	set	3973
   177  0000                     _T2PR	set	4028
   178  0000                     _T2CLKCONbits	set	4031
   179  0000                     _T2HLTbits	set	4030
   180  0000                     _T2CONbits	set	4029
   181  0000                     _TRISDbits	set	3972
   182  0000                     _PORTFbits	set	3982
   183  0000                     _LATDbits	set	3964
   184  0000                     _LATG	set	3967
   185  0000                     _LATE	set	3965
   186  0000                     _PWM7DCH	set	4000
   187  0000                     _PWM6DCH	set	4003
   188                           
   189                           ; #config settings
   190                           
   191                           	psect	cinit
   192  0017F8                     __pcinit:
   193                           	callstack 0
   194  0017F8                     start_initialization:
   195                           	callstack 0
   196  0017F8                     __initialization:
   197                           	callstack 0
   198                           
   199                           ; Initialize objects allocated to COMRAM (7 bytes)
   200                           ; load TBLPTR registers with __pidataCOMRAM
   201  0017F8  0E00               	movlw	low __pidataCOMRAM
   202  0017FA  6EF6               	movwf	tblptrl,c
   203  0017FC  0E1E               	movlw	high __pidataCOMRAM
   204  0017FE  6EF7               	movwf	tblptrh,c
   205  001800  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   206  001802  6EF8               	movwf	tblptru,c
   207  001804  EE00  F047         	lfsr	0,__pdataCOMRAM
   208  001808  EE10 F007          	lfsr	1,7
   209  00180C                     copy_data0:
   210  00180C  0009               	tblrd		*+
   211  00180E  CFF5 FFEE          	movff	tablat,postinc0
   212  001812  50E5               	movf	postdec1,w,c
   213  001814  50E1               	movf	fsr1l,w,c
   214  001816  E1FA               	bnz	copy_data0
   215                           
   216                           ; Clear objects allocated to BANK1 (90 bytes)
   217  001818  EE01  F000         	lfsr	0,__pbssBANK1
   218  00181C  0E5A               	movlw	90
   219  00181E                     clear_0:
   220  00181E  6AEE               	clrf	postinc0,c
   221  001820  06E8               	decf	wreg,f,c
   222  001822  E1FD               	bnz	clear_0
   223                           
   224                           ; Clear objects allocated to BANK0 (64 bytes)
   225  001824  EE00  F060         	lfsr	0,__pbssBANK0
   226  001828  0E40               	movlw	64
   227  00182A                     clear_1:
   228  00182A  6AEE               	clrf	postinc0,c
   229  00182C  06E8               	decf	wreg,f,c
   230  00182E  E1FD               	bnz	clear_1
   231                           
   232                           ; Clear objects allocated to COMRAM (2 bytes)
   233  001830  6A4F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   234  001832  6A4E               	clrf	__pbssCOMRAM& (0+255),c
   235  001834                     end_of_initialization:
   236                           	callstack 0
   237  001834                     __end_of__initialization:
   238                           	callstack 0
   239  001834  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   240  001836  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   241  001838  0100               	movlb	0
   242  00183A  EFA5  F001         	goto	_main	;jump to C main() function
   243                           
   244                           	psect	bssCOMRAM
   245  00004E                     __pbssCOMRAM:
   246                           	callstack 0
   247  00004E                     _int_low:
   248                           	callstack 0
   249  00004E                     	ds	2
   250                           
   251                           	psect	dataCOMRAM
   252  000047                     __pdataCOMRAM:
   253                           	callstack 0
   254  000047                     _int_high:
   255                           	callstack 0
   256  000047                     	ds	2
   257  000049                     _reverse_time:
   258                           	callstack 0
   259  000049                     	ds	2
   260  00004B                     _turning_time:
   261                           	callstack 0
   262  00004B                     	ds	2
   263  00004D                     _peak_power:
   264                           	callstack 0
   265  00004D                     	ds	1
   266                           
   267                           	psect	bssBANK0
   268  000060                     __pbssBANK0:
   269                           	callstack 0
   270  000060                     _timeList:
   271                           	callstack 0
   272  000060                     	ds	60
   273  00009C                     _color_flag:
   274                           	callstack 0
   275  00009C                     	ds	1
   276  00009D                     _lost_flag:
   277                           	callstack 0
   278  00009D                     	ds	1
   279  00009E                     _time_index:
   280                           	callstack 0
   281  00009E                     	ds	1
   282  00009F                     _func_index:
   283                           	callstack 0
   284  00009F                     	ds	1
   285                           
   286                           	psect	bssBANK1
   287  000100                     __pbssBANK1:
   288                           	callstack 0
   289  000100                     _funcPtrList:
   290                           	callstack 0
   291  000100                     	ds	90
   292                           
   293                           	psect	cstackBANK0
   294  0000A0                     __pcstackBANK0:
   295                           	callstack 0
   296  0000A0                     CalibrateTurns@k:
   297                           	callstack 0
   298  0000A0                     decide_color@red_real:
   299                           	callstack 0
   300                           
   301                           ; 3 bytes @ 0x0
   302  0000A0                     	ds	3
   303  0000A3                     decide_color@green_real:
   304                           	callstack 0
   305                           
   306                           ; 3 bytes @ 0x3
   307  0000A3                     	ds	3
   308  0000A6                     decide_color@blue_real:
   309                           	callstack 0
   310                           
   311                           ; 3 bytes @ 0x6
   312  0000A6                     	ds	3
   313  0000A9                     decide_color@black_threshold:
   314                           	callstack 0
   315                           
   316                           ; 2 bytes @ 0x9
   317  0000A9                     	ds	2
   318  0000AB                     decide_color@ambient:
   319                           	callstack 0
   320                           
   321                           ; 8 bytes @ 0xB
   322  0000AB                     	ds	5
   323  0000B0                     red_move@mL:
   324                           	callstack 0
   325  0000B0                     green_move@mL:
   326                           	callstack 0
   327  0000B0                     blue_move@mL:
   328                           	callstack 0
   329  0000B0                     orange_move@mL:
   330                           	callstack 0
   331  0000B0                     lightblue_move@mL:
   332                           	callstack 0
   333  0000B0                     reverse_yellow_move@mL:
   334                           	callstack 0
   335  0000B0                     reverse_pink_move@mL:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x10
   339  0000B0                     	ds	2
   340  0000B2                     red_move@mR:
   341                           	callstack 0
   342  0000B2                     green_move@mR:
   343                           	callstack 0
   344  0000B2                     blue_move@mR:
   345                           	callstack 0
   346  0000B2                     orange_move@mR:
   347                           	callstack 0
   348  0000B2                     lightblue_move@mR:
   349                           	callstack 0
   350  0000B2                     reverse_yellow_move@mR:
   351                           	callstack 0
   352  0000B2                     reverse_pink_move@mR:
   353                           	callstack 0
   354                           
   355                           ; 2 bytes @ 0x12
   356  0000B2                     	ds	1
   357  0000B3                     decide_color@LED_and_ambient:
   358                           	callstack 0
   359                           
   360                           ; 8 bytes @ 0x13
   361  0000B3                     	ds	1
   362  0000B4                     white_move@mL:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x14
   366  0000B4                     	ds	2
   367  0000B6                     white_move@mR:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x16
   371  0000B6                     	ds	2
   372  0000B8                     white_move@temp_func:
   373                           	callstack 0
   374                           
   375                           ; 3 bytes @ 0x18
   376  0000B8                     	ds	3
   377  0000BB                     decide_color@greenPercentage:
   378                           	callstack 0
   379  0000BB                     white_move@temp_time:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x1B
   383  0000BB                     	ds	1
   384  0000BC                     decide_color@bluePercentage:
   385                           	callstack 0
   386                           
   387                           ; 1 bytes @ 0x1C
   388  0000BC                     	ds	1
   389  0000BD                     pick_move@mL:
   390                           	callstack 0
   391  0000BD                     decide_color@clear_real:
   392                           	callstack 0
   393                           
   394                           ; 3 bytes @ 0x1D
   395  0000BD                     	ds	2
   396  0000BF                     pick_move@mR:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x1F
   400  0000BF                     	ds	1
   401  0000C0                     decide_color@color_decision:
   402                           	callstack 0
   403                           
   404                           ; 1 bytes @ 0x20
   405  0000C0                     	ds	1
   406  0000C1                     decide_color@redPercentage:
   407                           	callstack 0
   408                           
   409                           ; 1 bytes @ 0x21
   410  0000C1                     	ds	1
   411  0000C2                     ??_main:
   412                           
   413                           ; 1 bytes @ 0x22
   414  0000C2                     	ds	2
   415  0000C4                     main@color_detected:
   416                           	callstack 0
   417                           
   418                           ; 1 bytes @ 0x24
   419  0000C4                     	ds	1
   420  0000C5                     main@mL:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x25
   424  0000C5                     	ds	2
   425  0000C7                     main@mR:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x27
   429  0000C7                     	ds	2
   430  0000C9                     main@motorL:
   431                           	callstack 0
   432                           
   433                           ; 9 bytes @ 0x29
   434  0000C9                     	ds	9
   435  0000D2                     main@motorR:
   436                           	callstack 0
   437                           
   438                           ; 9 bytes @ 0x32
   439  0000D2                     	ds	9
   440                           
   441                           	psect	cstackCOMRAM
   442  000001                     __pcstackCOMRAM:
   443                           	callstack 0
   444  000001                     ??i2_I2C_2_Master_Idle:
   445  000001                     ?i2___lwdiv:
   446                           	callstack 0
   447  000001                     i2___lwdiv@dividend:
   448                           	callstack 0
   449                           
   450                           ; 2 bytes @ 0x0
   451  000001                     	ds	1
   452  000002                     i2I2C_2_Master_Write@data_byte:
   453                           	callstack 0
   454                           
   455                           ; 1 bytes @ 0x1
   456  000002                     	ds	1
   457  000003                     i2color_writetoaddr@value:
   458                           	callstack 0
   459  000003                     i2___lwdiv@divisor:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x2
   463  000003                     	ds	1
   464  000004                     i2color_writetoaddr@address:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x3
   468  000004                     	ds	1
   469  000005                     i2___lwdiv@quotient:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x4
   473  000005                     	ds	2
   474  000007                     i2___lwdiv@counter:
   475                           	callstack 0
   476                           
   477                           ; 1 bytes @ 0x6
   478  000007                     	ds	1
   479  000008                     i2add_timing@timing:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0x7
   483  000008                     	ds	2
   484  00000A                     i2getTMR0_in_ms@temp:
   485                           	callstack 0
   486                           
   487                           ; 2 bytes @ 0x9
   488  00000A                     	ds	2
   489  00000C                     ??_HighISR:
   490                           
   491                           ; 1 bytes @ 0xB
   492  00000C                     	ds	4
   493  000010                     ??_LightsToggle:
   494  000010                     ??_I2C_2_Master_Idle:
   495  000010                     ?_get_timing:
   496                           	callstack 0
   497  000010                     ?___wmul:
   498                           	callstack 0
   499  000010                     ?___lwdiv:
   500                           	callstack 0
   501  000010                     ?_get_function_ptr:
   502                           	callstack 0
   503  000010                     ?___tmul:
   504                           	callstack 0
   505  000010                     initDCmotorsPWM@PWMperiod:
   506                           	callstack 0
   507  000010                     custom_delay_ms@delay_time:
   508                           	callstack 0
   509  000010                     ___wmul@multiplier:
   510                           	callstack 0
   511  000010                     ___lwdiv@dividend:
   512                           	callstack 0
   513  000010                     add_function_ptr@func:
   514                           	callstack 0
   515  000010                     ___tmul@multiplier:
   516                           	callstack 0
   517                           
   518                           ; 3 bytes @ 0xF
   519  000010                     	ds	1
   520  000011                     ??_I2C_2_Master_Read:
   521  000011                     I2C_2_Master_Write@data_byte:
   522                           	callstack 0
   523                           
   524                           ; 1 bytes @ 0x10
   525  000011                     	ds	1
   526  000012                     ??_custom_delay_ms:
   527  000012                     color_writetoaddr@value:
   528                           	callstack 0
   529  000012                     I2C_2_Master_Read@ack:
   530                           	callstack 0
   531  000012                     LightsToggle@i:
   532                           	callstack 0
   533  000012                     ___wmul@multiplicand:
   534                           	callstack 0
   535  000012                     ___lwdiv@divisor:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0x11
   539  000012                     	ds	1
   540  000013                     color_writetoaddr@address:
   541                           	callstack 0
   542  000013                     I2C_2_Master_Read@tmp:
   543                           	callstack 0
   544  000013                     custom_delay_ms@i:
   545                           	callstack 0
   546  000013                     ___tmul@multiplicand:
   547                           	callstack 0
   548                           
   549                           ; 3 bytes @ 0x12
   550  000013                     	ds	1
   551  000014                     ??_color_click_init:
   552  000014                     ?_color_read:
   553                           	callstack 0
   554  000014                     ___wmul@product:
   555                           	callstack 0
   556  000014                     ___lwdiv@quotient:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0x13
   560  000014                     	ds	2
   561  000016                     ??_color_read:
   562  000016                     ?___awdiv:
   563                           	callstack 0
   564  000016                     ___lwdiv@counter:
   565                           	callstack 0
   566  000016                     ___awdiv@dividend:
   567                           	callstack 0
   568  000016                     ___tmul@product:
   569                           	callstack 0
   570                           
   571                           ; 3 bytes @ 0x15
   572  000016                     	ds	1
   573  000017                     add_timing@timing:
   574                           	callstack 0
   575                           
   576                           ; 2 bytes @ 0x16
   577  000017                     	ds	1
   578  000018                     ___awdiv@divisor:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0x17
   582  000018                     	ds	1
   583  000019                     ?___atdiv:
   584                           	callstack 0
   585  000019                     color_read@address:
   586                           	callstack 0
   587  000019                     getTMR0_in_ms@temp:
   588                           	callstack 0
   589  000019                     ___atdiv@dividend:
   590                           	callstack 0
   591                           
   592                           ; 3 bytes @ 0x18
   593  000019                     	ds	1
   594  00001A                     ___awdiv@counter:
   595                           	callstack 0
   596  00001A                     color_read@tmp:
   597                           	callstack 0
   598                           
   599                           ; 2 bytes @ 0x19
   600  00001A                     	ds	1
   601  00001B                     ___awdiv@sign:
   602                           	callstack 0
   603                           
   604                           ; 1 bytes @ 0x1A
   605  00001B                     	ds	1
   606  00001C                     interrupt_threshold_calibrate@amb_and_LED:
   607                           	callstack 0
   608  00001C                     read_All_Colors@writeArray:
   609                           	callstack 0
   610  00001C                     ___awdiv@quotient:
   611                           	callstack 0
   612  00001C                     ___atdiv@divisor:
   613                           	callstack 0
   614                           
   615                           ; 3 bytes @ 0x1B
   616  00001C                     	ds	2
   617  00001E                     interrupt_threshold_calibrate@black:
   618                           	callstack 0
   619  00001E                     read_All_Colors@i:
   620                           	callstack 0
   621  00001E                     setMotorPWM@m:
   622                           	callstack 0
   623                           
   624                           ; 2 bytes @ 0x1D
   625  00001E                     	ds	1
   626  00001F                     ___atdiv@counter:
   627                           	callstack 0
   628                           
   629                           ; 1 bytes @ 0x1E
   630  00001F                     	ds	1
   631  000020                     ??_setMotorPWM:
   632  000020                     ___atdiv@sign:
   633                           	callstack 0
   634                           
   635                           ; 1 bytes @ 0x1F
   636  000020                     	ds	1
   637  000021                     ___atdiv@quotient:
   638                           	callstack 0
   639                           
   640                           ; 3 bytes @ 0x20
   641  000021                     	ds	3
   642  000024                     ??_decide_color:
   643                           
   644                           ; 1 bytes @ 0x23
   645  000024                     	ds	3
   646  000027                     setMotorPWM@PWMduty:
   647                           	callstack 0
   648                           
   649                           ; 2 bytes @ 0x26
   650  000027                     	ds	2
   651  000029                     stop@mL:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x28
   655  000029                     	ds	2
   656  00002B                     stop@mR:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x2A
   660  00002B                     	ds	2
   661  00002D                     ??_stop:
   662                           
   663                           ; 1 bytes @ 0x2C
   664  00002D                     	ds	3
   665  000030                     move_forward@mL:
   666                           	callstack 0
   667  000030                     move_backward@mL:
   668                           	callstack 0
   669  000030                     TurnLeft@mL:
   670                           	callstack 0
   671  000030                     TurnRight@mL:
   672                           	callstack 0
   673                           
   674                           ; 2 bytes @ 0x2F
   675  000030                     	ds	2
   676  000032                     move_forward@mR:
   677                           	callstack 0
   678  000032                     move_backward@mR:
   679                           	callstack 0
   680  000032                     TurnLeft@mR:
   681                           	callstack 0
   682  000032                     TurnRight@mR:
   683                           	callstack 0
   684                           
   685                           ; 2 bytes @ 0x31
   686  000032                     	ds	2
   687  000034                     ??_TurnLeft:
   688  000034                     ??_TurnRight:
   689  000034                     move_forward@duration:
   690                           	callstack 0
   691  000034                     move_backward@duration:
   692                           	callstack 0
   693                           
   694                           ; 2 bytes @ 0x33
   695  000034                     	ds	2
   696  000036                     ??_move_forward:
   697  000036                     ??_move_backward:
   698                           
   699                           ; 1 bytes @ 0x35
   700  000036                     	ds	3
   701  000039                     reverse_square@mL:
   702                           	callstack 0
   703  000039                     forward_square@mL:
   704                           	callstack 0
   705  000039                     PrepareForTurn@mL:
   706                           	callstack 0
   707                           
   708                           ; 2 bytes @ 0x38
   709  000039                     	ds	2
   710  00003B                     reverse_square@mR:
   711                           	callstack 0
   712  00003B                     forward_square@mR:
   713                           	callstack 0
   714  00003B                     PrepareForTurn@mR:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x3A
   718  00003B                     	ds	2
   719  00003D                     ??_reverse_square:
   720  00003D                     ??_forward_square:
   721  00003D                     ??_PrepareForTurn:
   722                           
   723                           ; 1 bytes @ 0x3C
   724  00003D                     	ds	2
   725  00003F                     CalibrateReverseSquare@mL:
   726                           	callstack 0
   727  00003F                     yellow_move@mL:
   728                           	callstack 0
   729  00003F                     pink_move@mL:
   730                           	callstack 0
   731  00003F                     _PrepareForTurn$2745:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x3E
   735  00003F                     	ds	2
   736  000041                     blue_move@i:
   737                           	callstack 0
   738  000041                     CalibrateTurns@mL:
   739                           	callstack 0
   740  000041                     CalibrateReverseSquare@mR:
   741                           	callstack 0
   742  000041                     yellow_move@mR:
   743                           	callstack 0
   744  000041                     pink_move@mR:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x40
   748  000041                     	ds	1
   749  000042                     orange_move@i:
   750                           	callstack 0
   751  000042                     lightblue_move@i:
   752                           	callstack 0
   753                           
   754                           ; 1 bytes @ 0x41
   755  000042                     	ds	1
   756  000043                     ??_white_move:
   757  000043                     ??_CalibrateReverseSquare:
   758  000043                     CalibrateTurns@mR:
   759                           	callstack 0
   760                           
   761                           ; 2 bytes @ 0x42
   762  000043                     	ds	2
   763  000045                     ??_CalibrateTurns:
   764  000045                     pick_move@color:
   765                           	callstack 0
   766                           
   767                           ; 1 bytes @ 0x44
   768  000045                     	ds	2
   769                           
   770 ;;
   771 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   772 ;;
   773 ;; *************** function _main *****************
   774 ;; Defined at:
   775 ;;		line 21 in file "main.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;		None
   778 ;; Auto vars:     Size  Location     Type
   779 ;;  motorR          9   50[BANK0 ] struct DC_motor
   780 ;;  motorL          9   41[BANK0 ] struct DC_motor
   781 ;;  mR              2   39[BANK0 ] PTR struct DC_motor
   782 ;;		 -> main@motorR(9), 
   783 ;;  mL              2   37[BANK0 ] PTR struct DC_motor
   784 ;;		 -> main@motorL(9), 
   785 ;;  color_detect    1   36[BANK0 ] unsigned char 
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   796 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   797 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   798 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   799 ;;Total ram usage:       25 bytes
   800 ;; Hardware stack levels required when called: 14
   801 ;; This function calls:
   802 ;;		_CalibrateReverseSquare
   803 ;;		_CalibrateTurns
   804 ;;		_Interrupts_init
   805 ;;		_LEDs_Buttons_init
   806 ;;		_LightOn
   807 ;;		_ResetTMR0
   808 ;;		_Timer0_init
   809 ;;		_color_click_init
   810 ;;		_color_click_interrupt_init
   811 ;;		_color_click_interrupt_off
   812 ;;		_decide_color
   813 ;;		_getTMR0_in_ms
   814 ;;		_initDCmotorsPWM
   815 ;;		_interrupt_threshold_calibrate
   816 ;;		_move_forward
   817 ;;		_pick_move
   818 ;;		_stop
   819 ;; This function is called by:
   820 ;;		Startup code after reset
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text0
   825  00034A                     __ptext0:
   826                           	callstack 0
   827  00034A                     _main:
   828                           	callstack 17
   829  00034A                     
   830                           ;main.c: 24:     color_click_init();
   831  00034A  EC1C  F00D         	call	_color_click_init	;wreg free
   832  00034E                     
   833                           ;main.c: 25:     LEDs_Buttons_init();
   834  00034E  EC8F  F00D         	call	_LEDs_Buttons_init	;wreg free
   835                           
   836                           ;main.c: 29:     struct DC_motor motorL,motorR;;main.c: 30:     struct DC_motor * mL = &
      +                          motorL;
   837  000352  0EC9               	movlw	low main@motorL
   838  000354  0100               	movlb	0	; () banked
   839  000356  6FC5               	movwf	main@mL& (0+255),b
   840  000358  0E00               	movlw	high main@motorL
   841  00035A  6FC6               	movwf	(main@mL+1)& (0+255),b
   842                           
   843                           ;main.c: 31:     struct DC_motor * mR = &motorR;
   844  00035C  0ED2               	movlw	low main@motorR
   845  00035E  6FC7               	movwf	main@mR& (0+255),b
   846  000360  0E00               	movlw	high main@motorR
   847  000362  6FC8               	movwf	(main@mR+1)& (0+255),b
   848  000364                     
   849                           ; BSR set to: 0
   850                           ;main.c: 32:     motorL.power=1;
   851  000364  0E01               	movlw	1
   852  000366  6FC9               	movwf	main@motorL& (0+255),b
   853  000368                     
   854                           ; BSR set to: 0
   855                           ;main.c: 33:     motorL.direction=1;
   856  000368  0E01               	movlw	1
   857  00036A  6FCA               	movwf	(main@motorL+1)& (0+255),b
   858                           
   859                           ;main.c: 34:     motorL.dutyHighByte=(unsigned char *)(&PWM6DCH);
   860  00036C  0EA3               	movlw	163
   861  00036E  6FCB               	movwf	(main@motorL+2)& (0+255),b
   862  000370  0E0F               	movlw	15
   863  000372  6FCC               	movwf	(main@motorL+3)& (0+255),b
   864                           
   865                           ;main.c: 35:     motorL.dir_LAT=(unsigned char *)(&LATE);
   866  000374  0E7D               	movlw	125
   867  000376  6FCD               	movwf	(main@motorL+4)& (0+255),b
   868  000378  0E0F               	movlw	15
   869  00037A  6FCE               	movwf	(main@motorL+5)& (0+255),b
   870  00037C                     
   871                           ; BSR set to: 0
   872                           ;main.c: 36:     motorL.dir_pin=4;
   873  00037C  0E04               	movlw	4
   874  00037E  6FCF               	movwf	(main@motorL+6)& (0+255),b
   875  000380                     
   876                           ; BSR set to: 0
   877                           ;main.c: 37:     motorL.PWMperiod=199;
   878  000380  0E00               	movlw	0
   879  000382  6FD1               	movwf	(main@motorL+8)& (0+255),b
   880  000384  0EC7               	movlw	199
   881  000386  6FD0               	movwf	(main@motorL+7)& (0+255),b
   882  000388                     
   883                           ; BSR set to: 0
   884                           ;main.c: 39:     motorR.power=1;
   885  000388  0E01               	movlw	1
   886  00038A  6FD2               	movwf	main@motorR& (0+255),b
   887  00038C                     
   888                           ; BSR set to: 0
   889                           ;main.c: 40:     motorR.direction=1;
   890  00038C  0E01               	movlw	1
   891  00038E  6FD3               	movwf	(main@motorR+1)& (0+255),b
   892                           
   893                           ;main.c: 41:     motorR.dutyHighByte=(unsigned char *)(&PWM7DCH);
   894  000390  0EA0               	movlw	160
   895  000392  6FD4               	movwf	(main@motorR+2)& (0+255),b
   896  000394  0E0F               	movlw	15
   897  000396  6FD5               	movwf	(main@motorR+3)& (0+255),b
   898                           
   899                           ;main.c: 42:     motorR.dir_LAT=(unsigned char *)(&LATG);
   900  000398  0E7F               	movlw	127
   901  00039A  6FD6               	movwf	(main@motorR+4)& (0+255),b
   902  00039C  0E0F               	movlw	15
   903  00039E  6FD7               	movwf	(main@motorR+5)& (0+255),b
   904  0003A0                     
   905                           ; BSR set to: 0
   906                           ;main.c: 43:     motorR.dir_pin=6;
   907  0003A0  0E06               	movlw	6
   908  0003A2  6FD8               	movwf	(main@motorR+6)& (0+255),b
   909  0003A4                     
   910                           ; BSR set to: 0
   911                           ;main.c: 44:     motorR.PWMperiod=199;
   912  0003A4  0E00               	movlw	0
   913  0003A6  6FDA               	movwf	(main@motorR+8)& (0+255),b
   914  0003A8  0EC7               	movlw	199
   915  0003AA  6FD9               	movwf	(main@motorR+7)& (0+255),b
   916  0003AC                     
   917                           ; BSR set to: 0
   918                           ;main.c: 46:     initDCmotorsPWM(199);
   919  0003AC  0E00               	movlw	0
   920  0003AE  6E11               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   921  0003B0  0EC7               	movlw	199
   922  0003B2  6E10               	movwf	initDCmotorsPWM@PWMperiod^0,c
   923  0003B4  EC3B  F00D         	call	_initDCmotorsPWM	;wreg free
   924  0003B8                     
   925                           ;main.c: 47:     stop(mL,mR);
   926  0003B8  C0C5  F029         	movff	main@mL,stop@mL
   927  0003BC  C0C6  F02A         	movff	main@mL+1,stop@mL+1
   928  0003C0  C0C7  F02B         	movff	main@mR,stop@mR
   929  0003C4  C0C8  F02C         	movff	main@mR+1,stop@mR+1
   930  0003C8  EC1C  F008         	call	_stop	;wreg free
   931  0003CC                     
   932                           ;main.c: 51:     interrupt_threshold_calibrate();
   933  0003CC  EC61  F009         	call	_interrupt_threshold_calibrate	;wreg free
   934  0003D0                     
   935                           ;main.c: 52:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   936  0003D0  0E52               	movlw	82
   937  0003D2  0100               	movlb	0	; () banked
   938  0003D4  6FC3               	movwf	(??_main+1)& (0+255),b
   939  0003D6  0E2B               	movlw	43
   940  0003D8  6FC2               	movwf	??_main& (0+255),b
   941  0003DA  0E00               	movlw	0
   942  0003DC                     u3067:
   943  0003DC  2EE8               	decfsz	wreg,f,c
   944  0003DE  D7FE               	bra	u3067
   945  0003E0  2FC2               	decfsz	??_main& (0+255),f,b
   946  0003E2  D7FC               	bra	u3067
   947  0003E4  2FC3               	decfsz	(??_main+1)& (0+255),f,b
   948  0003E6  D7FA               	bra	u3067
   949  0003E8  F000               	nop	
   950  0003EA                     
   951                           ;main.c: 53:     CalibrateTurns(mL,mR);
   952  0003EA  C0C5  F041         	movff	main@mL,CalibrateTurns@mL
   953  0003EE  C0C6  F042         	movff	main@mL+1,CalibrateTurns@mL+1
   954  0003F2  C0C7  F043         	movff	main@mR,CalibrateTurns@mR
   955  0003F6  C0C8  F044         	movff	main@mR+1,CalibrateTurns@mR+1
   956  0003FA  EC2E  F005         	call	_CalibrateTurns	;wreg free
   957  0003FE                     
   958                           ;main.c: 54:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   959  0003FE  0E52               	movlw	82
   960  000400  0100               	movlb	0	; () banked
   961  000402  6FC3               	movwf	(??_main+1)& (0+255),b
   962  000404  0E2B               	movlw	43
   963  000406  6FC2               	movwf	??_main& (0+255),b
   964  000408  0E00               	movlw	0
   965  00040A                     u3077:
   966  00040A  2EE8               	decfsz	wreg,f,c
   967  00040C  D7FE               	bra	u3077
   968  00040E  2FC2               	decfsz	??_main& (0+255),f,b
   969  000410  D7FC               	bra	u3077
   970  000412  2FC3               	decfsz	(??_main+1)& (0+255),f,b
   971  000414  D7FA               	bra	u3077
   972  000416  F000               	nop	
   973  000418                     
   974                           ;main.c: 55:     CalibrateReverseSquare(mL,mR);
   975  000418  C0C5  F03F         	movff	main@mL,CalibrateReverseSquare@mL
   976  00041C  C0C6  F040         	movff	main@mL+1,CalibrateReverseSquare@mL+1
   977  000420  C0C7  F041         	movff	main@mR,CalibrateReverseSquare@mR
   978  000424  C0C8  F042         	movff	main@mR+1,CalibrateReverseSquare@mR+1
   979  000428  EC43  F006         	call	_CalibrateReverseSquare	;wreg free
   980  00042C                     
   981                           ;main.c: 56:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   982  00042C  0E52               	movlw	82
   983  00042E  0100               	movlb	0	; () banked
   984  000430  6FC3               	movwf	(??_main+1)& (0+255),b
   985  000432  0E2B               	movlw	43
   986  000434  6FC2               	movwf	??_main& (0+255),b
   987  000436  0E00               	movlw	0
   988  000438                     u3087:
   989  000438  2EE8               	decfsz	wreg,f,c
   990  00043A  D7FE               	bra	u3087
   991  00043C  2FC2               	decfsz	??_main& (0+255),f,b
   992  00043E  D7FC               	bra	u3087
   993  000440  2FC3               	decfsz	(??_main+1)& (0+255),f,b
   994  000442  D7FA               	bra	u3087
   995  000444  F000               	nop	
   996  000446                     
   997                           ;main.c: 59:     LightOn();
   998  000446  ECF8  F00E         	call	_LightOn	;wreg free
   999  00044A                     
  1000                           ;main.c: 60:     Interrupts_init();
  1001  00044A  EC86  F00E         	call	_Interrupts_init	;wreg free
  1002  00044E                     
  1003                           ;main.c: 62:     char color_detected = 0;
  1004  00044E  0E00               	movlw	0
  1005  000450  0100               	movlb	0	; () banked
  1006  000452  6FC4               	movwf	main@color_detected& (0+255),b
  1007  000454                     l3876:
  1008                           
  1009                           ;main.c: 66:         if (!PORTFbits.RF3) color_click_interrupt_init();
  1010  000454  B68E               	btfsc	142,3,c	;volatile
  1011  000456  EF2F  F002         	goto	u3001
  1012  00045A  EF31  F002         	goto	u3000
  1013  00045E                     u3001:
  1014  00045E  EF33  F002         	goto	l3880
  1015  000462                     u3000:
  1016  000462  ECD8  F00B         	call	_color_click_interrupt_init	;wreg free
  1017  000466                     l3880:
  1018                           
  1019                           ;main.c: 69:         if(!PORTFbits.RF2){
  1020  000466  B48E               	btfsc	142,2,c	;volatile
  1021  000468  EF38  F002         	goto	u3011
  1022  00046C  EF3A  F002         	goto	u3010
  1023  000470                     u3011:
  1024  000470  EF2A  F002         	goto	l3876
  1025  000474                     u3010:
  1026  000474                     
  1027                           ;main.c: 71:            color_click_interrupt_off();
  1028  000474  ECBA  F00E         	call	_color_click_interrupt_off	;wreg free
  1029  000478                     
  1030                           ;main.c: 72:            LightOn();
  1031  000478  ECF8  F00E         	call	_LightOn	;wreg free
  1032  00047C                     
  1033                           ;main.c: 73:            color_click_interrupt_init();
  1034  00047C  ECD8  F00B         	call	_color_click_interrupt_init	;wreg free
  1035  000480                     
  1036                           ;main.c: 75:            color_flag = 0;
  1037  000480  0E00               	movlw	0
  1038  000482  0100               	movlb	0	; () banked
  1039  000484  6F9C               	movwf	_color_flag& (0+255),b
  1040  000486                     
  1041                           ; BSR set to: 0
  1042                           ;main.c: 76:            lost_flag = 0;
  1043  000486  0E00               	movlw	0
  1044  000488  6F9D               	movwf	_lost_flag& (0+255),b
  1045  00048A                     
  1046                           ; BSR set to: 0
  1047                           ;main.c: 77:            Timer0_init();
  1048  00048A  EC38  F00E         	call	_Timer0_init	;wreg free
  1049                           
  1050                           ;main.c: 80:            while(color_detected <8){
  1051  00048E  EFB7  F002         	goto	l3924
  1052  000492                     l3894:
  1053                           
  1054                           ; BSR set to: 0
  1055                           ;main.c: 82:                 ResetTMR0();
  1056  000492  ECDF  F00E         	call	_ResetTMR0	;wreg free
  1057  000496                     
  1058                           ;main.c: 83:                 move_forward(mL,mR,0);
  1059  000496  C0C5  F030         	movff	main@mL,move_forward@mL
  1060  00049A  C0C6  F031         	movff	main@mL+1,move_forward@mL+1
  1061  00049E  C0C7  F032         	movff	main@mR,move_forward@mR
  1062  0004A2  C0C8  F033         	movff	main@mR+1,move_forward@mR+1
  1063  0004A6  0E00               	movlw	0
  1064  0004A8  6E35               	movwf	(move_forward@duration+1)^0,c
  1065  0004AA  0E00               	movlw	0
  1066  0004AC  6E34               	movwf	move_forward@duration^0,c
  1067  0004AE  EC8F  F008         	call	_move_forward	;wreg free
  1068  0004B2                     l3898:
  1069  0004B2  0100               	movlb	0	; () banked
  1070  0004B4  519C               	movf	_color_flag& (0+255),w,b
  1071  0004B6  A4D8               	btfss	status,2,c
  1072  0004B8  EF60  F002         	goto	u3021
  1073  0004BC  EF62  F002         	goto	u3020
  1074  0004C0                     u3021:
  1075  0004C0  EF6A  F002         	goto	l3902
  1076  0004C4                     u3020:
  1077  0004C4                     
  1078                           ; BSR set to: 0
  1079  0004C4  519D               	movf	_lost_flag& (0+255),w,b
  1080  0004C6  B4D8               	btfsc	status,2,c
  1081  0004C8  EF68  F002         	goto	u3031
  1082  0004CC  EF6A  F002         	goto	u3030
  1083  0004D0                     u3031:
  1084  0004D0  EF59  F002         	goto	l3898
  1085  0004D4                     u3030:
  1086  0004D4                     l3902:
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;main.c: 88:                 if(color_flag){
  1090  0004D4  519C               	movf	_color_flag& (0+255),w,b
  1091  0004D6  B4D8               	btfsc	status,2,c
  1092  0004D8  EF70  F002         	goto	u3041
  1093  0004DC  EF72  F002         	goto	u3040
  1094  0004E0                     u3041:
  1095  0004E0  EF9E  F002         	goto	l3916
  1096  0004E4                     u3040:
  1097  0004E4                     
  1098                           ; BSR set to: 0
  1099                           ;main.c: 91:                     stop(mL,mR);
  1100  0004E4  C0C5  F029         	movff	main@mL,stop@mL
  1101  0004E8  C0C6  F02A         	movff	main@mL+1,stop@mL+1
  1102  0004EC  C0C7  F02B         	movff	main@mR,stop@mR
  1103  0004F0  C0C8  F02C         	movff	main@mR+1,stop@mR+1
  1104  0004F4  EC1C  F008         	call	_stop	;wreg free
  1105  0004F8                     
  1106                           ;main.c: 92:                     _delay((unsigned long)((250)*(64000000/4000.0)));
  1107  0004F8  0E15               	movlw	21
  1108  0004FA  0100               	movlb	0	; () banked
  1109  0004FC  6FC3               	movwf	(??_main+1)& (0+255),b
  1110  0004FE  0E4B               	movlw	75
  1111  000500  6FC2               	movwf	??_main& (0+255),b
  1112  000502  0EBE               	movlw	190
  1113  000504                     u3097:
  1114  000504  2EE8               	decfsz	wreg,f,c
  1115  000506  D7FE               	bra	u3097
  1116  000508  2FC2               	decfsz	??_main& (0+255),f,b
  1117  00050A  D7FC               	bra	u3097
  1118  00050C  2FC3               	decfsz	(??_main+1)& (0+255),f,b
  1119  00050E  D7FA               	bra	u3097
  1120  000510  F000               	nop	
  1121  000512                     
  1122                           ;main.c: 93:                     color_detected = decide_color();
  1123  000512  EC38  F000         	call	_decide_color	;wreg free
  1124  000516  0100               	movlb	0	; () banked
  1125  000518  6FC4               	movwf	main@color_detected& (0+255),b
  1126  00051A                     
  1127                           ; BSR set to: 0
  1128                           ;main.c: 94:                     color_flag = 0;
  1129  00051A  0E00               	movlw	0
  1130  00051C  6F9C               	movwf	_color_flag& (0+255),b
  1131  00051E                     
  1132                           ; BSR set to: 0
  1133                           ;main.c: 97:                     pick_move(color_detected, mL,mR);
  1134  00051E  C0C5  F0BD         	movff	main@mL,pick_move@mL
  1135  000522  C0C6  F0BE         	movff	main@mL+1,pick_move@mL+1
  1136  000526  C0C7  F0BF         	movff	main@mR,pick_move@mR
  1137  00052A  C0C8  F0C0         	movff	main@mR+1,pick_move@mR+1
  1138  00052E  51C4               	movf	main@color_detected& (0+255),w,b
  1139  000530  ECC4  F002         	call	_pick_move
  1140  000534                     
  1141                           ;main.c: 100:                     color_click_interrupt_init();
  1142  000534  ECD8  F00B         	call	_color_click_interrupt_init	;wreg free
  1143                           
  1144                           ;main.c: 102:                 } else {
  1145  000538  EFB7  F002         	goto	l3924
  1146  00053C                     l3916:
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;main.c: 103:                     stop(mL,mR);
  1150  00053C  C0C5  F029         	movff	main@mL,stop@mL
  1151  000540  C0C6  F02A         	movff	main@mL+1,stop@mL+1
  1152  000544  C0C7  F02B         	movff	main@mR,stop@mR
  1153  000548  C0C8  F02C         	movff	main@mR+1,stop@mR+1
  1154  00054C  EC1C  F008         	call	_stop	;wreg free
  1155  000550                     
  1156                           ;main.c: 104:                     getTMR0_in_ms();
  1157  000550  ECA9  F00D         	call	_getTMR0_in_ms	;wreg free
  1158  000554                     
  1159                           ;main.c: 105:                     color_click_interrupt_off();
  1160  000554  ECBA  F00E         	call	_color_click_interrupt_off	;wreg free
  1161  000558                     
  1162                           ;main.c: 106:                     pick_move(8, mL,mR);
  1163  000558  C0C5  F0BD         	movff	main@mL,pick_move@mL
  1164  00055C  C0C6  F0BE         	movff	main@mL+1,pick_move@mL+1
  1165  000560  C0C7  F0BF         	movff	main@mR,pick_move@mR
  1166  000564  C0C8  F0C0         	movff	main@mR+1,pick_move@mR+1
  1167  000568  0E08               	movlw	8
  1168  00056A  ECC4  F002         	call	_pick_move
  1169  00056E                     l3924:
  1170                           
  1171                           ;main.c: 80:            while(color_detected <8){
  1172  00056E  0E07               	movlw	7
  1173  000570  0100               	movlb	0	; () banked
  1174  000572  65C4               	cpfsgt	main@color_detected& (0+255),b
  1175  000574  EFBE  F002         	goto	u3051
  1176  000578  EFC0  F002         	goto	u3050
  1177  00057C                     u3051:
  1178  00057C  EF49  F002         	goto	l3894
  1179  000580                     u3050:
  1180  000580  EF2A  F002         	goto	l3876
  1181  000584  EF36  F000         	goto	start
  1182  000588                     __end_of_main:
  1183                           	callstack 0
  1184                           
  1185 ;; *************** function _pick_move *****************
  1186 ;; Defined at:
  1187 ;;		line 5 in file "CardMoves.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  color           1    wreg     unsigned char 
  1190 ;;  mL              2   29[BANK0 ] PTR struct DC_motor
  1191 ;;		 -> main@motorL(9), 
  1192 ;;  mR              2   31[BANK0 ] PTR struct DC_motor
  1193 ;;		 -> main@motorR(9), 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  color           1   68[COMRAM] unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  1    wreg      void 
  1198 ;; Registers used:
  1199 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1205 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1206 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1208 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1209 ;;Total ram usage:        5 bytes
  1210 ;; Hardware stack levels used: 1
  1211 ;; Hardware stack levels required when called: 13
  1212 ;; This function calls:
  1213 ;;		_LightsToggle
  1214 ;;		_add_function_ptr
  1215 ;;		_blue_move
  1216 ;;		_green_move
  1217 ;;		_lightblue_move
  1218 ;;		_orange_move
  1219 ;;		_pink_move
  1220 ;;		_red_move
  1221 ;;		_white_move
  1222 ;;		_yellow_move
  1223 ;; This function is called by:
  1224 ;;		_main
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           	psect	text1
  1229  000588                     __ptext1:
  1230                           	callstack 0
  1231  000588                     _pick_move:
  1232                           	callstack 17
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;incstack = 0
  1236                           ;pick_move@color stored from wreg
  1237  000588  6E45               	movwf	pick_move@color^0,c
  1238  00058A                     
  1239                           ;CardMoves.c: 6:     if (color == 8 ){
  1240  00058A  0E08               	movlw	8
  1241  00058C  1845               	xorwf	pick_move@color^0,w,c
  1242  00058E  A4D8               	btfss	status,2,c
  1243  000590  EFCC  F002         	goto	u2911
  1244  000594  EFCE  F002         	goto	u2910
  1245  000598                     u2911:
  1246  000598  EFDA  F002         	goto	l3786
  1247  00059C                     u2910:
  1248  00059C                     l3784:
  1249                           
  1250                           ;CardMoves.c: 7:         white_move(mL,mR);
  1251  00059C  C0BD  F0B4         	movff	pick_move@mL,white_move@mL
  1252  0005A0  C0BE  F0B5         	movff	pick_move@mL+1,white_move@mL+1
  1253  0005A4  C0BF  F0B6         	movff	pick_move@mR,white_move@mR
  1254  0005A8  C0C0  F0B7         	movff	pick_move@mR+1,white_move@mR+1
  1255  0005AC  ECBA  F005         	call	_white_move	;wreg free
  1256                           
  1257                           ;CardMoves.c: 8:     } else if (color == 9) {
  1258  0005B0  EFB1  F003         	goto	l591
  1259  0005B4                     l3786:
  1260  0005B4  0E09               	movlw	9
  1261  0005B6  1845               	xorwf	pick_move@color^0,w,c
  1262  0005B8  A4D8               	btfss	status,2,c
  1263  0005BA  EFE1  F002         	goto	u2921
  1264  0005BE  EFE3  F002         	goto	u2920
  1265  0005C2                     u2921:
  1266  0005C2  EFE7  F002         	goto	l3792
  1267  0005C6                     u2920:
  1268  0005C6                     
  1269                           ;CardMoves.c: 9:         LightsToggle();
  1270  0005C6  ECC0  F009         	call	_LightsToggle	;wreg free
  1271  0005CA  EFCE  F002         	goto	l3784
  1272  0005CE                     l3792:
  1273                           
  1274                           ;CardMoves.c: 12:         if(color == 1){
  1275  0005CE  0445               	decf	pick_move@color^0,w,c
  1276  0005D0  A4D8               	btfss	status,2,c
  1277  0005D2  EFED  F002         	goto	u2931
  1278  0005D6  EFEF  F002         	goto	u2930
  1279  0005DA                     u2931:
  1280  0005DA  EF03  F003         	goto	l3798
  1281  0005DE                     u2930:
  1282  0005DE                     
  1283                           ;CardMoves.c: 13:             add_function_ptr(&green_move);
  1284  0005DE  0EBC               	movlw	low _green_move
  1285  0005E0  6E10               	movwf	add_function_ptr@func^0,c
  1286  0005E2  0E19               	movlw	high _green_move
  1287  0005E4  6E11               	movwf	(add_function_ptr@func+1)^0,c
  1288  0005E6  0E00               	movlw	low (_green_move shr (0+16))
  1289  0005E8  6E12               	movwf	(add_function_ptr@func+2)^0,c
  1290  0005EA  EC74  F00D         	call	_add_function_ptr	;wreg free
  1291  0005EE                     
  1292                           ;CardMoves.c: 14:             red_move(mL,mR);
  1293  0005EE  C0BD  F0B0         	movff	pick_move@mL,red_move@mL
  1294  0005F2  C0BE  F0B1         	movff	pick_move@mL+1,red_move@mL+1
  1295  0005F6  C0BF  F0B2         	movff	pick_move@mR,red_move@mR
  1296  0005FA  C0C0  F0B3         	movff	pick_move@mR+1,red_move@mR+1
  1297  0005FE  ECBF  F00C         	call	_red_move	;wreg free
  1298                           
  1299                           ;CardMoves.c: 16:         } else if(color == 2){
  1300  000602  EFB1  F003         	goto	l591
  1301  000606                     l3798:
  1302  000606  0E02               	movlw	2
  1303  000608  1845               	xorwf	pick_move@color^0,w,c
  1304  00060A  A4D8               	btfss	status,2,c
  1305  00060C  EF0A  F003         	goto	u2941
  1306  000610  EF0C  F003         	goto	u2940
  1307  000614                     u2941:
  1308  000614  EF20  F003         	goto	l3804
  1309  000618                     u2940:
  1310  000618                     
  1311                           ;CardMoves.c: 17:             add_function_ptr(&red_move);
  1312  000618  0E7E               	movlw	low _red_move
  1313  00061A  6E10               	movwf	add_function_ptr@func^0,c
  1314  00061C  0E19               	movlw	high _red_move
  1315  00061E  6E11               	movwf	(add_function_ptr@func+1)^0,c
  1316  000620  0E00               	movlw	low (_red_move shr (0+16))
  1317  000622  6E12               	movwf	(add_function_ptr@func+2)^0,c
  1318  000624  EC74  F00D         	call	_add_function_ptr	;wreg free
  1319  000628                     
  1320                           ;CardMoves.c: 18:             green_move(mL,mR);
  1321  000628  C0BD  F0B0         	movff	pick_move@mL,green_move@mL
  1322  00062C  C0BE  F0B1         	movff	pick_move@mL+1,green_move@mL+1
  1323  000630  C0BF  F0B2         	movff	pick_move@mR,green_move@mR
  1324  000634  C0C0  F0B3         	movff	pick_move@mR+1,green_move@mR+1
  1325  000638  ECDE  F00C         	call	_green_move	;wreg free
  1326                           
  1327                           ;CardMoves.c: 20:         } else if(color == 3){
  1328  00063C  EFB1  F003         	goto	l591
  1329  000640                     l3804:
  1330  000640  0E03               	movlw	3
  1331  000642  1845               	xorwf	pick_move@color^0,w,c
  1332  000644  A4D8               	btfss	status,2,c
  1333  000646  EF27  F003         	goto	u2951
  1334  00064A  EF29  F003         	goto	u2950
  1335  00064E                     u2951:
  1336  00064E  EF3D  F003         	goto	l3810
  1337  000652                     u2950:
  1338  000652                     
  1339                           ;CardMoves.c: 21:             add_function_ptr(&blue_move);
  1340  000652  0E00               	movlw	low _blue_move
  1341  000654  6E10               	movwf	add_function_ptr@func^0,c
  1342  000656  0E19               	movlw	high _blue_move
  1343  000658  6E11               	movwf	(add_function_ptr@func+1)^0,c
  1344  00065A  0E00               	movlw	low (_blue_move shr (0+16))
  1345  00065C  6E12               	movwf	(add_function_ptr@func+2)^0,c
  1346  00065E  EC74  F00D         	call	_add_function_ptr	;wreg free
  1347  000662                     
  1348                           ;CardMoves.c: 22:             blue_move(mL,mR);
  1349  000662  C0BD  F0B0         	movff	pick_move@mL,blue_move@mL
  1350  000666  C0BE  F0B1         	movff	pick_move@mL+1,blue_move@mL+1
  1351  00066A  C0BF  F0B2         	movff	pick_move@mR,blue_move@mR
  1352  00066E  C0C0  F0B3         	movff	pick_move@mR+1,blue_move@mR+1
  1353  000672  EC80  F00C         	call	_blue_move	;wreg free
  1354                           
  1355                           ;CardMoves.c: 24:         } else if (color == 4){
  1356  000676  EFB1  F003         	goto	l591
  1357  00067A                     l3810:
  1358  00067A  0E04               	movlw	4
  1359  00067C  1845               	xorwf	pick_move@color^0,w,c
  1360  00067E  A4D8               	btfss	status,2,c
  1361  000680  EF44  F003         	goto	u2961
  1362  000684  EF46  F003         	goto	u2960
  1363  000688                     u2961:
  1364  000688  EF5A  F003         	goto	l3816
  1365  00068C                     u2960:
  1366  00068C                     
  1367                           ;CardMoves.c: 25:             add_function_ptr(reverse_yellow_move);
  1368  00068C  0E7A               	movlw	low _reverse_yellow_move
  1369  00068E  6E10               	movwf	add_function_ptr@func^0,c
  1370  000690  0E16               	movlw	high _reverse_yellow_move
  1371  000692  6E11               	movwf	(add_function_ptr@func+1)^0,c
  1372  000694  0E00               	movlw	low (_reverse_yellow_move shr (0+16))
  1373  000696  6E12               	movwf	(add_function_ptr@func+2)^0,c
  1374  000698  EC74  F00D         	call	_add_function_ptr	;wreg free
  1375  00069C                     
  1376                           ;CardMoves.c: 26:             yellow_move(mL,mR);
  1377  00069C  C0BD  F03F         	movff	pick_move@mL,yellow_move@mL
  1378  0006A0  C0BE  F040         	movff	pick_move@mL+1,yellow_move@mL+1
  1379  0006A4  C0BF  F041         	movff	pick_move@mR,yellow_move@mR
  1380  0006A8  C0C0  F042         	movff	pick_move@mR+1,yellow_move@mR+1
  1381  0006AC  ECA0  F00C         	call	_yellow_move	;wreg free
  1382                           
  1383                           ;CardMoves.c: 28:         } else if (color == 5){
  1384  0006B0  EFB1  F003         	goto	l591
  1385  0006B4                     l3816:
  1386  0006B4  0E05               	movlw	5
  1387  0006B6  1845               	xorwf	pick_move@color^0,w,c
  1388  0006B8  A4D8               	btfss	status,2,c
  1389  0006BA  EF61  F003         	goto	u2971
  1390  0006BE  EF63  F003         	goto	u2970
  1391  0006C2                     u2971:
  1392  0006C2  EF77  F003         	goto	l3822
  1393  0006C6                     u2970:
  1394  0006C6                     
  1395                           ;CardMoves.c: 29:             add_function_ptr(reverse_pink_move);
  1396  0006C6  0E28               	movlw	low _reverse_pink_move
  1397  0006C8  6E10               	movwf	add_function_ptr@func^0,c
  1398  0006CA  0E16               	movlw	high _reverse_pink_move
  1399  0006CC  6E11               	movwf	(add_function_ptr@func+1)^0,c
  1400  0006CE  0E00               	movlw	low (_reverse_pink_move shr (0+16))
  1401  0006D0  6E12               	movwf	(add_function_ptr@func+2)^0,c
  1402  0006D2  EC74  F00D         	call	_add_function_ptr	;wreg free
  1403  0006D6                     
  1404                           ;CardMoves.c: 30:             pink_move(mL,mR);
  1405  0006D6  C0BD  F03F         	movff	pick_move@mL,pink_move@mL
  1406  0006DA  C0BE  F040         	movff	pick_move@mL+1,pink_move@mL+1
  1407  0006DE  C0BF  F041         	movff	pick_move@mR,pink_move@mR
  1408  0006E2  C0C0  F042         	movff	pick_move@mR+1,pink_move@mR+1
  1409  0006E6  ECFD  F00C         	call	_pink_move	;wreg free
  1410                           
  1411                           ;CardMoves.c: 32:         } else if (color == 6){
  1412  0006EA  EFB1  F003         	goto	l591
  1413  0006EE                     l3822:
  1414  0006EE  0E06               	movlw	6
  1415  0006F0  1845               	xorwf	pick_move@color^0,w,c
  1416  0006F2  A4D8               	btfss	status,2,c
  1417  0006F4  EF7E  F003         	goto	u2981
  1418  0006F8  EF80  F003         	goto	u2980
  1419  0006FC                     u2981:
  1420  0006FC  EF94  F003         	goto	l3828
  1421  000700                     u2980:
  1422  000700                     
  1423                           ;CardMoves.c: 33:             add_function_ptr(&lightblue_move);
  1424  000700  0EC0               	movlw	low _lightblue_move
  1425  000702  6E10               	movwf	add_function_ptr@func^0,c
  1426  000704  0E18               	movlw	high _lightblue_move
  1427  000706  6E11               	movwf	(add_function_ptr@func+1)^0,c
  1428  000708  0E00               	movlw	low (_lightblue_move shr (0+16))
  1429  00070A  6E12               	movwf	(add_function_ptr@func+2)^0,c
  1430  00070C  EC74  F00D         	call	_add_function_ptr	;wreg free
  1431  000710                     
  1432                           ;CardMoves.c: 34:             orange_move(mL,mR);
  1433  000710  C0BD  F0B0         	movff	pick_move@mL,orange_move@mL
  1434  000714  C0BE  F0B1         	movff	pick_move@mL+1,orange_move@mL+1
  1435  000718  C0BF  F0B2         	movff	pick_move@mR,orange_move@mR
  1436  00071C  C0C0  F0B3         	movff	pick_move@mR+1,orange_move@mR+1
  1437  000720  EC40  F00C         	call	_orange_move	;wreg free
  1438                           
  1439                           ;CardMoves.c: 36:         } else if (color == 7){
  1440  000724  EFB1  F003         	goto	l591
  1441  000728                     l3828:
  1442  000728  0E07               	movlw	7
  1443  00072A  1845               	xorwf	pick_move@color^0,w,c
  1444  00072C  A4D8               	btfss	status,2,c
  1445  00072E  EF9B  F003         	goto	u2991
  1446  000732  EF9D  F003         	goto	u2990
  1447  000736                     u2991:
  1448  000736  EFB1  F003         	goto	l585
  1449  00073A                     u2990:
  1450  00073A                     
  1451                           ;CardMoves.c: 37:             add_function_ptr(&orange_move);
  1452  00073A  0E80               	movlw	low _orange_move
  1453  00073C  6E10               	movwf	add_function_ptr@func^0,c
  1454  00073E  0E18               	movlw	high _orange_move
  1455  000740  6E11               	movwf	(add_function_ptr@func+1)^0,c
  1456  000742  0E00               	movlw	low (_orange_move shr (0+16))
  1457  000744  6E12               	movwf	(add_function_ptr@func+2)^0,c
  1458  000746  EC74  F00D         	call	_add_function_ptr	;wreg free
  1459  00074A                     
  1460                           ;CardMoves.c: 38:             lightblue_move(mL,mR);
  1461  00074A  C0BD  F0B0         	movff	pick_move@mL,lightblue_move@mL
  1462  00074E  C0BE  F0B1         	movff	pick_move@mL+1,lightblue_move@mL+1
  1463  000752  C0BF  F0B2         	movff	pick_move@mR,lightblue_move@mR
  1464  000756  C0C0  F0B3         	movff	pick_move@mR+1,lightblue_move@mR+1
  1465  00075A  EC60  F00C         	call	_lightblue_move	;wreg free
  1466  00075E  EFB1  F003         	goto	l591
  1467  000762                     l585:
  1468  000762                     l591:
  1469  000762  0012               	return		;funcret
  1470  000764                     __end_of_pick_move:
  1471                           	callstack 0
  1472                           
  1473 ;; *************** function _yellow_move *****************
  1474 ;; Defined at:
  1475 ;;		line 83 in file "CardMoves.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  mL              2   62[COMRAM] PTR struct DC_motor
  1478 ;;		 -> main@motorL(9), 
  1479 ;;  mR              2   64[COMRAM] PTR struct DC_motor
  1480 ;;		 -> main@motorR(9), 
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;		None
  1483 ;; Return value:  Size  Location     Type
  1484 ;;                  1    wreg      void 
  1485 ;; Registers used:
  1486 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1492 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1495 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1496 ;;Total ram usage:        4 bytes
  1497 ;; Hardware stack levels used: 1
  1498 ;; Hardware stack levels required when called: 10
  1499 ;; This function calls:
  1500 ;;		_TurnRight
  1501 ;;		_reverse_square
  1502 ;; This function is called by:
  1503 ;;		_pick_move
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text2
  1508  001940                     __ptext2:
  1509                           	callstack 0
  1510  001940                     _yellow_move:
  1511                           	callstack 19
  1512  001940                     
  1513                           ;CardMoves.c: 84:     reverse_square(mL,mR);
  1514  001940  C03F  F039         	movff	yellow_move@mL,reverse_square@mL
  1515  001944  C040  F03A         	movff	yellow_move@mL+1,reverse_square@mL+1
  1516  001948  C041  F03B         	movff	yellow_move@mR,reverse_square@mR
  1517  00194C  C042  F03C         	movff	yellow_move@mR+1,reverse_square@mR+1
  1518  001950  ECB3  F00B         	call	_reverse_square	;wreg free
  1519                           
  1520                           ;CardMoves.c: 85:     TurnRight(mL,mR);
  1521  001954  C03F  F030         	movff	yellow_move@mL,TurnRight@mL
  1522  001958  C040  F031         	movff	yellow_move@mL+1,TurnRight@mL+1
  1523  00195C  C041  F032         	movff	yellow_move@mR,TurnRight@mR
  1524  001960  C042  F033         	movff	yellow_move@mR+1,TurnRight@mR+1
  1525  001964  EC36  F007         	call	_TurnRight	;wreg free
  1526                           
  1527                           ;CardMoves.c: 86:     TurnRight(mL,mR);
  1528  001968  C03F  F030         	movff	yellow_move@mL,TurnRight@mL
  1529  00196C  C040  F031         	movff	yellow_move@mL+1,TurnRight@mL+1
  1530  001970  C041  F032         	movff	yellow_move@mR,TurnRight@mR
  1531  001974  C042  F033         	movff	yellow_move@mR+1,TurnRight@mR+1
  1532  001978  EC36  F007         	call	_TurnRight	;wreg free
  1533  00197C  0012               	return		;funcret
  1534  00197E                     __end_of_yellow_move:
  1535                           	callstack 0
  1536                           
  1537 ;; *************** function _white_move *****************
  1538 ;; Defined at:
  1539 ;;		line 116 in file "CardMoves.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;  mL              2   20[BANK0 ] PTR struct DC_motor
  1542 ;;		 -> main@motorL(9), 
  1543 ;;  mR              2   22[BANK0 ] PTR struct DC_motor
  1544 ;;		 -> main@motorR(9), 
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;  temp_func       3   24[BANK0 ] PTR FTN(PTR struct DC_mo
  1547 ;;		 -> orange_move(1), lightblue_move(1), reverse_pink_move(1), reverse_yellow_move(1), 
  1548 ;;		 -> blue_move(1), red_move(1), green_move(1), 
  1549 ;;  temp_time       2   27[BANK0 ] unsigned int 
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1559 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1560 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1562 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1563 ;;Total ram usage:       11 bytes
  1564 ;; Hardware stack levels used: 1
  1565 ;; Hardware stack levels required when called: 12
  1566 ;; This function calls:
  1567 ;;		_LightsToggle
  1568 ;;		_blue_move
  1569 ;;		_get_function_ptr
  1570 ;;		_get_timing
  1571 ;;		_green_move
  1572 ;;		_lightblue_move
  1573 ;;		_move_forward
  1574 ;;		_orange_move
  1575 ;;		_red_move
  1576 ;;		_reverse_pink_move
  1577 ;;		_reverse_yellow_move
  1578 ;;		_stop
  1579 ;; This function is called by:
  1580 ;;		_pick_move
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text3
  1585  000B74                     __ptext3:
  1586                           	callstack 0
  1587  000B74                     _white_move:
  1588                           	callstack 17
  1589  000B74                     
  1590                           ;CardMoves.c: 118:     blue_move(mL,mR);
  1591  000B74  C0B4  F0B0         	movff	white_move@mL,blue_move@mL
  1592  000B78  C0B5  F0B1         	movff	white_move@mL+1,blue_move@mL+1
  1593  000B7C  C0B6  F0B2         	movff	white_move@mR,blue_move@mR
  1594  000B80  C0B7  F0B3         	movff	white_move@mR+1,blue_move@mR+1
  1595  000B84  EC80  F00C         	call	_blue_move	;wreg free
  1596                           
  1597                           ;CardMoves.c: 120:     unsigned int temp_time;;CardMoves.c: 121:     card_func temp_func
      +                          ;;CardMoves.c: 124:     while(time_index > 0){
  1598  000B88  EF2D  F006         	goto	l3512
  1599  000B8C                     l3494:
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;CardMoves.c: 125:         temp_time = get_timing();
  1603  000B8C  EC68  F00E         	call	_get_timing	;wreg free
  1604  000B90  C010  F0BB         	movff	?_get_timing,white_move@temp_time
  1605  000B94  C011  F0BC         	movff	?_get_timing+1,white_move@temp_time+1
  1606  000B98                     
  1607                           ;CardMoves.c: 128:         move_forward(mL,mR,temp_time);
  1608  000B98  C0B4  F030         	movff	white_move@mL,move_forward@mL
  1609  000B9C  C0B5  F031         	movff	white_move@mL+1,move_forward@mL+1
  1610  000BA0  C0B6  F032         	movff	white_move@mR,move_forward@mR
  1611  000BA4  C0B7  F033         	movff	white_move@mR+1,move_forward@mR+1
  1612  000BA8  C0BB  F034         	movff	white_move@temp_time,move_forward@duration
  1613  000BAC  C0BC  F035         	movff	white_move@temp_time+1,move_forward@duration+1
  1614  000BB0  EC8F  F008         	call	_move_forward	;wreg free
  1615  000BB4                     
  1616                           ;CardMoves.c: 129:         stop(mL,mR);
  1617  000BB4  C0B4  F029         	movff	white_move@mL,stop@mL
  1618  000BB8  C0B5  F02A         	movff	white_move@mL+1,stop@mL+1
  1619  000BBC  C0B6  F02B         	movff	white_move@mR,stop@mR
  1620  000BC0  C0B7  F02C         	movff	white_move@mR+1,stop@mR+1
  1621  000BC4  EC1C  F008         	call	_stop	;wreg free
  1622  000BC8                     
  1623                           ;CardMoves.c: 130:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1624  000BC8  0E52               	movlw	82
  1625  000BCA  6E44               	movwf	(??_white_move+1)^0,c
  1626  000BCC  0E2B               	movlw	43
  1627  000BCE  6E43               	movwf	??_white_move^0,c
  1628  000BD0  0E00               	movlw	0
  1629  000BD2                     u3107:
  1630  000BD2  2EE8               	decfsz	wreg,f,c
  1631  000BD4  D7FE               	bra	u3107
  1632  000BD6  2E43               	decfsz	??_white_move^0,f,c
  1633  000BD8  D7FC               	bra	u3107
  1634  000BDA  2E44               	decfsz	(??_white_move+1)^0,f,c
  1635  000BDC  D7FA               	bra	u3107
  1636  000BDE  D000               	nop2	
  1637  000BE0                     
  1638                           ;CardMoves.c: 132:         if (func_index > 0){
  1639  000BE0  0100               	movlb	0	; () banked
  1640  000BE2  519F               	movf	_func_index& (0+255),w,b
  1641  000BE4  B4D8               	btfsc	status,2,c
  1642  000BE6  EFF7  F005         	goto	u2441
  1643  000BEA  EFF9  F005         	goto	u2440
  1644  000BEE                     u2441:
  1645  000BEE  EF21  F006         	goto	l3510
  1646  000BF2                     u2440:
  1647  000BF2                     
  1648                           ; BSR set to: 0
  1649                           ;CardMoves.c: 134:             temp_func = get_function_ptr();
  1650  000BF2  EC27  F00E         	call	_get_function_ptr	;wreg free
  1651  000BF6  C010  F0B8         	movff	?_get_function_ptr,white_move@temp_func
  1652  000BFA  C011  F0B9         	movff	?_get_function_ptr+1,white_move@temp_func+1
  1653  000BFE  C012  F0BA         	movff	?_get_function_ptr+2,white_move@temp_func+2
  1654  000C02                     
  1655                           ;CardMoves.c: 135:             temp_func(mL,mR);
  1656  000C02  C0B4  F0B0         	movff	white_move@mL,orange_move@mL
  1657  000C06  C0B5  F0B1         	movff	white_move@mL+1,orange_move@mL+1
  1658  000C0A  C0B6  F0B2         	movff	white_move@mR,orange_move@mR
  1659  000C0E  C0B7  F0B3         	movff	white_move@mR+1,orange_move@mR+1
  1660  000C12  D802               	call	u2458
  1661  000C14  EF17  F006         	goto	u2459
  1662  000C18                     u2458:
  1663  000C18  0005               	push	
  1664  000C1A  6EFA               	movwf	pclath,c
  1665  000C1C  0100               	movlb	0	; () banked
  1666  000C1E  51B8               	movf	white_move@temp_func& (0+255),w,b
  1667  000C20  6EFD               	movwf	tosl,c
  1668  000C22  51B9               	movf	(white_move@temp_func+1)& (0+255),w,b
  1669  000C24  6EFE               	movwf	tosh,c
  1670  000C26  51BA               	movf	(white_move@temp_func+2)& (0+255),w,b
  1671  000C28  6EFF               	movwf	tosu,c
  1672  000C2A  50FA               	movf	pclath,w,c
  1673  000C2C  0012               	return		;indir
  1674  000C2E                     u2459:
  1675  000C2E                     
  1676                           ;CardMoves.c: 136:             stop(mL,mR);
  1677  000C2E  C0B4  F029         	movff	white_move@mL,stop@mL
  1678  000C32  C0B5  F02A         	movff	white_move@mL+1,stop@mL+1
  1679  000C36  C0B6  F02B         	movff	white_move@mR,stop@mR
  1680  000C3A  C0B7  F02C         	movff	white_move@mR+1,stop@mR+1
  1681  000C3E  EC1C  F008         	call	_stop	;wreg free
  1682  000C42                     l3510:
  1683                           
  1684                           ;CardMoves.c: 138:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1685  000C42  0E52               	movlw	82
  1686  000C44  6E44               	movwf	(??_white_move+1)^0,c
  1687  000C46  0E2B               	movlw	43
  1688  000C48  6E43               	movwf	??_white_move^0,c
  1689  000C4A  0E00               	movlw	0
  1690  000C4C                     u3117:
  1691  000C4C  2EE8               	decfsz	wreg,f,c
  1692  000C4E  D7FE               	bra	u3117
  1693  000C50  2E43               	decfsz	??_white_move^0,f,c
  1694  000C52  D7FC               	bra	u3117
  1695  000C54  2E44               	decfsz	(??_white_move+1)^0,f,c
  1696  000C56  D7FA               	bra	u3117
  1697  000C58  D000               	nop2	
  1698  000C5A                     l3512:
  1699                           
  1700                           ;CardMoves.c: 124:     while(time_index > 0){
  1701  000C5A  0100               	movlb	0	; () banked
  1702  000C5C  519E               	movf	_time_index& (0+255),w,b
  1703  000C5E  A4D8               	btfss	status,2,c
  1704  000C60  EF34  F006         	goto	u2461
  1705  000C64  EF36  F006         	goto	u2460
  1706  000C68                     u2461:
  1707  000C68  EFC6  F005         	goto	l3494
  1708  000C6C                     u2460:
  1709  000C6C                     
  1710                           ; BSR set to: 0
  1711                           ;CardMoves.c: 140:     stop(mL,mR);
  1712  000C6C  C0B4  F029         	movff	white_move@mL,stop@mL
  1713  000C70  C0B5  F02A         	movff	white_move@mL+1,stop@mL+1
  1714  000C74  C0B6  F02B         	movff	white_move@mR,stop@mR
  1715  000C78  C0B7  F02C         	movff	white_move@mR+1,stop@mR+1
  1716  000C7C  EC1C  F008         	call	_stop	;wreg free
  1717  000C80                     
  1718                           ;CardMoves.c: 141:     LightsToggle();
  1719  000C80  ECC0  F009         	call	_LightsToggle	;wreg free
  1720  000C84  0012               	return		;funcret
  1721  000C86                     __end_of_white_move:
  1722                           	callstack 0
  1723                           
  1724 ;; *************** function _orange_move *****************
  1725 ;; Defined at:
  1726 ;;		line 69 in file "CardMoves.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;  mL              2   16[BANK0 ] PTR struct DC_motor
  1729 ;;		 -> main@motorL(9), 
  1730 ;;  mR              2   18[BANK0 ] PTR struct DC_motor
  1731 ;;		 -> main@motorR(9), 
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  i               1   65[COMRAM] unsigned char 
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1743 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1746 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1747 ;;Total ram usage:        5 bytes
  1748 ;; Hardware stack levels used: 1
  1749 ;; Hardware stack levels required when called: 10
  1750 ;; This function calls:
  1751 ;;		_PrepareForTurn
  1752 ;;		_TurnRight
  1753 ;; This function is called by:
  1754 ;;		_pick_move
  1755 ;;		_white_move
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           	psect	text4
  1760  001880                     __ptext4:
  1761                           	callstack 0
  1762  001880                     _orange_move:
  1763                           	callstack 18
  1764  001880                     
  1765                           ;CardMoves.c: 70:     PrepareForTurn(mL,mR);
  1766  001880  C0B0  F039         	movff	orange_move@mL,PrepareForTurn@mL
  1767  001884  C0B1  F03A         	movff	orange_move@mL+1,PrepareForTurn@mL+1
  1768  001888  C0B2  F03B         	movff	orange_move@mR,PrepareForTurn@mR
  1769  00188C  C0B3  F03C         	movff	orange_move@mR+1,PrepareForTurn@mR+1
  1770  001890  EC8B  F00A         	call	_PrepareForTurn	;wreg free
  1771  001894                     
  1772                           ;CardMoves.c: 71:     for(char i=0;i<3;i++)TurnRight(mL,mR);
  1773  001894  0E00               	movlw	0
  1774  001896  6E42               	movwf	orange_move@i^0,c
  1775  001898                     l3440:
  1776  001898  C0B0  F030         	movff	orange_move@mL,TurnRight@mL
  1777  00189C  C0B1  F031         	movff	orange_move@mL+1,TurnRight@mL+1
  1778  0018A0  C0B2  F032         	movff	orange_move@mR,TurnRight@mR
  1779  0018A4  C0B3  F033         	movff	orange_move@mR+1,TurnRight@mR+1
  1780  0018A8  EC36  F007         	call	_TurnRight	;wreg free
  1781  0018AC  2A42               	incf	orange_move@i^0,f,c
  1782  0018AE  0E02               	movlw	2
  1783  0018B0  6442               	cpfsgt	orange_move@i^0,c
  1784  0018B2  EF5D  F00C         	goto	u2411
  1785  0018B6  EF5F  F00C         	goto	u2410
  1786  0018BA                     u2411:
  1787  0018BA  EF4C  F00C         	goto	l3440
  1788  0018BE                     u2410:
  1789  0018BE  0012               	return		;funcret
  1790  0018C0                     __end_of_orange_move:
  1791                           	callstack 0
  1792                           
  1793 ;; *************** function _lightblue_move *****************
  1794 ;; Defined at:
  1795 ;;		line 76 in file "CardMoves.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;  mL              2   16[BANK0 ] PTR struct DC_motor
  1798 ;;		 -> main@motorL(9), 
  1799 ;;  mR              2   18[BANK0 ] PTR struct DC_motor
  1800 ;;		 -> main@motorR(9), 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;  i               1   65[COMRAM] unsigned char 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1812 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1813 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1815 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1816 ;;Total ram usage:        5 bytes
  1817 ;; Hardware stack levels used: 1
  1818 ;; Hardware stack levels required when called: 10
  1819 ;; This function calls:
  1820 ;;		_PrepareForTurn
  1821 ;;		_TurnLeft
  1822 ;; This function is called by:
  1823 ;;		_pick_move
  1824 ;;		_white_move
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text5
  1829  0018C0                     __ptext5:
  1830                           	callstack 0
  1831  0018C0                     _lightblue_move:
  1832                           	callstack 18
  1833  0018C0                     
  1834                           ;CardMoves.c: 77:     PrepareForTurn(mL,mR);
  1835  0018C0  C0B0  F039         	movff	lightblue_move@mL,PrepareForTurn@mL
  1836  0018C4  C0B1  F03A         	movff	lightblue_move@mL+1,PrepareForTurn@mL+1
  1837  0018C8  C0B2  F03B         	movff	lightblue_move@mR,PrepareForTurn@mR
  1838  0018CC  C0B3  F03C         	movff	lightblue_move@mR+1,PrepareForTurn@mR+1
  1839  0018D0  EC8B  F00A         	call	_PrepareForTurn	;wreg free
  1840  0018D4                     
  1841                           ;CardMoves.c: 78:     for(char i=0;i<3;i++) TurnLeft(mL,mR);
  1842  0018D4  0E00               	movlw	0
  1843  0018D6  6E42               	movwf	lightblue_move@i^0,c
  1844  0018D8                     l3454:
  1845  0018D8  C0B0  F030         	movff	lightblue_move@mL,TurnLeft@mL
  1846  0018DC  C0B1  F031         	movff	lightblue_move@mL+1,TurnLeft@mL+1
  1847  0018E0  C0B2  F032         	movff	lightblue_move@mR,TurnLeft@mR
  1848  0018E4  C0B3  F033         	movff	lightblue_move@mR+1,TurnLeft@mR+1
  1849  0018E8  ECA9  F007         	call	_TurnLeft	;wreg free
  1850  0018EC  2A42               	incf	lightblue_move@i^0,f,c
  1851  0018EE  0E02               	movlw	2
  1852  0018F0  6442               	cpfsgt	lightblue_move@i^0,c
  1853  0018F2  EF7D  F00C         	goto	u2421
  1854  0018F6  EF7F  F00C         	goto	u2420
  1855  0018FA                     u2421:
  1856  0018FA  EF6C  F00C         	goto	l3454
  1857  0018FE                     u2420:
  1858  0018FE  0012               	return		;funcret
  1859  001900                     __end_of_lightblue_move:
  1860                           	callstack 0
  1861                           
  1862 ;; *************** function _reverse_pink_move *****************
  1863 ;; Defined at:
  1864 ;;		line 108 in file "CardMoves.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;  mL              2   16[BANK0 ] PTR struct DC_motor
  1867 ;;		 -> main@motorL(9), 
  1868 ;;  mR              2   18[BANK0 ] PTR struct DC_motor
  1869 ;;		 -> main@motorR(9), 
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1881 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1884 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1885 ;;Total ram usage:        4 bytes
  1886 ;; Hardware stack levels used: 1
  1887 ;; Hardware stack levels required when called: 11
  1888 ;; This function calls:
  1889 ;;		_TurnLeft
  1890 ;;		_blue_move
  1891 ;;		_forward_square
  1892 ;; This function is called by:
  1893 ;;		_pick_move
  1894 ;;		_white_move
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           	psect	text6
  1899  001628                     __ptext6:
  1900                           	callstack 0
  1901  001628                     _reverse_pink_move:
  1902                           	callstack 17
  1903  001628                     
  1904                           ;CardMoves.c: 109:     TurnLeft(mL,mR);
  1905  001628  C0B0  F030         	movff	reverse_pink_move@mL,TurnLeft@mL
  1906  00162C  C0B1  F031         	movff	reverse_pink_move@mL+1,TurnLeft@mL+1
  1907  001630  C0B2  F032         	movff	reverse_pink_move@mR,TurnLeft@mR
  1908  001634  C0B3  F033         	movff	reverse_pink_move@mR+1,TurnLeft@mR+1
  1909  001638  ECA9  F007         	call	_TurnLeft	;wreg free
  1910                           
  1911                           ;CardMoves.c: 110:     TurnLeft(mL,mR);
  1912  00163C  C0B0  F030         	movff	reverse_pink_move@mL,TurnLeft@mL
  1913  001640  C0B1  F031         	movff	reverse_pink_move@mL+1,TurnLeft@mL+1
  1914  001644  C0B2  F032         	movff	reverse_pink_move@mR,TurnLeft@mR
  1915  001648  C0B3  F033         	movff	reverse_pink_move@mR+1,TurnLeft@mR+1
  1916  00164C  ECA9  F007         	call	_TurnLeft	;wreg free
  1917                           
  1918                           ;CardMoves.c: 111:     forward_square(mL,mR);
  1919  001650  C0B0  F039         	movff	reverse_pink_move@mL,forward_square@mL
  1920  001654  C0B1  F03A         	movff	reverse_pink_move@mL+1,forward_square@mL+1
  1921  001658  C0B2  F03B         	movff	reverse_pink_move@mR,forward_square@mR
  1922  00165C  C0B3  F03C         	movff	reverse_pink_move@mR+1,forward_square@mR+1
  1923  001660  EC8E  F00B         	call	_forward_square	;wreg free
  1924                           
  1925                           ;CardMoves.c: 112:     blue_move(mL,mR);
  1926  001664  C0B0  F0B0         	movff	reverse_pink_move@mL,blue_move@mL
  1927  001668  C0B1  F0B1         	movff	reverse_pink_move@mL+1,blue_move@mL+1
  1928  00166C  C0B2  F0B2         	movff	reverse_pink_move@mR,blue_move@mR
  1929  001670  C0B3  F0B3         	movff	reverse_pink_move@mR+1,blue_move@mR+1
  1930  001674  EC80  F00C         	call	_blue_move	;wreg free
  1931  001678  0012               	return		;funcret
  1932  00167A                     __end_of_reverse_pink_move:
  1933                           	callstack 0
  1934                           
  1935 ;; *************** function _blue_move *****************
  1936 ;; Defined at:
  1937 ;;		line 61 in file "CardMoves.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  mL              2   16[BANK0 ] PTR struct DC_motor
  1940 ;;		 -> main@motorL(9), 
  1941 ;;  mR              2   18[BANK0 ] PTR struct DC_motor
  1942 ;;		 -> main@motorR(9), 
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;  i               1   64[COMRAM] unsigned char 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1954 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1957 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1958 ;;Total ram usage:        5 bytes
  1959 ;; Hardware stack levels used: 1
  1960 ;; Hardware stack levels required when called: 10
  1961 ;; This function calls:
  1962 ;;		_PrepareForTurn
  1963 ;;		_TurnLeft
  1964 ;; This function is called by:
  1965 ;;		_pick_move
  1966 ;;		_reverse_yellow_move
  1967 ;;		_reverse_pink_move
  1968 ;;		_white_move
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text7
  1973  001900                     __ptext7:
  1974                           	callstack 0
  1975  001900                     _blue_move:
  1976                           	callstack 17
  1977  001900                     
  1978                           ;CardMoves.c: 62:     PrepareForTurn(mL,mR);
  1979  001900  C0B0  F039         	movff	blue_move@mL,PrepareForTurn@mL
  1980  001904  C0B1  F03A         	movff	blue_move@mL+1,PrepareForTurn@mL+1
  1981  001908  C0B2  F03B         	movff	blue_move@mR,PrepareForTurn@mR
  1982  00190C  C0B3  F03C         	movff	blue_move@mR+1,PrepareForTurn@mR+1
  1983  001910  EC8B  F00A         	call	_PrepareForTurn	;wreg free
  1984  001914                     
  1985                           ;CardMoves.c: 63:     for(char i=0;i<4;i++) TurnLeft(mL,mR);
  1986  001914  0E00               	movlw	0
  1987  001916  6E41               	movwf	blue_move@i^0,c
  1988  001918                     l3394:
  1989  001918  C0B0  F030         	movff	blue_move@mL,TurnLeft@mL
  1990  00191C  C0B1  F031         	movff	blue_move@mL+1,TurnLeft@mL+1
  1991  001920  C0B2  F032         	movff	blue_move@mR,TurnLeft@mR
  1992  001924  C0B3  F033         	movff	blue_move@mR+1,TurnLeft@mR+1
  1993  001928  ECA9  F007         	call	_TurnLeft	;wreg free
  1994  00192C  2A41               	incf	blue_move@i^0,f,c
  1995  00192E  0E03               	movlw	3
  1996  001930  6441               	cpfsgt	blue_move@i^0,c
  1997  001932  EF9D  F00C         	goto	u2331
  1998  001936  EF9F  F00C         	goto	u2330
  1999  00193A                     u2331:
  2000  00193A  EF8C  F00C         	goto	l3394
  2001  00193E                     u2330:
  2002  00193E  0012               	return		;funcret
  2003  001940                     __end_of_blue_move:
  2004                           	callstack 0
  2005                           
  2006 ;; *************** function _red_move *****************
  2007 ;; Defined at:
  2008 ;;		line 45 in file "CardMoves.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  mL              2   16[BANK0 ] PTR struct DC_motor
  2011 ;;		 -> main@motorL(9), 
  2012 ;;  mR              2   18[BANK0 ] PTR struct DC_motor
  2013 ;;		 -> main@motorR(9), 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;		None
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2025 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2028 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;Total ram usage:        4 bytes
  2030 ;; Hardware stack levels used: 1
  2031 ;; Hardware stack levels required when called: 10
  2032 ;; This function calls:
  2033 ;;		_PrepareForTurn
  2034 ;;		_TurnRight
  2035 ;; This function is called by:
  2036 ;;		_pick_move
  2037 ;;		_white_move
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text8
  2042  00197E                     __ptext8:
  2043                           	callstack 0
  2044  00197E                     _red_move:
  2045                           	callstack 18
  2046  00197E                     
  2047                           ;CardMoves.c: 46:     PrepareForTurn(mL,mR);
  2048  00197E  C0B0  F039         	movff	red_move@mL,PrepareForTurn@mL
  2049  001982  C0B1  F03A         	movff	red_move@mL+1,PrepareForTurn@mL+1
  2050  001986  C0B2  F03B         	movff	red_move@mR,PrepareForTurn@mR
  2051  00198A  C0B3  F03C         	movff	red_move@mR+1,PrepareForTurn@mR+1
  2052  00198E  EC8B  F00A         	call	_PrepareForTurn	;wreg free
  2053                           
  2054                           ;CardMoves.c: 47:     TurnRight(mL,mR);
  2055  001992  C0B0  F030         	movff	red_move@mL,TurnRight@mL
  2056  001996  C0B1  F031         	movff	red_move@mL+1,TurnRight@mL+1
  2057  00199A  C0B2  F032         	movff	red_move@mR,TurnRight@mR
  2058  00199E  C0B3  F033         	movff	red_move@mR+1,TurnRight@mR+1
  2059  0019A2  EC36  F007         	call	_TurnRight	;wreg free
  2060                           
  2061                           ;CardMoves.c: 48:     TurnRight(mL,mR);
  2062  0019A6  C0B0  F030         	movff	red_move@mL,TurnRight@mL
  2063  0019AA  C0B1  F031         	movff	red_move@mL+1,TurnRight@mL+1
  2064  0019AE  C0B2  F032         	movff	red_move@mR,TurnRight@mR
  2065  0019B2  C0B3  F033         	movff	red_move@mR+1,TurnRight@mR+1
  2066  0019B6  EC36  F007         	call	_TurnRight	;wreg free
  2067  0019BA  0012               	return		;funcret
  2068  0019BC                     __end_of_red_move:
  2069                           	callstack 0
  2070                           
  2071 ;; *************** function _green_move *****************
  2072 ;; Defined at:
  2073 ;;		line 53 in file "CardMoves.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  mL              2   16[BANK0 ] PTR struct DC_motor
  2076 ;;		 -> main@motorL(9), 
  2077 ;;  mR              2   18[BANK0 ] PTR struct DC_motor
  2078 ;;		 -> main@motorR(9), 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;		None
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2090 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2093 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2094 ;;Total ram usage:        4 bytes
  2095 ;; Hardware stack levels used: 1
  2096 ;; Hardware stack levels required when called: 10
  2097 ;; This function calls:
  2098 ;;		_PrepareForTurn
  2099 ;;		_TurnLeft
  2100 ;; This function is called by:
  2101 ;;		_pick_move
  2102 ;;		_white_move
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text9
  2107  0019BC                     __ptext9:
  2108                           	callstack 0
  2109  0019BC                     _green_move:
  2110                           	callstack 18
  2111  0019BC                     
  2112                           ;CardMoves.c: 54:     PrepareForTurn(mL,mR);
  2113  0019BC  C0B0  F039         	movff	green_move@mL,PrepareForTurn@mL
  2114  0019C0  C0B1  F03A         	movff	green_move@mL+1,PrepareForTurn@mL+1
  2115  0019C4  C0B2  F03B         	movff	green_move@mR,PrepareForTurn@mR
  2116  0019C8  C0B3  F03C         	movff	green_move@mR+1,PrepareForTurn@mR+1
  2117  0019CC  EC8B  F00A         	call	_PrepareForTurn	;wreg free
  2118                           
  2119                           ;CardMoves.c: 55:     TurnLeft(mL,mR);
  2120  0019D0  C0B0  F030         	movff	green_move@mL,TurnLeft@mL
  2121  0019D4  C0B1  F031         	movff	green_move@mL+1,TurnLeft@mL+1
  2122  0019D8  C0B2  F032         	movff	green_move@mR,TurnLeft@mR
  2123  0019DC  C0B3  F033         	movff	green_move@mR+1,TurnLeft@mR+1
  2124  0019E0  ECA9  F007         	call	_TurnLeft	;wreg free
  2125                           
  2126                           ;CardMoves.c: 56:     TurnLeft(mL,mR);
  2127  0019E4  C0B0  F030         	movff	green_move@mL,TurnLeft@mL
  2128  0019E8  C0B1  F031         	movff	green_move@mL+1,TurnLeft@mL+1
  2129  0019EC  C0B2  F032         	movff	green_move@mR,TurnLeft@mR
  2130  0019F0  C0B3  F033         	movff	green_move@mR+1,TurnLeft@mR+1
  2131  0019F4  ECA9  F007         	call	_TurnLeft	;wreg free
  2132  0019F8  0012               	return		;funcret
  2133  0019FA                     __end_of_green_move:
  2134                           	callstack 0
  2135                           
  2136 ;; *************** function _reverse_yellow_move *****************
  2137 ;; Defined at:
  2138 ;;		line 99 in file "CardMoves.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  mL              2   16[BANK0 ] PTR struct DC_motor
  2141 ;;		 -> main@motorL(9), 
  2142 ;;  mR              2   18[BANK0 ] PTR struct DC_motor
  2143 ;;		 -> main@motorR(9), 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;		None
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      void 
  2148 ;; Registers used:
  2149 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2155 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2158 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2159 ;;Total ram usage:        4 bytes
  2160 ;; Hardware stack levels used: 1
  2161 ;; Hardware stack levels required when called: 11
  2162 ;; This function calls:
  2163 ;;		_TurnRight
  2164 ;;		_blue_move
  2165 ;;		_forward_square
  2166 ;; This function is called by:
  2167 ;;		_pick_move
  2168 ;;		_white_move
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           	psect	text10
  2173  00167A                     __ptext10:
  2174                           	callstack 0
  2175  00167A                     _reverse_yellow_move:
  2176                           	callstack 17
  2177  00167A                     
  2178                           ;CardMoves.c: 100:     TurnRight(mL,mR);
  2179  00167A  C0B0  F030         	movff	reverse_yellow_move@mL,TurnRight@mL
  2180  00167E  C0B1  F031         	movff	reverse_yellow_move@mL+1,TurnRight@mL+1
  2181  001682  C0B2  F032         	movff	reverse_yellow_move@mR,TurnRight@mR
  2182  001686  C0B3  F033         	movff	reverse_yellow_move@mR+1,TurnRight@mR+1
  2183  00168A  EC36  F007         	call	_TurnRight	;wreg free
  2184                           
  2185                           ;CardMoves.c: 101:     TurnRight(mL,mR);
  2186  00168E  C0B0  F030         	movff	reverse_yellow_move@mL,TurnRight@mL
  2187  001692  C0B1  F031         	movff	reverse_yellow_move@mL+1,TurnRight@mL+1
  2188  001696  C0B2  F032         	movff	reverse_yellow_move@mR,TurnRight@mR
  2189  00169A  C0B3  F033         	movff	reverse_yellow_move@mR+1,TurnRight@mR+1
  2190  00169E  EC36  F007         	call	_TurnRight	;wreg free
  2191                           
  2192                           ;CardMoves.c: 102:     forward_square(mL,mR);
  2193  0016A2  C0B0  F039         	movff	reverse_yellow_move@mL,forward_square@mL
  2194  0016A6  C0B1  F03A         	movff	reverse_yellow_move@mL+1,forward_square@mL+1
  2195  0016AA  C0B2  F03B         	movff	reverse_yellow_move@mR,forward_square@mR
  2196  0016AE  C0B3  F03C         	movff	reverse_yellow_move@mR+1,forward_square@mR+1
  2197  0016B2  EC8E  F00B         	call	_forward_square	;wreg free
  2198                           
  2199                           ;CardMoves.c: 103:     blue_move(mL,mR);
  2200  0016B6  C0B0  F0B0         	movff	reverse_yellow_move@mL,blue_move@mL
  2201  0016BA  C0B1  F0B1         	movff	reverse_yellow_move@mL+1,blue_move@mL+1
  2202  0016BE  C0B2  F0B2         	movff	reverse_yellow_move@mR,blue_move@mR
  2203  0016C2  C0B3  F0B3         	movff	reverse_yellow_move@mR+1,blue_move@mR+1
  2204  0016C6  EC80  F00C         	call	_blue_move	;wreg free
  2205  0016CA  0012               	return		;funcret
  2206  0016CC                     __end_of_reverse_yellow_move:
  2207                           	callstack 0
  2208                           
  2209 ;; *************** function _forward_square *****************
  2210 ;; Defined at:
  2211 ;;		line 131 in file "dc_motor.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  mL              2   56[COMRAM] PTR struct DC_motor
  2214 ;;		 -> main@motorL(9), 
  2215 ;;  mR              2   58[COMRAM] PTR struct DC_motor
  2216 ;;		 -> main@motorR(9), 
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;		None
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2228 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2230 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2231 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2232 ;;Total ram usage:        6 bytes
  2233 ;; Hardware stack levels used: 1
  2234 ;; Hardware stack levels required when called: 9
  2235 ;; This function calls:
  2236 ;;		_move_forward
  2237 ;;		_stop
  2238 ;; This function is called by:
  2239 ;;		_reverse_yellow_move
  2240 ;;		_reverse_pink_move
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text11
  2245  00171C                     __ptext11:
  2246                           	callstack 0
  2247  00171C                     _forward_square:
  2248                           	callstack 18
  2249  00171C                     
  2250                           ;dc_motor.c: 132:     move_forward(mL,mR,reverse_time);
  2251  00171C  C039  F030         	movff	forward_square@mL,move_forward@mL
  2252  001720  C03A  F031         	movff	forward_square@mL+1,move_forward@mL+1
  2253  001724  C03B  F032         	movff	forward_square@mR,move_forward@mR
  2254  001728  C03C  F033         	movff	forward_square@mR+1,move_forward@mR+1
  2255  00172C  C049  F034         	movff	_reverse_time,move_forward@duration
  2256  001730  C04A  F035         	movff	_reverse_time+1,move_forward@duration+1
  2257  001734  EC8F  F008         	call	_move_forward	;wreg free
  2258                           
  2259                           ;dc_motor.c: 133:     stop(mL,mR);
  2260  001738  C039  F029         	movff	forward_square@mL,stop@mL
  2261  00173C  C03A  F02A         	movff	forward_square@mL+1,stop@mL+1
  2262  001740  C03B  F02B         	movff	forward_square@mR,stop@mR
  2263  001744  C03C  F02C         	movff	forward_square@mR+1,stop@mR+1
  2264  001748  EC1C  F008         	call	_stop	;wreg free
  2265  00174C                     
  2266                           ;dc_motor.c: 134:     _delay((unsigned long)((250)*(64000000/4000.0)));
  2267  00174C  0E15               	movlw	21
  2268  00174E  6E3E               	movwf	(??_forward_square+1)^0,c
  2269  001750  0E4B               	movlw	75
  2270  001752  6E3D               	movwf	??_forward_square^0,c
  2271  001754  0EBE               	movlw	190
  2272  001756                     u3127:
  2273  001756  2EE8               	decfsz	wreg,f,c
  2274  001758  D7FE               	bra	u3127
  2275  00175A  2E3D               	decfsz	??_forward_square^0,f,c
  2276  00175C  D7FC               	bra	u3127
  2277  00175E  2E3E               	decfsz	(??_forward_square+1)^0,f,c
  2278  001760  D7FA               	bra	u3127
  2279  001762  D000               	nop2	
  2280  001764  0012               	return		;funcret
  2281  001766                     __end_of_forward_square:
  2282                           	callstack 0
  2283                           
  2284 ;; *************** function _move_forward *****************
  2285 ;; Defined at:
  2286 ;;		line 83 in file "dc_motor.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  mL              2   47[COMRAM] PTR struct DC_motor
  2289 ;;		 -> main@motorL(9), 
  2290 ;;  mR              2   49[COMRAM] PTR struct DC_motor
  2291 ;;		 -> main@motorR(9), 
  2292 ;;  duration        2   51[COMRAM] unsigned int 
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;		None
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2304 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2306 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2307 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2308 ;;Total ram usage:        9 bytes
  2309 ;; Hardware stack levels used: 1
  2310 ;; Hardware stack levels required when called: 8
  2311 ;; This function calls:
  2312 ;;		_custom_delay_ms
  2313 ;;		_setMotorPWM
  2314 ;;		_stop
  2315 ;; This function is called by:
  2316 ;;		_forward_square
  2317 ;;		_main
  2318 ;;		_white_move
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           	psect	text12
  2323  00111E                     __ptext12:
  2324                           	callstack 0
  2325  00111E                     _move_forward:
  2326                           	callstack 18
  2327  00111E                     
  2328                           ;dc_motor.c: 84:     stop(mL,mR);
  2329  00111E  C030  F029         	movff	move_forward@mL,stop@mL
  2330  001122  C031  F02A         	movff	move_forward@mL+1,stop@mL+1
  2331  001126  C032  F02B         	movff	move_forward@mR,stop@mR
  2332  00112A  C033  F02C         	movff	move_forward@mR+1,stop@mR+1
  2333  00112E  EC1C  F008         	call	_stop	;wreg free
  2334  001132                     
  2335                           ;dc_motor.c: 85:     mL->direction = 1;
  2336  001132  EE20 F001          	lfsr	2,1
  2337  001136  5030               	movf	move_forward@mL^0,w,c
  2338  001138  26D9               	addwf	fsr2l,f,c
  2339  00113A  5031               	movf	(move_forward@mL+1)^0,w,c
  2340  00113C  22DA               	addwfc	fsr2h,f,c
  2341  00113E  0E01               	movlw	1
  2342  001140  6EDF               	movwf	indf2,c
  2343  001142                     
  2344                           ;dc_motor.c: 86:     mR->direction = 1;
  2345  001142  EE20 F001          	lfsr	2,1
  2346  001146  5032               	movf	move_forward@mR^0,w,c
  2347  001148  26D9               	addwf	fsr2l,f,c
  2348  00114A  5033               	movf	(move_forward@mR+1)^0,w,c
  2349  00114C  22DA               	addwfc	fsr2h,f,c
  2350  00114E  0E01               	movlw	1
  2351  001150  6EDF               	movwf	indf2,c
  2352                           
  2353                           ;dc_motor.c: 87:     setMotorPWM(mR);
  2354  001152  C032  F01E         	movff	move_forward@mR,setMotorPWM@m
  2355  001156  C033  F01F         	movff	move_forward@mR+1,setMotorPWM@m+1
  2356  00115A  ECB2  F003         	call	_setMotorPWM	;wreg free
  2357                           
  2358                           ;dc_motor.c: 88:     setMotorPWM(mL);
  2359  00115E  C030  F01E         	movff	move_forward@mL,setMotorPWM@m
  2360  001162  C031  F01F         	movff	move_forward@mL+1,setMotorPWM@m+1
  2361  001166  ECB2  F003         	call	_setMotorPWM	;wreg free
  2362                           
  2363                           ;dc_motor.c: 89:     while ((mL->power + mR->power) < (2*peak_power)){
  2364  00116A  EFD9  F008         	goto	l252
  2365  00116E                     l3300:
  2366                           
  2367                           ;dc_motor.c: 90:         mR->power = mR->power + 5;
  2368  00116E  C032  FFD9         	movff	move_forward@mR,fsr2l
  2369  001172  C033  FFDA         	movff	move_forward@mR+1,fsr2h
  2370  001176  50DF               	movf	indf2,w,c
  2371  001178  0F05               	addlw	5
  2372  00117A  C032  FFD9         	movff	move_forward@mR,fsr2l
  2373  00117E  C033  FFDA         	movff	move_forward@mR+1,fsr2h
  2374  001182  6EDF               	movwf	indf2,c
  2375                           
  2376                           ;dc_motor.c: 91:         mL->power = mL->power + 5 ;
  2377  001184  C030  FFD9         	movff	move_forward@mL,fsr2l
  2378  001188  C031  FFDA         	movff	move_forward@mL+1,fsr2h
  2379  00118C  50DF               	movf	indf2,w,c
  2380  00118E  0F05               	addlw	5
  2381  001190  C030  FFD9         	movff	move_forward@mL,fsr2l
  2382  001194  C031  FFDA         	movff	move_forward@mL+1,fsr2h
  2383  001198  6EDF               	movwf	indf2,c
  2384  00119A                     
  2385                           ;dc_motor.c: 92:         setMotorPWM(mL);
  2386  00119A  C030  F01E         	movff	move_forward@mL,setMotorPWM@m
  2387  00119E  C031  F01F         	movff	move_forward@mL+1,setMotorPWM@m+1
  2388  0011A2  ECB2  F003         	call	_setMotorPWM	;wreg free
  2389  0011A6                     
  2390                           ;dc_motor.c: 93:         setMotorPWM(mR);
  2391  0011A6  C032  F01E         	movff	move_forward@mR,setMotorPWM@m
  2392  0011AA  C033  F01F         	movff	move_forward@mR+1,setMotorPWM@m+1
  2393  0011AE  ECB2  F003         	call	_setMotorPWM	;wreg free
  2394  0011B2                     l252:
  2395                           
  2396                           ;dc_motor.c: 89:     while ((mL->power + mR->power) < (2*peak_power)){
  2397  0011B2  C030  FFD9         	movff	move_forward@mL,fsr2l
  2398  0011B6  C031  FFDA         	movff	move_forward@mL+1,fsr2h
  2399  0011BA  50DF               	movf	indf2,w,c
  2400  0011BC  6E36               	movwf	??_move_forward^0,c
  2401  0011BE  6A37               	clrf	(??_move_forward+1)^0,c
  2402  0011C0  C032  FFD9         	movff	move_forward@mR,fsr2l
  2403  0011C4  C033  FFDA         	movff	move_forward@mR+1,fsr2h
  2404  0011C8  50DF               	movf	indf2,w,c
  2405  0011CA  6E38               	movwf	(??_move_forward+2)^0,c
  2406  0011CC  5038               	movf	(??_move_forward+2)^0,w,c
  2407  0011CE  2636               	addwf	??_move_forward^0,f,c
  2408  0011D0  0E00               	movlw	0
  2409  0011D2  2237               	addwfc	(??_move_forward+1)^0,f,c
  2410  0011D4  BE37               	btfsc	(??_move_forward+1)^0,7,c
  2411  0011D6  EFF6  F008         	goto	u2281
  2412  0011DA  5037               	movf	(??_move_forward+1)^0,w,c
  2413  0011DC  E109               	bnz	u2280
  2414  0011DE  0E32               	movlw	50
  2415  0011E0  5C36               	subwf	??_move_forward^0,w,c
  2416  0011E2  A0D8               	btfss	status,0,c
  2417  0011E4  EFF6  F008         	goto	u2281
  2418  0011E8  EFF8  F008         	goto	u2280
  2419  0011EC                     u2281:
  2420  0011EC  EFB7  F008         	goto	l3300
  2421  0011F0                     u2280:
  2422  0011F0                     
  2423                           ;dc_motor.c: 95:     custom_delay_ms(duration);
  2424  0011F0  C034  F010         	movff	move_forward@duration,custom_delay_ms@delay_time
  2425  0011F4  C035  F011         	movff	move_forward@duration+1,custom_delay_ms@delay_time+1
  2426  0011F8  EC58  F00D         	call	_custom_delay_ms	;wreg free
  2427  0011FC  0012               	return		;funcret
  2428  0011FE                     __end_of_move_forward:
  2429                           	callstack 0
  2430                           
  2431 ;; *************** function _TurnRight *****************
  2432 ;; Defined at:
  2433 ;;		line 158 in file "dc_motor.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;  mL              2   47[COMRAM] PTR struct DC_motor
  2436 ;;		 -> main@motorL(9), 
  2437 ;;  mR              2   49[COMRAM] PTR struct DC_motor
  2438 ;;		 -> main@motorR(9), 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;		None
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      void 
  2443 ;; Registers used:
  2444 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2450 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2452 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2453 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2454 ;;Total ram usage:        6 bytes
  2455 ;; Hardware stack levels used: 1
  2456 ;; Hardware stack levels required when called: 8
  2457 ;; This function calls:
  2458 ;;		_custom_delay_ms
  2459 ;;		_setMotorPWM
  2460 ;;		_stop
  2461 ;; This function is called by:
  2462 ;;		_red_move
  2463 ;;		_orange_move
  2464 ;;		_yellow_move
  2465 ;;		_reverse_yellow_move
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text13
  2470  000E6C                     __ptext13:
  2471                           	callstack 0
  2472  000E6C                     _TurnRight:
  2473                           	callstack 20
  2474  000E6C                     
  2475                           ;dc_motor.c: 159:     stop(mL,mR);
  2476  000E6C  C030  F029         	movff	TurnRight@mL,stop@mL
  2477  000E70  C031  F02A         	movff	TurnRight@mL+1,stop@mL+1
  2478  000E74  C032  F02B         	movff	TurnRight@mR,stop@mR
  2479  000E78  C033  F02C         	movff	TurnRight@mR+1,stop@mR+1
  2480  000E7C  EC1C  F008         	call	_stop	;wreg free
  2481  000E80                     
  2482                           ;dc_motor.c: 160:     mL->direction = 1;
  2483  000E80  EE20 F001          	lfsr	2,1
  2484  000E84  5030               	movf	TurnRight@mL^0,w,c
  2485  000E86  26D9               	addwf	fsr2l,f,c
  2486  000E88  5031               	movf	(TurnRight@mL+1)^0,w,c
  2487  000E8A  22DA               	addwfc	fsr2h,f,c
  2488  000E8C  0E01               	movlw	1
  2489  000E8E  6EDF               	movwf	indf2,c
  2490  000E90                     
  2491                           ;dc_motor.c: 161:     mR->direction = 0;
  2492  000E90  EE20 F001          	lfsr	2,1
  2493  000E94  5032               	movf	TurnRight@mR^0,w,c
  2494  000E96  26D9               	addwf	fsr2l,f,c
  2495  000E98  5033               	movf	(TurnRight@mR+1)^0,w,c
  2496  000E9A  22DA               	addwfc	fsr2h,f,c
  2497  000E9C  0E00               	movlw	0
  2498  000E9E  6EDF               	movwf	indf2,c
  2499                           
  2500                           ;dc_motor.c: 162:     setMotorPWM(mL);
  2501  000EA0  C030  F01E         	movff	TurnRight@mL,setMotorPWM@m
  2502  000EA4  C031  F01F         	movff	TurnRight@mL+1,setMotorPWM@m+1
  2503  000EA8  ECB2  F003         	call	_setMotorPWM	;wreg free
  2504                           
  2505                           ;dc_motor.c: 163:     setMotorPWM(mR);
  2506  000EAC  C032  F01E         	movff	TurnRight@mR,setMotorPWM@m
  2507  000EB0  C033  F01F         	movff	TurnRight@mR+1,setMotorPWM@m+1
  2508  000EB4  ECB2  F003         	call	_setMotorPWM	;wreg free
  2509                           
  2510                           ;dc_motor.c: 165:     while (mL->power != 80){
  2511  000EB8  EF80  F007         	goto	l276
  2512  000EBC                     l3374:
  2513                           
  2514                           ;dc_motor.c: 166:         mR->power = mR->power + 10;
  2515  000EBC  C032  FFD9         	movff	TurnRight@mR,fsr2l
  2516  000EC0  C033  FFDA         	movff	TurnRight@mR+1,fsr2h
  2517  000EC4  50DF               	movf	indf2,w,c
  2518  000EC6  0F0A               	addlw	10
  2519  000EC8  C032  FFD9         	movff	TurnRight@mR,fsr2l
  2520  000ECC  C033  FFDA         	movff	TurnRight@mR+1,fsr2h
  2521  000ED0  6EDF               	movwf	indf2,c
  2522                           
  2523                           ;dc_motor.c: 167:         mL->power = mL->power + 10;
  2524  000ED2  C030  FFD9         	movff	TurnRight@mL,fsr2l
  2525  000ED6  C031  FFDA         	movff	TurnRight@mL+1,fsr2h
  2526  000EDA  50DF               	movf	indf2,w,c
  2527  000EDC  0F0A               	addlw	10
  2528  000EDE  C030  FFD9         	movff	TurnRight@mL,fsr2l
  2529  000EE2  C031  FFDA         	movff	TurnRight@mL+1,fsr2h
  2530  000EE6  6EDF               	movwf	indf2,c
  2531  000EE8                     
  2532                           ;dc_motor.c: 168:         setMotorPWM(mL);
  2533  000EE8  C030  F01E         	movff	TurnRight@mL,setMotorPWM@m
  2534  000EEC  C031  F01F         	movff	TurnRight@mL+1,setMotorPWM@m+1
  2535  000EF0  ECB2  F003         	call	_setMotorPWM	;wreg free
  2536  000EF4                     
  2537                           ;dc_motor.c: 169:         setMotorPWM(mR);
  2538  000EF4  C032  F01E         	movff	TurnRight@mR,setMotorPWM@m
  2539  000EF8  C033  F01F         	movff	TurnRight@mR+1,setMotorPWM@m+1
  2540  000EFC  ECB2  F003         	call	_setMotorPWM	;wreg free
  2541  000F00                     l276:
  2542                           
  2543                           ;dc_motor.c: 165:     while (mL->power != 80){
  2544  000F00  C030  FFD9         	movff	TurnRight@mL,fsr2l
  2545  000F04  C031  FFDA         	movff	TurnRight@mL+1,fsr2h
  2546  000F08  0E50               	movlw	80
  2547  000F0A  18DE               	xorwf	postinc2,w,c
  2548  000F0C  A4D8               	btfss	status,2,c
  2549  000F0E  EF8B  F007         	goto	u2321
  2550  000F12  EF8D  F007         	goto	u2320
  2551  000F16                     u2321:
  2552  000F16  EF5E  F007         	goto	l3374
  2553  000F1A                     u2320:
  2554  000F1A                     
  2555                           ;dc_motor.c: 171:     custom_delay_ms(turning_time);
  2556  000F1A  C04B  F010         	movff	_turning_time,custom_delay_ms@delay_time
  2557  000F1E  C04C  F011         	movff	_turning_time+1,custom_delay_ms@delay_time+1
  2558  000F22  EC58  F00D         	call	_custom_delay_ms	;wreg free
  2559  000F26                     
  2560                           ;dc_motor.c: 172:     stop(mL,mR);
  2561  000F26  C030  F029         	movff	TurnRight@mL,stop@mL
  2562  000F2A  C031  F02A         	movff	TurnRight@mL+1,stop@mL+1
  2563  000F2E  C032  F02B         	movff	TurnRight@mR,stop@mR
  2564  000F32  C033  F02C         	movff	TurnRight@mR+1,stop@mR+1
  2565  000F36  EC1C  F008         	call	_stop	;wreg free
  2566  000F3A                     
  2567                           ;dc_motor.c: 173:     _delay((unsigned long)((150)*(64000000/4000.0)));
  2568  000F3A  0E0D               	movlw	13
  2569  000F3C  6E35               	movwf	(??_TurnRight+1)^0,c
  2570  000F3E  0E2D               	movlw	45
  2571  000F40  6E34               	movwf	??_TurnRight^0,c
  2572  000F42  0ED8               	movlw	216
  2573  000F44                     u3137:
  2574  000F44  2EE8               	decfsz	wreg,f,c
  2575  000F46  D7FE               	bra	u3137
  2576  000F48  2E34               	decfsz	??_TurnRight^0,f,c
  2577  000F4A  D7FC               	bra	u3137
  2578  000F4C  2E35               	decfsz	(??_TurnRight+1)^0,f,c
  2579  000F4E  D7FA               	bra	u3137
  2580  000F50  0012               	return		;funcret
  2581  000F52                     __end_of_TurnRight:
  2582                           	callstack 0
  2583                           
  2584 ;; *************** function _get_timing *****************
  2585 ;; Defined at:
  2586 ;;		line 27 in file "Memory.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;		None
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;		None
  2591 ;; Return value:  Size  Location     Type
  2592 ;;                  2   15[COMRAM] unsigned int 
  2593 ;; Registers used:
  2594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2600 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2603 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2604 ;;Total ram usage:        2 bytes
  2605 ;; Hardware stack levels used: 1
  2606 ;; Hardware stack levels required when called: 5
  2607 ;; This function calls:
  2608 ;;		Nothing
  2609 ;; This function is called by:
  2610 ;;		_white_move
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           	psect	text14
  2615  001CD0                     __ptext14:
  2616                           	callstack 0
  2617  001CD0                     _get_timing:
  2618                           	callstack 23
  2619  001CD0                     
  2620                           ;Memory.c: 28:     return timeList[--time_index];
  2621  001CD0  0100               	movlb	0	; () banked
  2622  001CD2  079E               	decf	_time_index& (0+255),f,b
  2623  001CD4  519E               	movf	_time_index& (0+255),w,b
  2624  001CD6  0D02               	mullw	2
  2625  001CD8  0E60               	movlw	low _timeList
  2626  001CDA  24F3               	addwf	243,w,c
  2627  001CDC  6ED9               	movwf	fsr2l,c
  2628  001CDE  0E00               	movlw	high _timeList
  2629  001CE0  20F4               	addwfc	prodh,w,c
  2630  001CE2  6EDA               	movwf	fsr2h,c
  2631  001CE4  CFDE F010          	movff	postinc2,?_get_timing
  2632  001CE8  CFDD F011          	movff	postdec2,?_get_timing+1
  2633  001CEC                     
  2634                           ; BSR set to: 0
  2635  001CEC  0012               	return		;funcret
  2636  001CEE                     __end_of_get_timing:
  2637                           	callstack 0
  2638                           
  2639 ;; *************** function _get_function_ptr *****************
  2640 ;; Defined at:
  2641 ;;		line 32 in file "Memory.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;		None
  2644 ;; Auto vars:     Size  Location     Type
  2645 ;;		None
  2646 ;; Return value:  Size  Location     Type
  2647 ;;                  3   15[COMRAM] PTR FTN(PTR struct DC_mo
  2648 ;; Registers used:
  2649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2650 ;; Tracked objects:
  2651 ;;		On entry : 0/0
  2652 ;;		On exit  : 0/0
  2653 ;;		Unchanged: 0/0
  2654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2655 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2658 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2659 ;;Total ram usage:        3 bytes
  2660 ;; Hardware stack levels used: 1
  2661 ;; Hardware stack levels required when called: 5
  2662 ;; This function calls:
  2663 ;;		Nothing
  2664 ;; This function is called by:
  2665 ;;		_white_move
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           	psect	text15
  2670  001C4E                     __ptext15:
  2671                           	callstack 0
  2672  001C4E                     _get_function_ptr:
  2673                           	callstack 23
  2674  001C4E                     
  2675                           ;Memory.c: 33:     return funcPtrList[--func_index];
  2676  001C4E  0100               	movlb	0	; () banked
  2677  001C50  079F               	decf	_func_index& (0+255),f,b
  2678  001C52  519F               	movf	_func_index& (0+255),w,b
  2679  001C54  0D03               	mullw	3
  2680  001C56  0E00               	movlw	low _funcPtrList
  2681  001C58  24F3               	addwf	243,w,c
  2682  001C5A  6ED9               	movwf	fsr2l,c
  2683  001C5C  0E01               	movlw	high _funcPtrList
  2684  001C5E  20F4               	addwfc	prodh,w,c
  2685  001C60  6EDA               	movwf	fsr2h,c
  2686  001C62  CFDE F010          	movff	postinc2,?_get_function_ptr
  2687  001C66  CFDE F011          	movff	postinc2,?_get_function_ptr+1
  2688  001C6A  CFDD F012          	movff	postdec2,?_get_function_ptr+2
  2689  001C6E                     
  2690                           ; BSR set to: 0
  2691  001C6E  0012               	return		;funcret
  2692  001C70                     __end_of_get_function_ptr:
  2693                           	callstack 0
  2694                           
  2695 ;; *************** function _pink_move *****************
  2696 ;; Defined at:
  2697 ;;		line 91 in file "CardMoves.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;  mL              2   62[COMRAM] PTR struct DC_motor
  2700 ;;		 -> main@motorL(9), 
  2701 ;;  mR              2   64[COMRAM] PTR struct DC_motor
  2702 ;;		 -> main@motorR(9), 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;		None
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2714 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2717 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2718 ;;Total ram usage:        4 bytes
  2719 ;; Hardware stack levels used: 1
  2720 ;; Hardware stack levels required when called: 10
  2721 ;; This function calls:
  2722 ;;		_TurnLeft
  2723 ;;		_reverse_square
  2724 ;; This function is called by:
  2725 ;;		_pick_move
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text16
  2730  0019FA                     __ptext16:
  2731                           	callstack 0
  2732  0019FA                     _pink_move:
  2733                           	callstack 19
  2734  0019FA                     
  2735                           ;CardMoves.c: 92:     reverse_square(mL,mR);
  2736  0019FA  C03F  F039         	movff	pink_move@mL,reverse_square@mL
  2737  0019FE  C040  F03A         	movff	pink_move@mL+1,reverse_square@mL+1
  2738  001A02  C041  F03B         	movff	pink_move@mR,reverse_square@mR
  2739  001A06  C042  F03C         	movff	pink_move@mR+1,reverse_square@mR+1
  2740  001A0A  ECB3  F00B         	call	_reverse_square	;wreg free
  2741                           
  2742                           ;CardMoves.c: 93:     TurnLeft(mL,mR);
  2743  001A0E  C03F  F030         	movff	pink_move@mL,TurnLeft@mL
  2744  001A12  C040  F031         	movff	pink_move@mL+1,TurnLeft@mL+1
  2745  001A16  C041  F032         	movff	pink_move@mR,TurnLeft@mR
  2746  001A1A  C042  F033         	movff	pink_move@mR+1,TurnLeft@mR+1
  2747  001A1E  ECA9  F007         	call	_TurnLeft	;wreg free
  2748                           
  2749                           ;CardMoves.c: 94:     TurnLeft(mL,mR);
  2750  001A22  C03F  F030         	movff	pink_move@mL,TurnLeft@mL
  2751  001A26  C040  F031         	movff	pink_move@mL+1,TurnLeft@mL+1
  2752  001A2A  C041  F032         	movff	pink_move@mR,TurnLeft@mR
  2753  001A2E  C042  F033         	movff	pink_move@mR+1,TurnLeft@mR+1
  2754  001A32  ECA9  F007         	call	_TurnLeft	;wreg free
  2755  001A36  0012               	return		;funcret
  2756  001A38                     __end_of_pink_move:
  2757                           	callstack 0
  2758                           
  2759 ;; *************** function _add_function_ptr *****************
  2760 ;; Defined at:
  2761 ;;		line 16 in file "Memory.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;  func            3   15[COMRAM] PTR FTN(PTR struct DC_mo
  2764 ;;		 -> orange_move(1), lightblue_move(1), reverse_pink_move(1), reverse_yellow_move(1), 
  2765 ;;		 -> blue_move(1), red_move(1), green_move(1), 
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2777 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2781 ;;Total ram usage:        3 bytes
  2782 ;; Hardware stack levels used: 1
  2783 ;; Hardware stack levels required when called: 5
  2784 ;; This function calls:
  2785 ;;		Nothing
  2786 ;; This function is called by:
  2787 ;;		_pick_move
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text17
  2792  001AE8                     __ptext17:
  2793                           	callstack 0
  2794  001AE8                     _add_function_ptr:
  2795                           	callstack 24
  2796  001AE8                     
  2797                           ;Memory.c: 17:     funcPtrList[func_index++] = func;
  2798  001AE8  0100               	movlb	0	; () banked
  2799  001AEA  519F               	movf	_func_index& (0+255),w,b
  2800  001AEC  0D03               	mullw	3
  2801  001AEE  0E00               	movlw	low _funcPtrList
  2802  001AF0  24F3               	addwf	243,w,c
  2803  001AF2  6ED9               	movwf	fsr2l,c
  2804  001AF4  0E01               	movlw	high _funcPtrList
  2805  001AF6  20F4               	addwfc	prodh,w,c
  2806  001AF8  6EDA               	movwf	fsr2h,c
  2807  001AFA  C010  FFDE         	movff	add_function_ptr@func,postinc2
  2808  001AFE  C011  FFDE         	movff	add_function_ptr@func+1,postinc2
  2809  001B02  C012  FFDE         	movff	add_function_ptr@func+2,postinc2
  2810  001B06                     
  2811                           ; BSR set to: 0
  2812  001B06  2B9F               	incf	_func_index& (0+255),f,b
  2813  001B08                     
  2814                           ; BSR set to: 0
  2815                           ;Memory.c: 18:     if (func_index >= 30) lost_flag = 1;
  2816  001B08  0E1D               	movlw	29
  2817  001B0A  659F               	cpfsgt	_func_index& (0+255),b
  2818  001B0C  EF8A  F00D         	goto	u2471
  2819  001B10  EF8C  F00D         	goto	u2470
  2820  001B14                     u2471:
  2821  001B14  EF8E  F00D         	goto	l707
  2822  001B18                     u2470:
  2823  001B18                     
  2824                           ; BSR set to: 0
  2825  001B18  0E01               	movlw	1
  2826  001B1A  6F9D               	movwf	_lost_flag& (0+255),b
  2827  001B1C                     l707:
  2828                           
  2829                           ; BSR set to: 0
  2830  001B1C  0012               	return		;funcret
  2831  001B1E                     __end_of_add_function_ptr:
  2832                           	callstack 0
  2833                           
  2834 ;; *************** function _interrupt_threshold_calibrate *****************
  2835 ;; Defined at:
  2836 ;;		line 49 in file "color.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  black           2   29[COMRAM] unsigned int 
  2841 ;;  amb_and_LED     2   27[COMRAM] unsigned int 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      void 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0, cstack
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2852 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2854 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2855 ;;Total ram usage:        4 bytes
  2856 ;; Hardware stack levels used: 1
  2857 ;; Hardware stack levels required when called: 8
  2858 ;; This function calls:
  2859 ;;		_LightOn
  2860 ;;		_LightsToggle
  2861 ;;		___lwdiv
  2862 ;;		_color_read
  2863 ;; This function is called by:
  2864 ;;		_main
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text18
  2869  0012C2                     __ptext18:
  2870                           	callstack 0
  2871  0012C2                     _interrupt_threshold_calibrate:
  2872                           	callstack 22
  2873  0012C2                     
  2874                           ;color.c: 51:     LightsToggle();
  2875  0012C2  ECC0  F009         	call	_LightsToggle	;wreg free
  2876  0012C6                     
  2877                           ;color.c: 52:     LightOn();
  2878  0012C6  ECF8  F00E         	call	_LightOn	;wreg free
  2879  0012CA                     l71:
  2880  0012CA  B68E               	btfsc	142,3,c	;volatile
  2881  0012CC  EF6A  F009         	goto	u2561
  2882  0012D0  EF6C  F009         	goto	u2560
  2883  0012D4                     u2561:
  2884  0012D4  EF65  F009         	goto	l71
  2885  0012D8                     u2560:
  2886  0012D8                     
  2887                           ;color.c: 57:     LightsToggle();
  2888  0012D8  ECC0  F009         	call	_LightsToggle	;wreg free
  2889                           
  2890                           ;color.c: 58:     int_high = color_read(0x14);
  2891  0012DC  0E14               	movlw	20
  2892  0012DE  ECEA  F00A         	call	_color_read
  2893  0012E2  C014  F047         	movff	?_color_read,_int_high
  2894  0012E6  C015  F048         	movff	?_color_read+1,_int_high+1
  2895  0012EA                     l74:
  2896  0012EA  B68E               	btfsc	142,3,c	;volatile
  2897  0012EC  EF7A  F009         	goto	u2571
  2898  0012F0  EF7C  F009         	goto	u2570
  2899  0012F4                     u2571:
  2900  0012F4  EF75  F009         	goto	l74
  2901  0012F8                     u2570:
  2902  0012F8                     
  2903                           ;color.c: 61:     LightsToggle();
  2904  0012F8  ECC0  F009         	call	_LightsToggle	;wreg free
  2905                           
  2906                           ;color.c: 62:     amb_and_LED = color_read(0x14);
  2907  0012FC  0E14               	movlw	20
  2908  0012FE  ECEA  F00A         	call	_color_read
  2909  001302  C014  F01C         	movff	?_color_read,interrupt_threshold_calibrate@amb_and_LED
  2910  001306  C015  F01D         	movff	?_color_read+1,interrupt_threshold_calibrate@amb_and_LED+1
  2911  00130A                     l77:
  2912  00130A  B68E               	btfsc	142,3,c	;volatile
  2913  00130C  EF8A  F009         	goto	u2581
  2914  001310  EF8C  F009         	goto	u2580
  2915  001314                     u2581:
  2916  001314  EF85  F009         	goto	l77
  2917  001318                     u2580:
  2918  001318                     
  2919                           ;color.c: 65:     LightsToggle();
  2920  001318  ECC0  F009         	call	_LightsToggle	;wreg free
  2921                           
  2922                           ;color.c: 66:     black = color_read(0x14);
  2923  00131C  0E14               	movlw	20
  2924  00131E  ECEA  F00A         	call	_color_read
  2925  001322  C014  F01E         	movff	?_color_read,interrupt_threshold_calibrate@black
  2926  001326  C015  F01F         	movff	?_color_read+1,interrupt_threshold_calibrate@black+1
  2927  00132A                     
  2928                           ;color.c: 70:     if(black < amb_and_LED){
  2929  00132A  501C               	movf	interrupt_threshold_calibrate@amb_and_LED^0,w,c
  2930  00132C  5C1E               	subwf	interrupt_threshold_calibrate@black^0,w,c
  2931  00132E  501D               	movf	(interrupt_threshold_calibrate@amb_and_LED+1)^0,w,c
  2932  001330  581F               	subwfb	(interrupt_threshold_calibrate@black+1)^0,w,c
  2933  001332  B0D8               	btfsc	status,0,c
  2934  001334  EF9E  F009         	goto	u2591
  2935  001338  EFA0  F009         	goto	u2590
  2936  00133C                     u2591:
  2937  00133C  EFB2  F009         	goto	l3610
  2938  001340                     u2590:
  2939  001340                     
  2940                           ;color.c: 71:         int_low= black - black/20;
  2941  001340  C01E  F010         	movff	interrupt_threshold_calibrate@black,___lwdiv@dividend
  2942  001344  C01F  F011         	movff	interrupt_threshold_calibrate@black+1,___lwdiv@dividend+1
  2943  001348  0E00               	movlw	0
  2944  00134A  6E13               	movwf	(___lwdiv@divisor+1)^0,c
  2945  00134C  0E14               	movlw	20
  2946  00134E  6E12               	movwf	___lwdiv@divisor^0,c
  2947  001350  EC17  F00A         	call	___lwdiv	;wreg free
  2948  001354  5010               	movf	?___lwdiv^0,w,c
  2949  001356  5C1E               	subwf	interrupt_threshold_calibrate@black^0,w,c
  2950  001358  6E4E               	movwf	_int_low^0,c
  2951  00135A  5011               	movf	(?___lwdiv+1)^0,w,c
  2952  00135C  581F               	subwfb	(interrupt_threshold_calibrate@black+1)^0,w,c
  2953  00135E  6E4F               	movwf	(_int_low+1)^0,c
  2954                           
  2955                           ;color.c: 72:     } else{int_low=0;}
  2956  001360  EFB6  F009         	goto	l82
  2957  001364                     l3610:
  2958  001364  0E00               	movlw	0
  2959  001366  6E4F               	movwf	(_int_low+1)^0,c
  2960  001368  0E00               	movlw	0
  2961  00136A  6E4E               	movwf	_int_low^0,c
  2962  00136C                     l82:
  2963  00136C  B68E               	btfsc	142,3,c	;volatile
  2964  00136E  EFBB  F009         	goto	u2601
  2965  001372  EFBD  F009         	goto	u2600
  2966  001376                     u2601:
  2967  001376  EFB6  F009         	goto	l82
  2968  00137A                     u2600:
  2969  00137A                     
  2970                           ;color.c: 75:     LightsToggle();
  2971  00137A  ECC0  F009         	call	_LightsToggle	;wreg free
  2972  00137E  0012               	return		;funcret
  2973  001380                     __end_of_interrupt_threshold_calibrate:
  2974                           	callstack 0
  2975                           
  2976 ;; *************** function _initDCmotorsPWM *****************
  2977 ;; Defined at:
  2978 ;;		line 10 in file "dc_motor.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  PWMperiod       2   15[COMRAM] int 
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, status,2
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2992 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2995 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2996 ;;Total ram usage:        2 bytes
  2997 ;; Hardware stack levels used: 1
  2998 ;; Hardware stack levels required when called: 5
  2999 ;; This function calls:
  3000 ;;		Nothing
  3001 ;; This function is called by:
  3002 ;;		_main
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text19
  3007  001A76                     __ptext19:
  3008                           	callstack 0
  3009  001A76                     _initDCmotorsPWM:
  3010                           	callstack 25
  3011  001A76                     
  3012                           ;dc_motor.c: 12:     T2CONbits.CKPS=011;
  3013  001A76  50BD               	movf	189,w,c	;volatile
  3014  001A78  0B8F               	andlw	-113
  3015  001A7A  0910               	iorlw	16
  3016  001A7C  6EBD               	movwf	189,c	;volatile
  3017                           
  3018                           ;dc_motor.c: 13:     T2HLTbits.MODE=0b00000;
  3019  001A7E  0EE0               	movlw	-32
  3020  001A80  16BE               	andwf	190,f,c	;volatile
  3021                           
  3022                           ;dc_motor.c: 14:     T2CLKCONbits.CS=0b0001;
  3023  001A82  50BF               	movf	191,w,c	;volatile
  3024  001A84  0BF0               	andlw	-16
  3025  001A86  0901               	iorlw	1
  3026  001A88  6EBF               	movwf	191,c	;volatile
  3027  001A8A                     
  3028                           ;dc_motor.c: 17:     T2PR=PWMperiod;
  3029  001A8A  C010  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  3030  001A8E                     
  3031                           ;dc_motor.c: 18:     T2CONbits.ON=1;
  3032  001A8E  8EBD               	bsf	189,7,c	;volatile
  3033  001A90                     
  3034                           ;dc_motor.c: 21:     TRISEbits.TRISE4=0;
  3035  001A90  9885               	bcf	133,4,c	;volatile
  3036  001A92                     
  3037                           ;dc_motor.c: 22:     TRISGbits.TRISG6=0;
  3038  001A92  9C87               	bcf	135,6,c	;volatile
  3039  001A94                     
  3040                           ;dc_motor.c: 25:     TRISEbits.TRISE2=0;
  3041  001A94  9485               	bcf	133,2,c	;volatile
  3042  001A96                     
  3043                           ;dc_motor.c: 26:     TRISCbits.TRISC7=0;
  3044  001A96  9E83               	bcf	131,7,c	;volatile
  3045                           
  3046                           ;dc_motor.c: 29:     RE2PPS=0x0A;
  3047  001A98  0E0A               	movlw	10
  3048  001A9A  010E               	movlb	14	; () banked
  3049  001A9C  6F74               	movwf	116,b	;volatile
  3050                           
  3051                           ;dc_motor.c: 30:     RC7PPS=0x0B;
  3052  001A9E  0E0B               	movlw	11
  3053  001AA0  6F69               	movwf	105,b	;volatile
  3054                           
  3055                           ;dc_motor.c: 33:     PWM6DCH=0;
  3056  001AA2  0E00               	movlw	0
  3057  001AA4  6EA3               	movwf	163,c	;volatile
  3058                           
  3059                           ;dc_motor.c: 34:     PWM7DCH=0;
  3060  001AA6  0E00               	movlw	0
  3061  001AA8  6EA0               	movwf	160,c	;volatile
  3062  001AAA                     
  3063                           ; BSR set to: 14
  3064                           ;dc_motor.c: 37:     PWM6CONbits.EN = 1;
  3065  001AAA  8EA4               	bsf	164,7,c	;volatile
  3066  001AAC                     
  3067                           ; BSR set to: 14
  3068                           ;dc_motor.c: 38:     PWM7CONbits.EN = 1;
  3069  001AAC  8EA1               	bsf	161,7,c	;volatile
  3070  001AAE                     
  3071                           ; BSR set to: 14
  3072  001AAE  0012               	return		;funcret
  3073  001AB0                     __end_of_initDCmotorsPWM:
  3074                           	callstack 0
  3075                           
  3076 ;; *************** function _getTMR0_in_ms *****************
  3077 ;; Defined at:
  3078 ;;		line 16 in file "timers.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;		None
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;  temp            2   24[COMRAM] unsigned int 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  1    wreg      void 
  3085 ;; Registers used:
  3086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3087 ;; Tracked objects:
  3088 ;;		On entry : 0/0
  3089 ;;		On exit  : 0/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3093 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3095 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3096 ;;Total ram usage:        2 bytes
  3097 ;; Hardware stack levels used: 1
  3098 ;; Hardware stack levels required when called: 6
  3099 ;; This function calls:
  3100 ;;		___lwdiv
  3101 ;;		_add_timing
  3102 ;; This function is called by:
  3103 ;;		_main
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text20
  3108  001B52                     __ptext20:
  3109                           	callstack 0
  3110  001B52                     _getTMR0_in_ms:
  3111                           	callstack 24
  3112  001B52  50D3               	movf	211,w,c	;volatile
  3113  001B54                     
  3114                           ;timers.c: 18:     temp = TMR0H<<8;
  3115  001B54  50D4               	movf	212,w,c	;volatile
  3116  001B56  6E1A               	movwf	(getTMR0_in_ms@temp+1)^0,c
  3117  001B58  6A19               	clrf	getTMR0_in_ms@temp^0,c
  3118  001B5A                     
  3119                           ;timers.c: 19:     add_timing(temp + temp / 42 );
  3120  001B5A  C019  F010         	movff	getTMR0_in_ms@temp,___lwdiv@dividend
  3121  001B5E  C01A  F011         	movff	getTMR0_in_ms@temp+1,___lwdiv@dividend+1
  3122  001B62  0E00               	movlw	0
  3123  001B64  6E13               	movwf	(___lwdiv@divisor+1)^0,c
  3124  001B66  0E2A               	movlw	42
  3125  001B68  6E12               	movwf	___lwdiv@divisor^0,c
  3126  001B6A  EC17  F00A         	call	___lwdiv	;wreg free
  3127  001B6E  5019               	movf	getTMR0_in_ms@temp^0,w,c
  3128  001B70  2410               	addwf	?___lwdiv^0,w,c
  3129  001B72  6E17               	movwf	add_timing@timing^0,c
  3130  001B74  501A               	movf	(getTMR0_in_ms@temp+1)^0,w,c
  3131  001B76  2011               	addwfc	(?___lwdiv+1)^0,w,c
  3132  001B78  6E18               	movwf	(add_timing@timing+1)^0,c
  3133  001B7A  EC77  F00E         	call	_add_timing	;wreg free
  3134  001B7E  0012               	return		;funcret
  3135  001B80                     __end_of_getTMR0_in_ms:
  3136                           	callstack 0
  3137                           
  3138 ;; *************** function _add_timing *****************
  3139 ;; Defined at:
  3140 ;;		line 22 in file "Memory.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  timing          2   22[COMRAM] unsigned int 
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;		None
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      void 
  3147 ;; Registers used:
  3148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3154 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3158 ;;Total ram usage:        2 bytes
  3159 ;; Hardware stack levels used: 1
  3160 ;; Hardware stack levels required when called: 5
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		_getTMR0_in_ms
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           	psect	text21
  3169  001CEE                     __ptext21:
  3170                           	callstack 0
  3171  001CEE                     _add_timing:
  3172                           	callstack 24
  3173  001CEE                     
  3174                           ;Memory.c: 23:     timeList[time_index++] = timing;
  3175  001CEE  0100               	movlb	0	; () banked
  3176  001CF0  519E               	movf	_time_index& (0+255),w,b
  3177  001CF2  0D02               	mullw	2
  3178  001CF4  0E60               	movlw	low _timeList
  3179  001CF6  24F3               	addwf	243,w,c
  3180  001CF8  6ED9               	movwf	fsr2l,c
  3181  001CFA  0E00               	movlw	high _timeList
  3182  001CFC  20F4               	addwfc	prodh,w,c
  3183  001CFE  6EDA               	movwf	fsr2h,c
  3184  001D00  C017  FFDE         	movff	add_timing@timing,postinc2
  3185  001D04  C018  FFDD         	movff	add_timing@timing+1,postdec2
  3186  001D08                     
  3187                           ; BSR set to: 0
  3188  001D08  2B9E               	incf	_time_index& (0+255),f,b
  3189  001D0A                     
  3190                           ; BSR set to: 0
  3191  001D0A  0012               	return		;funcret
  3192  001D0C                     __end_of_add_timing:
  3193                           	callstack 0
  3194                           
  3195 ;; *************** function ___lwdiv *****************
  3196 ;; Defined at:
  3197 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;  dividend        2   15[COMRAM] unsigned int 
  3200 ;;  divisor         2   17[COMRAM] unsigned int 
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;  quotient        2   19[COMRAM] unsigned int 
  3203 ;;  counter         1   21[COMRAM] unsigned char 
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  2   15[COMRAM] unsigned int 
  3206 ;; Registers used:
  3207 ;;		wreg, status,2, status,0
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3213 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3214 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3216 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3217 ;;Total ram usage:        7 bytes
  3218 ;; Hardware stack levels used: 1
  3219 ;; Hardware stack levels required when called: 5
  3220 ;; This function calls:
  3221 ;;		Nothing
  3222 ;; This function is called by:
  3223 ;;		_interrupt_threshold_calibrate
  3224 ;;		_getTMR0_in_ms
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text22
  3229  00142E                     __ptext22:
  3230                           	callstack 0
  3231  00142E                     ___lwdiv:
  3232                           	callstack 24
  3233  00142E  0E00               	movlw	0
  3234  001430  6E15               	movwf	(___lwdiv@quotient+1)^0,c
  3235  001432  0E00               	movlw	0
  3236  001434  6E14               	movwf	___lwdiv@quotient^0,c
  3237  001436  5012               	movf	___lwdiv@divisor^0,w,c
  3238  001438  1013               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3239  00143A  B4D8               	btfsc	status,2,c
  3240  00143C  EF22  F00A         	goto	u1531
  3241  001440  EF24  F00A         	goto	u1530
  3242  001444                     u1531:
  3243  001444  EF4C  F00A         	goto	l1210
  3244  001448                     u1530:
  3245  001448  0E01               	movlw	1
  3246  00144A  6E16               	movwf	___lwdiv@counter^0,c
  3247  00144C  EF2C  F00A         	goto	l2728
  3248  001450                     l2726:
  3249  001450  90D8               	bcf	status,0,c
  3250  001452  3612               	rlcf	___lwdiv@divisor^0,f,c
  3251  001454  3613               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3252  001456  2A16               	incf	___lwdiv@counter^0,f,c
  3253  001458                     l2728:
  3254  001458  AE13               	btfss	(___lwdiv@divisor+1)^0,7,c
  3255  00145A  EF31  F00A         	goto	u1541
  3256  00145E  EF33  F00A         	goto	u1540
  3257  001462                     u1541:
  3258  001462  EF28  F00A         	goto	l2726
  3259  001466                     u1540:
  3260  001466                     l2730:
  3261  001466  90D8               	bcf	status,0,c
  3262  001468  3614               	rlcf	___lwdiv@quotient^0,f,c
  3263  00146A  3615               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3264  00146C  5012               	movf	___lwdiv@divisor^0,w,c
  3265  00146E  5C10               	subwf	___lwdiv@dividend^0,w,c
  3266  001470  5013               	movf	(___lwdiv@divisor+1)^0,w,c
  3267  001472  5811               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3268  001474  A0D8               	btfss	status,0,c
  3269  001476  EF3F  F00A         	goto	u1551
  3270  00147A  EF41  F00A         	goto	u1550
  3271  00147E                     u1551:
  3272  00147E  EF46  F00A         	goto	l2738
  3273  001482                     u1550:
  3274  001482  5012               	movf	___lwdiv@divisor^0,w,c
  3275  001484  5E10               	subwf	___lwdiv@dividend^0,f,c
  3276  001486  5013               	movf	(___lwdiv@divisor+1)^0,w,c
  3277  001488  5A11               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3278  00148A  8014               	bsf	___lwdiv@quotient^0,0,c
  3279  00148C                     l2738:
  3280  00148C  90D8               	bcf	status,0,c
  3281  00148E  3213               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3282  001490  3212               	rrcf	___lwdiv@divisor^0,f,c
  3283  001492  2E16               	decfsz	___lwdiv@counter^0,f,c
  3284  001494  EF33  F00A         	goto	l2730
  3285  001498                     l1210:
  3286  001498  C014  F010         	movff	___lwdiv@quotient,?___lwdiv
  3287  00149C  C015  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3288  0014A0  0012               	return		;funcret
  3289  0014A2                     __end_of___lwdiv:
  3290                           	callstack 0
  3291                           
  3292 ;; *************** function _decide_color *****************
  3293 ;; Defined at:
  3294 ;;		line 113 in file "color.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;		None
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;  LED_and_ambi    8   19[BANK0 ] unsigned int [4]
  3299 ;;  ambient         8   11[BANK0 ] unsigned int [4]
  3300 ;;  clear_real      3   29[BANK0 ] m
  3301 ;;  blue_real       3    6[BANK0 ] m
  3302 ;;  green_real      3    3[BANK0 ] m
  3303 ;;  red_real        3    0[BANK0 ] m
  3304 ;;  black_thresh    2    9[BANK0 ] unsigned int 
  3305 ;;  redPercentag    1   33[BANK0 ] unsigned char 
  3306 ;;  color_decisi    1   32[BANK0 ] unsigned char 
  3307 ;;  bluePercenta    1   28[BANK0 ] unsigned char 
  3308 ;;  greenPercent    1   27[BANK0 ] unsigned char 
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      unsigned char 
  3311 ;; Registers used:
  3312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3319 ;;      Locals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3320 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3321 ;;      Totals:         4      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3322 ;;Total ram usage:       38 bytes
  3323 ;; Hardware stack levels used: 1
  3324 ;; Hardware stack levels required when called: 9
  3325 ;; This function calls:
  3326 ;;		_LightOff
  3327 ;;		_LightOn
  3328 ;;		___atdiv
  3329 ;;		___tmul
  3330 ;;		_read_All_Colors
  3331 ;; This function is called by:
  3332 ;;		_main
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text23
  3337  000070                     __ptext23:
  3338                           	callstack 0
  3339  000070                     _decide_color:
  3340                           	callstack 21
  3341  000070                     
  3342                           ;color.c: 115:     char color_decision;;color.c: 116:     unsigned int black_threshold;;
      +                          color.c: 117:     unsigned int LED_and_ambient[4];;color.c: 118:     unsigned int ambien
      +                          t[4];;color.c: 121:     LightOn();
  3343  000070  ECF8  F00E         	call	_LightOn	;wreg free
  3344  000074                     
  3345                           ;color.c: 122:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3346  000074  0E29               	movlw	41
  3347  000076  6E25               	movwf	(??_decide_color+1)^0,c
  3348  000078  0E96               	movlw	150
  3349  00007A  6E24               	movwf	??_decide_color^0,c
  3350  00007C  0E7F               	movlw	127
  3351  00007E                     u3147:
  3352  00007E  2EE8               	decfsz	wreg,f,c
  3353  000080  D7FE               	bra	u3147
  3354  000082  2E24               	decfsz	??_decide_color^0,f,c
  3355  000084  D7FC               	bra	u3147
  3356  000086  2E25               	decfsz	(??_decide_color+1)^0,f,c
  3357  000088  D7FA               	bra	u3147
  3358  00008A  F000               	nop	
  3359  00008C                     
  3360                           ;color.c: 123:     read_All_Colors(LED_and_ambient);
  3361  00008C  0EB3               	movlw	low decide_color@LED_and_ambient
  3362  00008E  6E1C               	movwf	read_All_Colors@writeArray^0,c
  3363  000090  0E00               	movlw	high decide_color@LED_and_ambient
  3364  000092  6E1D               	movwf	(read_All_Colors@writeArray+1)^0,c
  3365  000094  EC66  F00B         	call	_read_All_Colors	;wreg free
  3366  000098                     
  3367                           ;color.c: 124:     black_threshold = LED_and_ambient[0];
  3368  000098  C0B3  F0A9         	movff	decide_color@LED_and_ambient,decide_color@black_threshold
  3369  00009C  C0B4  F0AA         	movff	decide_color@LED_and_ambient+1,decide_color@black_threshold+1
  3370  0000A0                     
  3371                           ;color.c: 127:     LightOff();
  3372  0000A0  ECFC  F00E         	call	_LightOff	;wreg free
  3373  0000A4                     
  3374                           ;color.c: 128:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3375  0000A4  0E29               	movlw	41
  3376  0000A6  6E25               	movwf	(??_decide_color+1)^0,c
  3377  0000A8  0E96               	movlw	150
  3378  0000AA  6E24               	movwf	??_decide_color^0,c
  3379  0000AC  0E7F               	movlw	127
  3380  0000AE                     u3157:
  3381  0000AE  2EE8               	decfsz	wreg,f,c
  3382  0000B0  D7FE               	bra	u3157
  3383  0000B2  2E24               	decfsz	??_decide_color^0,f,c
  3384  0000B4  D7FC               	bra	u3157
  3385  0000B6  2E25               	decfsz	(??_decide_color+1)^0,f,c
  3386  0000B8  D7FA               	bra	u3157
  3387  0000BA  F000               	nop	
  3388                           
  3389                           ;color.c: 129:     read_All_Colors(ambient);
  3390  0000BC  0EAB               	movlw	low decide_color@ambient
  3391  0000BE  6E1C               	movwf	read_All_Colors@writeArray^0,c
  3392  0000C0  0E00               	movlw	high decide_color@ambient
  3393  0000C2  6E1D               	movwf	(read_All_Colors@writeArray+1)^0,c
  3394  0000C4  EC66  F00B         	call	_read_All_Colors	;wreg free
  3395  0000C8                     
  3396                           ;color.c: 134:     __int24 clear_real = LED_and_ambient[0]- ambient[0]- 993;
  3397  0000C8  0E1F               	movlw	31
  3398  0000CA  6E24               	movwf	??_decide_color^0,c
  3399  0000CC  0EFC               	movlw	252
  3400  0000CE  6E25               	movwf	(??_decide_color+1)^0,c
  3401  0000D0  0100               	movlb	0	; () banked
  3402  0000D2  51AB               	movf	decide_color@ambient& (0+255),w,b
  3403  0000D4  5DB3               	subwf	decide_color@LED_and_ambient& (0+255),w,b
  3404  0000D6  6E26               	movwf	(??_decide_color+2)^0,c
  3405  0000D8  51AC               	movf	(decide_color@ambient+1)& (0+255),w,b
  3406  0000DA  59B4               	subwfb	(decide_color@LED_and_ambient+1)& (0+255),w,b
  3407  0000DC  6E27               	movwf	(??_decide_color+3)^0,c
  3408  0000DE  5024               	movf	??_decide_color^0,w,c
  3409  0000E0  2626               	addwf	(??_decide_color+2)^0,f,c
  3410  0000E2  5025               	movf	(??_decide_color+1)^0,w,c
  3411  0000E4  2227               	addwfc	(??_decide_color+3)^0,f,c
  3412  0000E6  C026  F0BD         	movff	??_decide_color+2,decide_color@clear_real
  3413  0000EA  C027  F0BE         	movff	??_decide_color+3,decide_color@clear_real+1
  3414  0000EE  6BBF               	clrf	(decide_color@clear_real+2)& (0+255),b
  3415  0000F0                     
  3416                           ; BSR set to: 0
  3417                           ;color.c: 135:     __int24 red_real = LED_and_ambient[1]- ambient[1]- 484;
  3418  0000F0  0E1C               	movlw	28
  3419  0000F2  6E24               	movwf	??_decide_color^0,c
  3420  0000F4  0EFE               	movlw	254
  3421  0000F6  6E25               	movwf	(??_decide_color+1)^0,c
  3422  0000F8  51AD               	movf	(decide_color@ambient+2)& (0+255),w,b
  3423  0000FA  5DB5               	subwf	(decide_color@LED_and_ambient+2)& (0+255),w,b
  3424  0000FC  6E26               	movwf	(??_decide_color+2)^0,c
  3425  0000FE  51AE               	movf	(decide_color@ambient+3)& (0+255),w,b
  3426  000100  59B6               	subwfb	(decide_color@LED_and_ambient+3)& (0+255),w,b
  3427  000102  6E27               	movwf	(??_decide_color+3)^0,c
  3428  000104  5024               	movf	??_decide_color^0,w,c
  3429  000106  2626               	addwf	(??_decide_color+2)^0,f,c
  3430  000108  5025               	movf	(??_decide_color+1)^0,w,c
  3431  00010A  2227               	addwfc	(??_decide_color+3)^0,f,c
  3432  00010C  C026  F0A0         	movff	??_decide_color+2,decide_color@red_real
  3433  000110  C027  F0A1         	movff	??_decide_color+3,decide_color@red_real+1
  3434  000114  6BA2               	clrf	(decide_color@red_real+2)& (0+255),b
  3435  000116                     
  3436                           ; BSR set to: 0
  3437                           ;color.c: 136:     __int24 green_real = LED_and_ambient[2]- ambient[2]- 268;
  3438  000116  0EF4               	movlw	244
  3439  000118  6E24               	movwf	??_decide_color^0,c
  3440  00011A  0EFE               	movlw	254
  3441  00011C  6E25               	movwf	(??_decide_color+1)^0,c
  3442  00011E  51AF               	movf	(decide_color@ambient+4)& (0+255),w,b
  3443  000120  5DB7               	subwf	(decide_color@LED_and_ambient+4)& (0+255),w,b
  3444  000122  6E26               	movwf	(??_decide_color+2)^0,c
  3445  000124  51B0               	movf	(decide_color@ambient+5)& (0+255),w,b
  3446  000126  59B8               	subwfb	(decide_color@LED_and_ambient+5)& (0+255),w,b
  3447  000128  6E27               	movwf	(??_decide_color+3)^0,c
  3448  00012A  5024               	movf	??_decide_color^0,w,c
  3449  00012C  2626               	addwf	(??_decide_color+2)^0,f,c
  3450  00012E  5025               	movf	(??_decide_color+1)^0,w,c
  3451  000130  2227               	addwfc	(??_decide_color+3)^0,f,c
  3452  000132  C026  F0A3         	movff	??_decide_color+2,decide_color@green_real
  3453  000136  C027  F0A4         	movff	??_decide_color+3,decide_color@green_real+1
  3454  00013A  6BA5               	clrf	(decide_color@green_real+2)& (0+255),b
  3455  00013C                     
  3456                           ; BSR set to: 0
  3457                           ;color.c: 137:     __int24 blue_real = LED_and_ambient[3]- ambient[3]- 183;
  3458  00013C  0E49               	movlw	73
  3459  00013E  6E24               	movwf	??_decide_color^0,c
  3460  000140  0EFF               	movlw	255
  3461  000142  6E25               	movwf	(??_decide_color+1)^0,c
  3462  000144  51B1               	movf	(decide_color@ambient+6)& (0+255),w,b
  3463  000146  5DB9               	subwf	(decide_color@LED_and_ambient+6)& (0+255),w,b
  3464  000148  6E26               	movwf	(??_decide_color+2)^0,c
  3465  00014A  51B2               	movf	(decide_color@ambient+7)& (0+255),w,b
  3466  00014C  59BA               	subwfb	(decide_color@LED_and_ambient+7)& (0+255),w,b
  3467  00014E  6E27               	movwf	(??_decide_color+3)^0,c
  3468  000150  5024               	movf	??_decide_color^0,w,c
  3469  000152  2626               	addwf	(??_decide_color+2)^0,f,c
  3470  000154  5025               	movf	(??_decide_color+1)^0,w,c
  3471  000156  2227               	addwfc	(??_decide_color+3)^0,f,c
  3472  000158  C026  F0A6         	movff	??_decide_color+2,decide_color@blue_real
  3473  00015C  C027  F0A7         	movff	??_decide_color+3,decide_color@blue_real+1
  3474  000160  6BA8               	clrf	(decide_color@blue_real+2)& (0+255),b
  3475  000162                     
  3476                           ; BSR set to: 0
  3477                           ;color.c: 140:     char redPercentage = (100*red_real)/ clear_real;
  3478  000162  0E64               	movlw	100
  3479  000164  6E13               	movwf	___tmul@multiplicand^0,c
  3480  000166  0E00               	movlw	0
  3481  000168  6E14               	movwf	(___tmul@multiplicand+1)^0,c
  3482  00016A  0E00               	movlw	0
  3483  00016C  6E15               	movwf	(___tmul@multiplicand+2)^0,c
  3484  00016E  C0A0  F010         	movff	decide_color@red_real,___tmul@multiplier
  3485  000172  C0A1  F011         	movff	decide_color@red_real+1,___tmul@multiplier+1
  3486  000176  C0A2  F012         	movff	decide_color@red_real+2,___tmul@multiplier+2
  3487  00017A  ECBE  F00A         	call	___tmul	;wreg free
  3488  00017E  C010  F019         	movff	?___tmul,___atdiv@dividend
  3489  000182  C011  F01A         	movff	?___tmul+1,___atdiv@dividend+1
  3490  000186  C012  F01B         	movff	?___tmul+2,___atdiv@dividend+2
  3491  00018A  C0BD  F01C         	movff	decide_color@clear_real,___atdiv@divisor
  3492  00018E  C0BE  F01D         	movff	decide_color@clear_real+1,___atdiv@divisor+1
  3493  000192  C0BF  F01E         	movff	decide_color@clear_real+2,___atdiv@divisor+2
  3494  000196  ECC2  F006         	call	___atdiv	;wreg free
  3495  00019A  5019               	movf	?___atdiv^0,w,c
  3496  00019C  0100               	movlb	0	; () banked
  3497  00019E  6FC1               	movwf	decide_color@redPercentage& (0+255),b
  3498  0001A0                     
  3499                           ; BSR set to: 0
  3500                           ;color.c: 141:     char greenPercentage = (100*green_real) / clear_real;
  3501  0001A0  0E64               	movlw	100
  3502  0001A2  6E13               	movwf	___tmul@multiplicand^0,c
  3503  0001A4  0E00               	movlw	0
  3504  0001A6  6E14               	movwf	(___tmul@multiplicand+1)^0,c
  3505  0001A8  0E00               	movlw	0
  3506  0001AA  6E15               	movwf	(___tmul@multiplicand+2)^0,c
  3507  0001AC  C0A3  F010         	movff	decide_color@green_real,___tmul@multiplier
  3508  0001B0  C0A4  F011         	movff	decide_color@green_real+1,___tmul@multiplier+1
  3509  0001B4  C0A5  F012         	movff	decide_color@green_real+2,___tmul@multiplier+2
  3510  0001B8  ECBE  F00A         	call	___tmul	;wreg free
  3511  0001BC  C010  F019         	movff	?___tmul,___atdiv@dividend
  3512  0001C0  C011  F01A         	movff	?___tmul+1,___atdiv@dividend+1
  3513  0001C4  C012  F01B         	movff	?___tmul+2,___atdiv@dividend+2
  3514  0001C8  C0BD  F01C         	movff	decide_color@clear_real,___atdiv@divisor
  3515  0001CC  C0BE  F01D         	movff	decide_color@clear_real+1,___atdiv@divisor+1
  3516  0001D0  C0BF  F01E         	movff	decide_color@clear_real+2,___atdiv@divisor+2
  3517  0001D4  ECC2  F006         	call	___atdiv	;wreg free
  3518  0001D8  5019               	movf	?___atdiv^0,w,c
  3519  0001DA  0100               	movlb	0	; () banked
  3520  0001DC  6FBB               	movwf	decide_color@greenPercentage& (0+255),b
  3521  0001DE                     
  3522                           ; BSR set to: 0
  3523                           ;color.c: 142:     char bluePercentage = (100*blue_real) / clear_real;
  3524  0001DE  0E64               	movlw	100
  3525  0001E0  6E13               	movwf	___tmul@multiplicand^0,c
  3526  0001E2  0E00               	movlw	0
  3527  0001E4  6E14               	movwf	(___tmul@multiplicand+1)^0,c
  3528  0001E6  0E00               	movlw	0
  3529  0001E8  6E15               	movwf	(___tmul@multiplicand+2)^0,c
  3530  0001EA  C0A6  F010         	movff	decide_color@blue_real,___tmul@multiplier
  3531  0001EE  C0A7  F011         	movff	decide_color@blue_real+1,___tmul@multiplier+1
  3532  0001F2  C0A8  F012         	movff	decide_color@blue_real+2,___tmul@multiplier+2
  3533  0001F6  ECBE  F00A         	call	___tmul	;wreg free
  3534  0001FA  C010  F019         	movff	?___tmul,___atdiv@dividend
  3535  0001FE  C011  F01A         	movff	?___tmul+1,___atdiv@dividend+1
  3536  000202  C012  F01B         	movff	?___tmul+2,___atdiv@dividend+2
  3537  000206  C0BD  F01C         	movff	decide_color@clear_real,___atdiv@divisor
  3538  00020A  C0BE  F01D         	movff	decide_color@clear_real+1,___atdiv@divisor+1
  3539  00020E  C0BF  F01E         	movff	decide_color@clear_real+2,___atdiv@divisor+2
  3540  000212  ECC2  F006         	call	___atdiv	;wreg free
  3541  000216  5019               	movf	?___atdiv^0,w,c
  3542  000218  0100               	movlb	0	; () banked
  3543  00021A  6FBC               	movwf	decide_color@bluePercentage& (0+255),b
  3544  00021C                     
  3545                           ; BSR set to: 0
  3546                           ;color.c: 145:     if (black_threshold <= int_low){
  3547  00021C  51A9               	movf	decide_color@black_threshold& (0+255),w,b
  3548  00021E  5C4E               	subwf	_int_low^0,w,c
  3549  000220  51AA               	movf	(decide_color@black_threshold+1)& (0+255),w,b
  3550  000222  584F               	subwfb	(_int_low+1)^0,w,c
  3551  000224  A0D8               	btfss	status,0,c
  3552  000226  EF17  F001         	goto	u2611
  3553  00022A  EF19  F001         	goto	u2610
  3554  00022E                     u2611:
  3555  00022E  EF1D  F001         	goto	l3644
  3556  000232                     u2610:
  3557  000232                     
  3558                           ; BSR set to: 0
  3559                           ;color.c: 146:        color_decision=9;
  3560  000232  0E09               	movlw	9
  3561  000234  6FC0               	movwf	decide_color@color_decision& (0+255),b
  3562                           
  3563                           ;color.c: 147:     } else if (redPercentage >= 65){
  3564  000236  EFA0  F001         	goto	l3688
  3565  00023A                     l3644:
  3566                           
  3567                           ; BSR set to: 0
  3568  00023A  0E40               	movlw	64
  3569  00023C  65C1               	cpfsgt	decide_color@redPercentage& (0+255),b
  3570  00023E  EF23  F001         	goto	u2621
  3571  000242  EF25  F001         	goto	u2620
  3572  000246                     u2621:
  3573  000246  EF35  F001         	goto	l3652
  3574  00024A                     u2620:
  3575  00024A                     
  3576                           ; BSR set to: 0
  3577                           ;color.c: 148:         if(greenPercentage < 11){
  3578  00024A  0E0B               	movlw	11
  3579  00024C  61BB               	cpfslt	decide_color@greenPercentage& (0+255),b
  3580  00024E  EF2B  F001         	goto	u2631
  3581  000252  EF2D  F001         	goto	u2630
  3582  000256                     u2631:
  3583  000256  EF31  F001         	goto	l3650
  3584  00025A                     u2630:
  3585  00025A                     
  3586                           ; BSR set to: 0
  3587                           ;color.c: 149:             color_decision = 1;
  3588  00025A  0E01               	movlw	1
  3589  00025C  6FC0               	movwf	decide_color@color_decision& (0+255),b
  3590                           
  3591                           ;color.c: 150:         } else {
  3592  00025E  EFA0  F001         	goto	l3688
  3593  000262                     l3650:
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;color.c: 151:             color_decision = 6;
  3597  000262  0E06               	movlw	6
  3598  000264  6FC0               	movwf	decide_color@color_decision& (0+255),b
  3599  000266  EFA0  F001         	goto	l3688
  3600  00026A                     l3652:
  3601                           
  3602                           ; BSR set to: 0
  3603  00026A  0E41               	movlw	65
  3604  00026C  61C1               	cpfslt	decide_color@redPercentage& (0+255),b
  3605  00026E  EF3B  F001         	goto	u2641
  3606  000272  EF3D  F001         	goto	u2640
  3607  000276                     u2641:
  3608  000276  EF5D  F001         	goto	l3664
  3609  00027A                     u2640:
  3610  00027A                     
  3611                           ; BSR set to: 0
  3612  00027A  0E33               	movlw	51
  3613  00027C  65C1               	cpfsgt	decide_color@redPercentage& (0+255),b
  3614  00027E  EF43  F001         	goto	u2651
  3615  000282  EF45  F001         	goto	u2650
  3616  000286                     u2651:
  3617  000286  EF5D  F001         	goto	l3664
  3618  00028A                     u2650:
  3619  00028A                     
  3620                           ; BSR set to: 0
  3621                           ;color.c: 154:         if (greenPercentage >=29 && bluePercentage < 21){
  3622  00028A  0E1C               	movlw	28
  3623  00028C  65BB               	cpfsgt	decide_color@greenPercentage& (0+255),b
  3624  00028E  EF4B  F001         	goto	u2661
  3625  000292  EF4D  F001         	goto	u2660
  3626  000296                     u2661:
  3627  000296  EF59  F001         	goto	l3662
  3628  00029A                     u2660:
  3629  00029A                     
  3630                           ; BSR set to: 0
  3631  00029A  0E15               	movlw	21
  3632  00029C  61BC               	cpfslt	decide_color@bluePercentage& (0+255),b
  3633  00029E  EF53  F001         	goto	u2671
  3634  0002A2  EF55  F001         	goto	u2670
  3635  0002A6                     u2671:
  3636  0002A6  EF59  F001         	goto	l3662
  3637  0002AA                     u2670:
  3638  0002AA                     
  3639                           ; BSR set to: 0
  3640                           ;color.c: 155:             color_decision = 4;
  3641  0002AA  0E04               	movlw	4
  3642  0002AC  6FC0               	movwf	decide_color@color_decision& (0+255),b
  3643                           
  3644                           ;color.c: 156:         } else {
  3645  0002AE  EFA0  F001         	goto	l3688
  3646  0002B2                     l3662:
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;color.c: 157:             color_decision = 5;
  3650  0002B2  0E05               	movlw	5
  3651  0002B4  6FC0               	movwf	decide_color@color_decision& (0+255),b
  3652  0002B6  EFA0  F001         	goto	l3688
  3653  0002BA                     l3664:
  3654                           
  3655                           ; BSR set to: 0
  3656  0002BA  0E34               	movlw	52
  3657  0002BC  61C1               	cpfslt	decide_color@redPercentage& (0+255),b
  3658  0002BE  EF63  F001         	goto	u2681
  3659  0002C2  EF65  F001         	goto	u2680
  3660  0002C6                     u2681:
  3661  0002C6  EF7D  F001         	goto	l3674
  3662  0002CA                     u2680:
  3663  0002CA                     
  3664                           ; BSR set to: 0
  3665  0002CA  0E22               	movlw	34
  3666  0002CC  65C1               	cpfsgt	decide_color@redPercentage& (0+255),b
  3667  0002CE  EF6B  F001         	goto	u2691
  3668  0002D2  EF6D  F001         	goto	u2690
  3669  0002D6                     u2691:
  3670  0002D6  EF7D  F001         	goto	l3674
  3671  0002DA                     u2690:
  3672  0002DA                     
  3673                           ; BSR set to: 0
  3674                           ;color.c: 160:         if (redPercentage >= 45){
  3675  0002DA  0E2C               	movlw	44
  3676  0002DC  65C1               	cpfsgt	decide_color@redPercentage& (0+255),b
  3677  0002DE  EF73  F001         	goto	u2701
  3678  0002E2  EF75  F001         	goto	u2700
  3679  0002E6                     u2701:
  3680  0002E6  EF79  F001         	goto	l3672
  3681  0002EA                     u2700:
  3682  0002EA                     
  3683                           ; BSR set to: 0
  3684                           ;color.c: 161:             color_decision = 8;
  3685  0002EA  0E08               	movlw	8
  3686  0002EC  6FC0               	movwf	decide_color@color_decision& (0+255),b
  3687                           
  3688                           ;color.c: 162:         } else {
  3689  0002EE  EFA0  F001         	goto	l3688
  3690  0002F2                     l3672:
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;color.c: 163:             color_decision = 7;
  3694  0002F2  0E07               	movlw	7
  3695  0002F4  6FC0               	movwf	decide_color@color_decision& (0+255),b
  3696  0002F6  EFA0  F001         	goto	l3688
  3697  0002FA                     l3674:
  3698                           
  3699                           ; BSR set to: 0
  3700  0002FA  0E23               	movlw	35
  3701  0002FC  61C1               	cpfslt	decide_color@redPercentage& (0+255),b
  3702  0002FE  EF83  F001         	goto	u2711
  3703  000302  EF85  F001         	goto	u2710
  3704  000306                     u2711:
  3705  000306  EF9D  F001         	goto	l3684
  3706  00030A                     u2710:
  3707  00030A                     
  3708                           ; BSR set to: 0
  3709  00030A  0E0E               	movlw	14
  3710  00030C  65C1               	cpfsgt	decide_color@redPercentage& (0+255),b
  3711  00030E  EF8B  F001         	goto	u2721
  3712  000312  EF8D  F001         	goto	u2720
  3713  000316                     u2721:
  3714  000316  EF9D  F001         	goto	l3684
  3715  00031A                     u2720:
  3716  00031A                     
  3717                           ; BSR set to: 0
  3718                           ;color.c: 166:         if (bluePercentage>=30){
  3719  00031A  0E1D               	movlw	29
  3720  00031C  65BC               	cpfsgt	decide_color@bluePercentage& (0+255),b
  3721  00031E  EF93  F001         	goto	u2731
  3722  000322  EF95  F001         	goto	u2730
  3723  000326                     u2731:
  3724  000326  EF99  F001         	goto	l3682
  3725  00032A                     u2730:
  3726  00032A                     
  3727                           ; BSR set to: 0
  3728                           ;color.c: 167:             color_decision = 3;
  3729  00032A  0E03               	movlw	3
  3730  00032C  6FC0               	movwf	decide_color@color_decision& (0+255),b
  3731                           
  3732                           ;color.c: 168:         } else {
  3733  00032E  EFA0  F001         	goto	l3688
  3734  000332                     l3682:
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;color.c: 169:             color_decision = 2;
  3738  000332  0E02               	movlw	2
  3739  000334  6FC0               	movwf	decide_color@color_decision& (0+255),b
  3740  000336  EFA0  F001         	goto	l3688
  3741  00033A                     l3684:
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;color.c: 172:         return 0;
  3745  00033A  0E00               	movlw	0
  3746  00033C  EFA4  F001         	goto	l117
  3747  000340                     l3688:
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;color.c: 174:     LightOn();
  3751  000340  ECF8  F00E         	call	_LightOn	;wreg free
  3752  000344                     
  3753                           ;color.c: 175:     return color_decision;
  3754  000344  0100               	movlb	0	; () banked
  3755  000346  51C0               	movf	decide_color@color_decision& (0+255),w,b
  3756  000348                     l117:
  3757                           
  3758                           ; BSR set to: 0
  3759  000348  0012               	return		;funcret
  3760  00034A                     __end_of_decide_color:
  3761                           	callstack 0
  3762                           
  3763 ;; *************** function _read_All_Colors *****************
  3764 ;; Defined at:
  3765 ;;		line 106 in file "color.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  writeArray      2   27[COMRAM] PTR unsigned int 
  3768 ;;		 -> decide_color@ambient(8), decide_color@LED_and_ambient(8), 
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;  i               2   29[COMRAM] int 
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      void 
  3773 ;; Registers used:
  3774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3780 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3781 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3783 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3784 ;;Total ram usage:        4 bytes
  3785 ;; Hardware stack levels used: 1
  3786 ;; Hardware stack levels required when called: 8
  3787 ;; This function calls:
  3788 ;;		_color_read
  3789 ;; This function is called by:
  3790 ;;		_decide_color
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           	psect	text24
  3795  0016CC                     __ptext24:
  3796                           	callstack 0
  3797  0016CC                     _read_All_Colors:
  3798                           	callstack 21
  3799  0016CC                     
  3800                           ;color.c: 107:     for(int i=0;i<4;i++){
  3801  0016CC  0E00               	movlw	0
  3802  0016CE  6E1F               	movwf	(read_All_Colors@i+1)^0,c
  3803  0016D0  0E00               	movlw	0
  3804  0016D2  6E1E               	movwf	read_All_Colors@i^0,c
  3805  0016D4                     l3484:
  3806                           
  3807                           ;color.c: 108:         *(writeArray+i) = color_read(0x14+2*i);
  3808  0016D4  501E               	movf	read_All_Colors@i^0,w,c
  3809  0016D6  0D02               	mullw	2
  3810  0016D8  50F3               	movf	243,w,c
  3811  0016DA  0F14               	addlw	20
  3812  0016DC  ECEA  F00A         	call	_color_read
  3813  0016E0  90D8               	bcf	status,0,c
  3814  0016E2  341E               	rlcf	read_All_Colors@i^0,w,c
  3815  0016E4  6ED9               	movwf	fsr2l,c
  3816  0016E6  341F               	rlcf	(read_All_Colors@i+1)^0,w,c
  3817  0016E8  6EDA               	movwf	fsr2h,c
  3818  0016EA  501C               	movf	read_All_Colors@writeArray^0,w,c
  3819  0016EC  26D9               	addwf	fsr2l,f,c
  3820  0016EE  501D               	movf	(read_All_Colors@writeArray+1)^0,w,c
  3821  0016F0  22DA               	addwfc	fsr2h,f,c
  3822  0016F2  C014  FFDE         	movff	?_color_read,postinc2
  3823  0016F6  C015  FFDD         	movff	?_color_read+1,postdec2
  3824  0016FA                     
  3825                           ;color.c: 109:  }
  3826  0016FA  4A1E               	infsnz	read_All_Colors@i^0,f,c
  3827  0016FC  2A1F               	incf	(read_All_Colors@i+1)^0,f,c
  3828  0016FE  BE1F               	btfsc	(read_All_Colors@i+1)^0,7,c
  3829  001700  EF8B  F00B         	goto	u2431
  3830  001704  501F               	movf	(read_All_Colors@i+1)^0,w,c
  3831  001706  E109               	bnz	u2430
  3832  001708  0E04               	movlw	4
  3833  00170A  5C1E               	subwf	read_All_Colors@i^0,w,c
  3834  00170C  A0D8               	btfss	status,0,c
  3835  00170E  EF8B  F00B         	goto	u2431
  3836  001712  EF8D  F00B         	goto	u2430
  3837  001716                     u2431:
  3838  001716  EF6A  F00B         	goto	l3484
  3839  00171A                     u2430:
  3840  00171A  0012               	return		;funcret
  3841  00171C                     __end_of_read_All_Colors:
  3842                           	callstack 0
  3843                           
  3844 ;; *************** function _color_read *****************
  3845 ;; Defined at:
  3846 ;;		line 88 in file "color.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  address         1    wreg     unsigned char 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  address         1   24[COMRAM] unsigned char 
  3851 ;;  tmp             2   25[COMRAM] unsigned int 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  2   19[COMRAM] unsigned int 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2, status,0, cstack
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3861 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3862 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3863 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3864 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3865 ;;Total ram usage:        8 bytes
  3866 ;; Hardware stack levels used: 1
  3867 ;; Hardware stack levels required when called: 7
  3868 ;; This function calls:
  3869 ;;		_I2C_2_Master_Read
  3870 ;;		_I2C_2_Master_RepStart
  3871 ;;		_I2C_2_Master_Start
  3872 ;;		_I2C_2_Master_Stop
  3873 ;;		_I2C_2_Master_Write
  3874 ;; This function is called by:
  3875 ;;		_interrupt_threshold_calibrate
  3876 ;;		_read_All_Colors
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text25
  3881  0015D4                     __ptext25:
  3882                           	callstack 0
  3883  0015D4                     _color_read:
  3884                           	callstack 22
  3885                           
  3886                           ;incstack = 0
  3887                           ;color_read@address stored from wreg
  3888  0015D4  6E19               	movwf	color_read@address^0,c
  3889  0015D6                     
  3890                           ;color.c: 90:  unsigned tmp;;color.c: 91:  I2C_2_Master_Start();
  3891  0015D6  ECE9  F00E         	call	_I2C_2_Master_Start	;wreg free
  3892                           
  3893                           ;color.c: 92:  I2C_2_Master_Write(0x52 | 0x00);
  3894  0015DA  0E52               	movlw	82
  3895  0015DC  ECCE  F00E         	call	_I2C_2_Master_Write
  3896                           
  3897                           ;color.c: 95:     I2C_2_Master_Write(0xA0 | address);
  3898  0015E0  5019               	movf	color_read@address^0,w,c
  3899  0015E2  09A0               	iorlw	160
  3900  0015E4  ECCE  F00E         	call	_I2C_2_Master_Write
  3901                           
  3902                           ;color.c: 97:     I2C_2_Master_RepStart();
  3903  0015E8  ECDA  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  3904                           
  3905                           ;color.c: 98:     I2C_2_Master_Write(0x52 | 0x01);
  3906  0015EC  0E53               	movlw	83
  3907  0015EE  ECCE  F00E         	call	_I2C_2_Master_Write
  3908                           
  3909                           ;color.c: 99:     tmp=I2C_2_Master_Read(1);
  3910  0015F2  0E01               	movlw	1
  3911  0015F4  EC1F  F00C         	call	_I2C_2_Master_Read
  3912  0015F8  6E16               	movwf	??_color_read^0,c
  3913  0015FA  5016               	movf	??_color_read^0,w,c
  3914  0015FC  6E1A               	movwf	color_read@tmp^0,c
  3915  0015FE  6A1B               	clrf	(color_read@tmp+1)^0,c
  3916                           
  3917                           ;color.c: 100:     tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3918  001600  0E00               	movlw	0
  3919  001602  EC1F  F00C         	call	_I2C_2_Master_Read
  3920  001606  6E16               	movwf	??_color_read^0,c
  3921  001608  5016               	movf	??_color_read^0,w,c
  3922  00160A  6E18               	movwf	(??_color_read+2)^0,c
  3923  00160C  6A17               	clrf	(??_color_read+1)^0,c
  3924  00160E  501A               	movf	color_read@tmp^0,w,c
  3925  001610  1017               	iorwf	(??_color_read+1)^0,w,c
  3926  001612  6E1A               	movwf	color_read@tmp^0,c
  3927  001614  501B               	movf	(color_read@tmp+1)^0,w,c
  3928  001616  1018               	iorwf	(??_color_read+2)^0,w,c
  3929  001618  6E1B               	movwf	(color_read@tmp+1)^0,c
  3930                           
  3931                           ;color.c: 101:     I2C_2_Master_Stop();
  3932  00161A  ECE4  F00E         	call	_I2C_2_Master_Stop	;wreg free
  3933  00161E                     
  3934                           ;color.c: 102:     return tmp;
  3935  00161E  C01A  F014         	movff	color_read@tmp,?_color_read
  3936  001622  C01B  F015         	movff	color_read@tmp+1,?_color_read+1
  3937  001626  0012               	return		;funcret
  3938  001628                     __end_of_color_read:
  3939                           	callstack 0
  3940                           
  3941 ;; *************** function _I2C_2_Master_RepStart *****************
  3942 ;; Defined at:
  3943 ;;		line 33 in file "i2c.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;		None
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      void 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0, cstack
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3961 ;;Total ram usage:        0 bytes
  3962 ;; Hardware stack levels used: 1
  3963 ;; Hardware stack levels required when called: 6
  3964 ;; This function calls:
  3965 ;;		_I2C_2_Master_Idle
  3966 ;; This function is called by:
  3967 ;;		_color_read
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text26
  3972  001DB4                     __ptext26:
  3973                           	callstack 0
  3974  001DB4                     _I2C_2_Master_RepStart:
  3975                           	callstack 22
  3976  001DB4                     
  3977                           ;i2c.c: 34:   I2C_2_Master_Idle();
  3978  001DB4  ECEC  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3979  001DB8                     
  3980                           ;i2c.c: 35:   SSP2CON2bits.RSEN = 1;
  3981  001DB8  010E               	movlb	14	; () banked
  3982  001DBA  83DA               	bsf	218,1,b	;volatile
  3983  001DBC                     
  3984                           ; BSR set to: 14
  3985  001DBC  0012               	return		;funcret
  3986  001DBE                     __end_of_I2C_2_Master_RepStart:
  3987                           	callstack 0
  3988                           
  3989 ;; *************** function _I2C_2_Master_Read *****************
  3990 ;; Defined at:
  3991 ;;		line 51 in file "i2c.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  ack             1    wreg     unsigned char 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  ack             1   17[COMRAM] unsigned char 
  3996 ;;  tmp             1   18[COMRAM] unsigned char 
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  1    wreg      unsigned char 
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0, cstack
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4009 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4010 ;;Total ram usage:        3 bytes
  4011 ;; Hardware stack levels used: 1
  4012 ;; Hardware stack levels required when called: 6
  4013 ;; This function calls:
  4014 ;;		_I2C_2_Master_Idle
  4015 ;; This function is called by:
  4016 ;;		_color_read
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020                           	psect	text27
  4021  00183E                     __ptext27:
  4022                           	callstack 0
  4023  00183E                     _I2C_2_Master_Read:
  4024                           	callstack 22
  4025                           
  4026                           ; BSR set to: 14
  4027                           ;incstack = 0
  4028                           ;I2C_2_Master_Read@ack stored from wreg
  4029  00183E  6E12               	movwf	I2C_2_Master_Read@ack^0,c
  4030  001840                     
  4031                           ;i2c.c: 52:   unsigned char tmp;;i2c.c: 53:   I2C_2_Master_Idle();
  4032  001840  ECEC  F00D         	call	_I2C_2_Master_Idle	;wreg free
  4033  001844                     
  4034                           ;i2c.c: 54:   SSP2CON2bits.RCEN = 1;
  4035  001844  010E               	movlb	14	; () banked
  4036  001846  87DA               	bsf	218,3,b	;volatile
  4037                           
  4038                           ;i2c.c: 55:   I2C_2_Master_Idle();
  4039  001848  ECEC  F00D         	call	_I2C_2_Master_Idle	;wreg free
  4040  00184C                     
  4041                           ;i2c.c: 56:   tmp = SSP2BUF;
  4042  00184C  CED5 F013          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4043                           
  4044                           ;i2c.c: 57:   I2C_2_Master_Idle();
  4045  001850  ECEC  F00D         	call	_I2C_2_Master_Idle	;wreg free
  4046  001854                     
  4047                           ;i2c.c: 58:   SSP2CON2bits.ACKDT = !ack;
  4048  001854  5012               	movf	I2C_2_Master_Read@ack^0,w,c
  4049  001856  B4D8               	btfsc	status,2,c
  4050  001858  EF30  F00C         	goto	u2301
  4051  00185C  EF34  F00C         	goto	u2300
  4052  001860                     u2301:
  4053  001860  6A11               	clrf	??_I2C_2_Master_Read^0,c
  4054  001862  2A11               	incf	??_I2C_2_Master_Read^0,f,c
  4055  001864  EF35  F00C         	goto	u2318
  4056  001868                     u2300:
  4057  001868  6A11               	clrf	??_I2C_2_Master_Read^0,c
  4058  00186A                     u2318:
  4059  00186A  3A11               	swapf	??_I2C_2_Master_Read^0,f,c
  4060  00186C  4611               	rlncf	??_I2C_2_Master_Read^0,f,c
  4061  00186E  010E               	movlb	14	; () banked
  4062  001870  51DA               	movf	218,w,b	;volatile
  4063  001872  1811               	xorwf	??_I2C_2_Master_Read^0,w,c
  4064  001874  0BDF               	andlw	-33
  4065  001876  1811               	xorwf	??_I2C_2_Master_Read^0,w,c
  4066  001878  6FDA               	movwf	218,b	;volatile
  4067  00187A                     
  4068                           ; BSR set to: 14
  4069                           ;i2c.c: 59:   SSP2CON2bits.ACKEN = 1;
  4070  00187A  89DA               	bsf	218,4,b	;volatile
  4071  00187C                     
  4072                           ; BSR set to: 14
  4073                           ;i2c.c: 60:   return tmp;
  4074  00187C  5013               	movf	I2C_2_Master_Read@tmp^0,w,c
  4075  00187E                     
  4076                           ; BSR set to: 14
  4077  00187E  0012               	return		;funcret
  4078  001880                     __end_of_I2C_2_Master_Read:
  4079                           	callstack 0
  4080                           
  4081 ;; *************** function ___tmul *****************
  4082 ;; Defined at:
  4083 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul24.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  multiplier      3   15[COMRAM] unsigned um
  4086 ;;  multiplicand    3   18[COMRAM] unsigned um
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;  product         3   21[COMRAM] unsigned um
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  3   15[COMRAM] unsigned um
  4091 ;; Registers used:
  4092 ;;		wreg, status,2, status,0
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4098 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4099 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4101 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4102 ;;Total ram usage:        9 bytes
  4103 ;; Hardware stack levels used: 1
  4104 ;; Hardware stack levels required when called: 5
  4105 ;; This function calls:
  4106 ;;		Nothing
  4107 ;; This function is called by:
  4108 ;;		_decide_color
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           	psect	text28
  4113  00157C                     __ptext28:
  4114                           	callstack 0
  4115  00157C                     ___tmul:
  4116                           	callstack 24
  4117  00157C  0E00               	movlw	0
  4118  00157E  6E16               	movwf	___tmul@product^0,c
  4119  001580  0E00               	movlw	0
  4120  001582  6E17               	movwf	(___tmul@product+1)^0,c
  4121  001584  0E00               	movlw	0
  4122  001586  6E18               	movwf	(___tmul@product+2)^0,c
  4123  001588                     l3532:
  4124  001588  A010               	btfss	___tmul@multiplier^0,0,c
  4125  00158A  EFC9  F00A         	goto	u2481
  4126  00158E  EFCB  F00A         	goto	u2480
  4127  001592                     u2481:
  4128  001592  EFD1  F00A         	goto	l3536
  4129  001596                     u2480:
  4130  001596  5013               	movf	___tmul@multiplicand^0,w,c
  4131  001598  2616               	addwf	___tmul@product^0,f,c
  4132  00159A  5014               	movf	(___tmul@multiplicand+1)^0,w,c
  4133  00159C  2217               	addwfc	(___tmul@product+1)^0,f,c
  4134  00159E  5015               	movf	(___tmul@multiplicand+2)^0,w,c
  4135  0015A0  2218               	addwfc	(___tmul@product+2)^0,f,c
  4136  0015A2                     l3536:
  4137  0015A2  90D8               	bcf	status,0,c
  4138  0015A4  3613               	rlcf	___tmul@multiplicand^0,f,c
  4139  0015A6  3614               	rlcf	(___tmul@multiplicand+1)^0,f,c
  4140  0015A8  3615               	rlcf	(___tmul@multiplicand+2)^0,f,c
  4141  0015AA  90D8               	bcf	status,0,c
  4142  0015AC  3212               	rrcf	(___tmul@multiplier+2)^0,f,c
  4143  0015AE  3211               	rrcf	(___tmul@multiplier+1)^0,f,c
  4144  0015B0  3210               	rrcf	___tmul@multiplier^0,f,c
  4145  0015B2  5010               	movf	___tmul@multiplier^0,w,c
  4146  0015B4  1011               	iorwf	(___tmul@multiplier+1)^0,w,c
  4147  0015B6  1012               	iorwf	(___tmul@multiplier+2)^0,w,c
  4148  0015B8  A4D8               	btfss	status,2,c
  4149  0015BA  EFE1  F00A         	goto	u2491
  4150  0015BE  EFE3  F00A         	goto	u2490
  4151  0015C2                     u2491:
  4152  0015C2  EFC4  F00A         	goto	l3532
  4153  0015C6                     u2490:
  4154  0015C6  C016  F010         	movff	___tmul@product,?___tmul
  4155  0015CA  C017  F011         	movff	___tmul@product+1,?___tmul+1
  4156  0015CE  C018  F012         	movff	___tmul@product+2,?___tmul+2
  4157  0015D2  0012               	return		;funcret
  4158  0015D4                     __end_of___tmul:
  4159                           	callstack 0
  4160                           
  4161 ;; *************** function ___atdiv *****************
  4162 ;; Defined at:
  4163 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\atdiv.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  dividend        3   24[COMRAM] m
  4166 ;;  divisor         3   27[COMRAM] m
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  quotient        3   32[COMRAM] m
  4169 ;;  sign            1   31[COMRAM] unsigned char 
  4170 ;;  counter         1   30[COMRAM] unsigned char 
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  3   24[COMRAM] m
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4180 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4181 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4183 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4184 ;;Total ram usage:       11 bytes
  4185 ;; Hardware stack levels used: 1
  4186 ;; Hardware stack levels required when called: 5
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_decide_color
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text29
  4195  000D84                     __ptext29:
  4196                           	callstack 0
  4197  000D84                     ___atdiv:
  4198                           	callstack 24
  4199  000D84  0E00               	movlw	0
  4200  000D86  6E20               	movwf	___atdiv@sign^0,c
  4201  000D88  BE1E               	btfsc	(___atdiv@divisor+2)^0,7,c
  4202  000D8A  EFCB  F006         	goto	u2500
  4203  000D8E  EFC9  F006         	goto	u2501
  4204  000D92                     u2501:
  4205  000D92  EFD3  F006         	goto	l3548
  4206  000D96                     u2500:
  4207  000D96  1E1E               	comf	(___atdiv@divisor+2)^0,f,c
  4208  000D98  1E1D               	comf	(___atdiv@divisor+1)^0,f,c
  4209  000D9A  6C1C               	negf	___atdiv@divisor^0,c
  4210  000D9C  0E00               	movlw	0
  4211  000D9E  221D               	addwfc	(___atdiv@divisor+1)^0,f,c
  4212  000DA0  221E               	addwfc	(___atdiv@divisor+2)^0,f,c
  4213  000DA2  0E01               	movlw	1
  4214  000DA4  6E20               	movwf	___atdiv@sign^0,c
  4215  000DA6                     l3548:
  4216  000DA6  BE1B               	btfsc	(___atdiv@dividend+2)^0,7,c
  4217  000DA8  EFDA  F006         	goto	u2510
  4218  000DAC  EFD8  F006         	goto	u2511
  4219  000DB0                     u2511:
  4220  000DB0  EFE2  F006         	goto	l3554
  4221  000DB4                     u2510:
  4222  000DB4  1E1B               	comf	(___atdiv@dividend+2)^0,f,c
  4223  000DB6  1E1A               	comf	(___atdiv@dividend+1)^0,f,c
  4224  000DB8  6C19               	negf	___atdiv@dividend^0,c
  4225  000DBA  0E00               	movlw	0
  4226  000DBC  221A               	addwfc	(___atdiv@dividend+1)^0,f,c
  4227  000DBE  221B               	addwfc	(___atdiv@dividend+2)^0,f,c
  4228  000DC0  0E01               	movlw	1
  4229  000DC2  1A20               	xorwf	___atdiv@sign^0,f,c
  4230  000DC4                     l3554:
  4231  000DC4  0E00               	movlw	0
  4232  000DC6  6E21               	movwf	___atdiv@quotient^0,c
  4233  000DC8  0E00               	movlw	0
  4234  000DCA  6E22               	movwf	(___atdiv@quotient+1)^0,c
  4235  000DCC  0E00               	movlw	0
  4236  000DCE  6E23               	movwf	(___atdiv@quotient+2)^0,c
  4237  000DD0  501C               	movf	___atdiv@divisor^0,w,c
  4238  000DD2  101D               	iorwf	(___atdiv@divisor+1)^0,w,c
  4239  000DD4  101E               	iorwf	(___atdiv@divisor+2)^0,w,c
  4240  000DD6  B4D8               	btfsc	status,2,c
  4241  000DD8  EFF0  F006         	goto	u2521
  4242  000DDC  EFF2  F006         	goto	u2520
  4243  000DE0                     u2521:
  4244  000DE0  EF21  F007         	goto	l3574
  4245  000DE4                     u2520:
  4246  000DE4  0E01               	movlw	1
  4247  000DE6  6E1F               	movwf	___atdiv@counter^0,c
  4248  000DE8  EFFB  F006         	goto	l3562
  4249  000DEC                     l3560:
  4250  000DEC  90D8               	bcf	status,0,c
  4251  000DEE  361C               	rlcf	___atdiv@divisor^0,f,c
  4252  000DF0  361D               	rlcf	(___atdiv@divisor+1)^0,f,c
  4253  000DF2  361E               	rlcf	(___atdiv@divisor+2)^0,f,c
  4254  000DF4  2A1F               	incf	___atdiv@counter^0,f,c
  4255  000DF6                     l3562:
  4256  000DF6  AE1E               	btfss	(___atdiv@divisor+2)^0,7,c
  4257  000DF8  EF00  F007         	goto	u2531
  4258  000DFC  EF02  F007         	goto	u2530
  4259  000E00                     u2531:
  4260  000E00  EFF6  F006         	goto	l3560
  4261  000E04                     u2530:
  4262  000E04                     l3564:
  4263  000E04  90D8               	bcf	status,0,c
  4264  000E06  3621               	rlcf	___atdiv@quotient^0,f,c
  4265  000E08  3622               	rlcf	(___atdiv@quotient+1)^0,f,c
  4266  000E0A  3623               	rlcf	(___atdiv@quotient+2)^0,f,c
  4267  000E0C  501C               	movf	___atdiv@divisor^0,w,c
  4268  000E0E  5C19               	subwf	___atdiv@dividend^0,w,c
  4269  000E10  501D               	movf	(___atdiv@divisor+1)^0,w,c
  4270  000E12  581A               	subwfb	(___atdiv@dividend+1)^0,w,c
  4271  000E14  501E               	movf	(___atdiv@divisor+2)^0,w,c
  4272  000E16  581B               	subwfb	(___atdiv@dividend+2)^0,w,c
  4273  000E18  A0D8               	btfss	status,0,c
  4274  000E1A  EF11  F007         	goto	u2541
  4275  000E1E  EF13  F007         	goto	u2540
  4276  000E22                     u2541:
  4277  000E22  EF1A  F007         	goto	l915
  4278  000E26                     u2540:
  4279  000E26  501C               	movf	___atdiv@divisor^0,w,c
  4280  000E28  5E19               	subwf	___atdiv@dividend^0,f,c
  4281  000E2A  501D               	movf	(___atdiv@divisor+1)^0,w,c
  4282  000E2C  5A1A               	subwfb	(___atdiv@dividend+1)^0,f,c
  4283  000E2E  501E               	movf	(___atdiv@divisor+2)^0,w,c
  4284  000E30  5A1B               	subwfb	(___atdiv@dividend+2)^0,f,c
  4285  000E32  8021               	bsf	___atdiv@quotient^0,0,c
  4286  000E34                     l915:
  4287  000E34  90D8               	bcf	status,0,c
  4288  000E36  321E               	rrcf	(___atdiv@divisor+2)^0,f,c
  4289  000E38  321D               	rrcf	(___atdiv@divisor+1)^0,f,c
  4290  000E3A  321C               	rrcf	___atdiv@divisor^0,f,c
  4291  000E3C  2E1F               	decfsz	___atdiv@counter^0,f,c
  4292  000E3E  EF02  F007         	goto	l3564
  4293  000E42                     l3574:
  4294  000E42  5020               	movf	___atdiv@sign^0,w,c
  4295  000E44  B4D8               	btfsc	status,2,c
  4296  000E46  EF27  F007         	goto	u2551
  4297  000E4A  EF29  F007         	goto	u2550
  4298  000E4E                     u2551:
  4299  000E4E  EF2F  F007         	goto	l3578
  4300  000E52                     u2550:
  4301  000E52  1E23               	comf	(___atdiv@quotient+2)^0,f,c
  4302  000E54  1E22               	comf	(___atdiv@quotient+1)^0,f,c
  4303  000E56  6C21               	negf	___atdiv@quotient^0,c
  4304  000E58  0E00               	movlw	0
  4305  000E5A  2222               	addwfc	(___atdiv@quotient+1)^0,f,c
  4306  000E5C  2223               	addwfc	(___atdiv@quotient+2)^0,f,c
  4307  000E5E                     l3578:
  4308  000E5E  C021  F019         	movff	___atdiv@quotient,?___atdiv
  4309  000E62  C022  F01A         	movff	___atdiv@quotient+1,?___atdiv+1
  4310  000E66  C023  F01B         	movff	___atdiv@quotient+2,?___atdiv+2
  4311  000E6A  0012               	return		;funcret
  4312  000E6C                     __end_of___atdiv:
  4313                           	callstack 0
  4314                           
  4315 ;; *************** function _LightOn *****************
  4316 ;; Defined at:
  4317 ;;		line 38 in file "LEDsButtons.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;		None
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      void 
  4324 ;; Registers used:
  4325 ;;		None
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4335 ;;Total ram usage:        0 bytes
  4336 ;; Hardware stack levels used: 1
  4337 ;; Hardware stack levels required when called: 5
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_interrupt_threshold_calibrate
  4342 ;;		_decide_color
  4343 ;;		_main
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text30
  4348  001DF0                     __ptext30:
  4349                           	callstack 0
  4350  001DF0                     _LightOn:
  4351                           	callstack 24
  4352  001DF0                     
  4353                           ;LEDsButtons.c: 39:     LATGbits.LATG0 = 1;
  4354  001DF0  807F               	bsf	127,0,c	;volatile
  4355                           
  4356                           ;LEDsButtons.c: 40:     LATEbits.LATE7 = 1;
  4357  001DF2  8E7D               	bsf	125,7,c	;volatile
  4358                           
  4359                           ;LEDsButtons.c: 41:     LATAbits.LATA3 = 1;
  4360  001DF4  8679               	bsf	121,3,c	;volatile
  4361  001DF6  0012               	return		;funcret
  4362  001DF8                     __end_of_LightOn:
  4363                           	callstack 0
  4364                           
  4365 ;; *************** function _LightOff *****************
  4366 ;; Defined at:
  4367 ;;		line 44 in file "LEDsButtons.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;		None
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;		None
  4372 ;; Return value:  Size  Location     Type
  4373 ;;                  1    wreg      void 
  4374 ;; Registers used:
  4375 ;;		None
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4385 ;;Total ram usage:        0 bytes
  4386 ;; Hardware stack levels used: 1
  4387 ;; Hardware stack levels required when called: 5
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_decide_color
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           	psect	text31
  4396  001DF8                     __ptext31:
  4397                           	callstack 0
  4398  001DF8                     _LightOff:
  4399                           	callstack 24
  4400  001DF8                     
  4401                           ;LEDsButtons.c: 45:     LATGbits.LATG0 = 0;
  4402  001DF8  907F               	bcf	127,0,c	;volatile
  4403                           
  4404                           ;LEDsButtons.c: 46:     LATEbits.LATE7 = 0;
  4405  001DFA  9E7D               	bcf	125,7,c	;volatile
  4406                           
  4407                           ;LEDsButtons.c: 47:     LATAbits.LATA3 = 0;
  4408  001DFC  9679               	bcf	121,3,c	;volatile
  4409  001DFE  0012               	return		;funcret
  4410  001E00                     __end_of_LightOff:
  4411                           	callstack 0
  4412                           
  4413 ;; *************** function _color_click_interrupt_off *****************
  4414 ;; Defined at:
  4415 ;;		line 34 in file "color.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;		None
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;		None
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  1    wreg      void 
  4422 ;; Registers used:
  4423 ;;		wreg, status,2, status,0, cstack
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4433 ;;Total ram usage:        0 bytes
  4434 ;; Hardware stack levels used: 1
  4435 ;; Hardware stack levels required when called: 8
  4436 ;; This function calls:
  4437 ;;		_color_int_clear
  4438 ;;		_color_writetoaddr
  4439 ;; This function is called by:
  4440 ;;		_main
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text32
  4445  001D74                     __ptext32:
  4446                           	callstack 0
  4447  001D74                     _color_click_interrupt_off:
  4448                           	callstack 22
  4449  001D74                     
  4450                           ;color.c: 35:     color_int_clear();
  4451  001D74  ECA4  F00E         	call	_color_int_clear	;wreg free
  4452                           
  4453                           ;color.c: 36:     color_writetoaddr(0x00,0x03);
  4454  001D78  0E03               	movlw	3
  4455  001D7A  6E12               	movwf	color_writetoaddr@value^0,c
  4456  001D7C  0E00               	movlw	0
  4457  001D7E  EC48  F00E         	call	_color_writetoaddr
  4458                           
  4459                           ;color.c: 37:     color_int_clear();
  4460  001D82  ECA4  F00E         	call	_color_int_clear	;wreg free
  4461  001D86  0012               	return		;funcret
  4462  001D88                     __end_of_color_click_interrupt_off:
  4463                           	callstack 0
  4464                           
  4465 ;; *************** function _color_click_init *****************
  4466 ;; Defined at:
  4467 ;;		line 8 in file "color.c"
  4468 ;; Parameters:    Size  Location     Type
  4469 ;;		None
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;		None
  4472 ;; Return value:  Size  Location     Type
  4473 ;;                  1    wreg      void 
  4474 ;; Registers used:
  4475 ;;		wreg, status,2, status,0, cstack
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4483 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4484 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4485 ;;Total ram usage:        1 bytes
  4486 ;; Hardware stack levels used: 1
  4487 ;; Hardware stack levels required when called: 8
  4488 ;; This function calls:
  4489 ;;		_I2C_2_Master_Init
  4490 ;;		_color_writetoaddr
  4491 ;; This function is called by:
  4492 ;;		_main
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           	psect	text33
  4497  001A38                     __ptext33:
  4498                           	callstack 0
  4499  001A38                     _color_click_init:
  4500                           	callstack 22
  4501  001A38                     
  4502                           ;color.c: 10:     I2C_2_Master_Init();
  4503  001A38  ECD7  F00D         	call	_I2C_2_Master_Init	;wreg free
  4504  001A3C                     
  4505                           ;color.c: 11:     color_writetoaddr(0x00, 0x01);
  4506  001A3C  0E01               	movlw	1
  4507  001A3E  6E12               	movwf	color_writetoaddr@value^0,c
  4508  001A40  0E00               	movlw	0
  4509  001A42  EC48  F00E         	call	_color_writetoaddr
  4510  001A46                     
  4511                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4512  001A46  0E3F               	movlw	63
  4513  001A48  6E14               	movwf	??_color_click_init^0,c
  4514  001A4A  0E55               	movlw	85
  4515  001A4C                     u3167:
  4516  001A4C  2EE8               	decfsz	wreg,f,c
  4517  001A4E  D7FE               	bra	u3167
  4518  001A50  2E14               	decfsz	??_color_click_init^0,f,c
  4519  001A52  D7FC               	bra	u3167
  4520  001A54  F000               	nop	
  4521  001A56                     
  4522                           ;color.c: 13:     color_writetoaddr(0x00, 0x03);
  4523  001A56  0E03               	movlw	3
  4524  001A58  6E12               	movwf	color_writetoaddr@value^0,c
  4525  001A5A  0E00               	movlw	0
  4526  001A5C  EC48  F00E         	call	_color_writetoaddr
  4527  001A60                     
  4528                           ;color.c: 14:     color_writetoaddr(0x01, 0xD5);
  4529  001A60  0ED5               	movlw	213
  4530  001A62  6E12               	movwf	color_writetoaddr@value^0,c
  4531  001A64  0E01               	movlw	1
  4532  001A66  EC48  F00E         	call	_color_writetoaddr
  4533  001A6A                     
  4534                           ;color.c: 15:     color_writetoaddr(0x0F, 0x00);
  4535  001A6A  0E00               	movlw	0
  4536  001A6C  6E12               	movwf	color_writetoaddr@value^0,c
  4537  001A6E  0E0F               	movlw	15
  4538  001A70  EC48  F00E         	call	_color_writetoaddr
  4539  001A74  0012               	return		;funcret
  4540  001A76                     __end_of_color_click_init:
  4541                           	callstack 0
  4542                           
  4543 ;; *************** function _I2C_2_Master_Init *****************
  4544 ;; Defined at:
  4545 ;;		line 5 in file "i2c.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;		None
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;		None
  4550 ;; Return value:  Size  Location     Type
  4551 ;;                  1    wreg      void 
  4552 ;; Registers used:
  4553 ;;		wreg, status,2
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4563 ;;Total ram usage:        0 bytes
  4564 ;; Hardware stack levels used: 1
  4565 ;; Hardware stack levels required when called: 5
  4566 ;; This function calls:
  4567 ;;		Nothing
  4568 ;; This function is called by:
  4569 ;;		_color_click_init
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           	psect	text34
  4574  001BAE                     __ptext34:
  4575                           	callstack 0
  4576  001BAE                     _I2C_2_Master_Init:
  4577                           	callstack 24
  4578  001BAE                     
  4579                           ;i2c.c: 6:   SSP2CON1bits.SSPM= 0b1000;
  4580  001BAE  010E               	movlb	14	; () banked
  4581  001BB0  51D9               	movf	217,w,b	;volatile
  4582  001BB2  0BF0               	andlw	-16
  4583  001BB4  0908               	iorlw	8
  4584  001BB6  6FD9               	movwf	217,b	;volatile
  4585  001BB8                     
  4586                           ; BSR set to: 14
  4587                           ;i2c.c: 7:   SSP2CON1bits.SSPEN = 1;
  4588  001BB8  8BD9               	bsf	217,5,b	;volatile
  4589                           
  4590                           ;i2c.c: 8:   SSP2ADD = (64000000/(4*100000))-1;
  4591  001BBA  0E9F               	movlw	159
  4592  001BBC  6FD6               	movwf	214,b	;volatile
  4593  001BBE                     
  4594                           ; BSR set to: 14
  4595                           ;i2c.c: 11:   TRISDbits.TRISD5 = 1;
  4596  001BBE  8A84               	bsf	132,5,c	;volatile
  4597  001BC0                     
  4598                           ; BSR set to: 14
  4599                           ;i2c.c: 12:   TRISDbits.TRISD6 = 1;
  4600  001BC0  8C84               	bsf	132,6,c	;volatile
  4601  001BC2                     
  4602                           ; BSR set to: 14
  4603                           ;i2c.c: 13:   ANSELDbits.ANSELD5=0;
  4604  001BC2  9BA7               	bcf	167,5,b	;volatile
  4605  001BC4                     
  4606                           ; BSR set to: 14
  4607                           ;i2c.c: 14:   ANSELDbits.ANSELD6=0;
  4608  001BC4  9DA7               	bcf	167,6,b	;volatile
  4609                           
  4610                           ;i2c.c: 15:   SSP2DATPPS=0x1D;
  4611  001BC6  0E1D               	movlw	29
  4612  001BC8  6F1D               	movwf	29,b	;volatile
  4613                           
  4614                           ;i2c.c: 16:   SSP2CLKPPS=0x1E;
  4615  001BCA  0E1E               	movlw	30
  4616  001BCC  6F1C               	movwf	28,b	;volatile
  4617                           
  4618                           ;i2c.c: 17:   RD5PPS=0x1C;
  4619  001BCE  0E1C               	movlw	28
  4620  001BD0  6F6F               	movwf	111,b	;volatile
  4621                           
  4622                           ;i2c.c: 18:   RD6PPS=0x1B;
  4623  001BD2  0E1B               	movlw	27
  4624  001BD4  6F70               	movwf	112,b	;volatile
  4625  001BD6                     
  4626                           ; BSR set to: 14
  4627  001BD6  0012               	return		;funcret
  4628  001BD8                     __end_of_I2C_2_Master_Init:
  4629                           	callstack 0
  4630                           
  4631 ;; *************** function _Timer0_init *****************
  4632 ;; Defined at:
  4633 ;;		line 5 in file "timers.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;		None
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;		None
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  1    wreg      void 
  4640 ;; Registers used:
  4641 ;;		wreg, status,2
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4651 ;;Total ram usage:        0 bytes
  4652 ;; Hardware stack levels used: 1
  4653 ;; Hardware stack levels required when called: 5
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_main
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           	psect	text35
  4662  001C70                     __ptext35:
  4663                           	callstack 0
  4664  001C70                     _Timer0_init:
  4665                           	callstack 25
  4666  001C70                     
  4667                           ;timers.c: 6:     T0CON1bits.T0CS = 0b010;
  4668  001C70  50D6               	movf	214,w,c	;volatile
  4669  001C72  0B1F               	andlw	-225
  4670  001C74  0940               	iorlw	64
  4671  001C76  6ED6               	movwf	214,c	;volatile
  4672  001C78                     
  4673                           ;timers.c: 7:     T0CON1bits.T0ASYNC = 1;
  4674  001C78  88D6               	bsf	214,4,c	;volatile
  4675                           
  4676                           ;timers.c: 8:     T0CON1bits.T0CKPS = 0b1110 ;
  4677  001C7A  50D6               	movf	214,w,c	;volatile
  4678  001C7C  0BF0               	andlw	-16
  4679  001C7E  090E               	iorlw	14
  4680  001C80  6ED6               	movwf	214,c	;volatile
  4681  001C82                     
  4682                           ;timers.c: 9:     T0CON0bits.T016BIT = 1;
  4683  001C82  88D5               	bsf	213,4,c	;volatile
  4684                           
  4685                           ;timers.c: 10:     TMR0H = 0;
  4686  001C84  0E00               	movlw	0
  4687  001C86  6ED4               	movwf	212,c	;volatile
  4688                           
  4689                           ;timers.c: 11:     TMR0L = 0;
  4690  001C88  0E00               	movlw	0
  4691  001C8A  6ED3               	movwf	211,c	;volatile
  4692  001C8C                     
  4693                           ;timers.c: 12:     T0CON0bits.T0EN=1;
  4694  001C8C  8ED5               	bsf	213,7,c	;volatile
  4695  001C8E  0012               	return		;funcret
  4696  001C90                     __end_of_Timer0_init:
  4697                           	callstack 0
  4698                           
  4699 ;; *************** function _ResetTMR0 *****************
  4700 ;; Defined at:
  4701 ;;		line 23 in file "timers.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;		None
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;		None
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      void 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4719 ;;Total ram usage:        0 bytes
  4720 ;; Hardware stack levels used: 1
  4721 ;; Hardware stack levels required when called: 5
  4722 ;; This function calls:
  4723 ;;		Nothing
  4724 ;; This function is called by:
  4725 ;;		_main
  4726 ;; This function uses a non-reentrant model
  4727 ;;
  4728                           
  4729                           	psect	text36
  4730  001DBE                     __ptext36:
  4731                           	callstack 0
  4732  001DBE                     _ResetTMR0:
  4733                           	callstack 25
  4734  001DBE                     
  4735                           ;timers.c: 24:     TMR0H = 0;
  4736  001DBE  0E00               	movlw	0
  4737  001DC0  6ED4               	movwf	212,c	;volatile
  4738                           
  4739                           ;timers.c: 25:     TMR0L = 0;
  4740  001DC2  0E00               	movlw	0
  4741  001DC4  6ED3               	movwf	211,c	;volatile
  4742  001DC6  0012               	return		;funcret
  4743  001DC8                     __end_of_ResetTMR0:
  4744                           	callstack 0
  4745                           
  4746 ;; *************** function _LEDs_Buttons_init *****************
  4747 ;; Defined at:
  4748 ;;		line 5 in file "LEDsButtons.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;		None
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;		None
  4753 ;; Return value:  Size  Location     Type
  4754 ;;                  1    wreg      void 
  4755 ;; Registers used:
  4756 ;;		None
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4766 ;;Total ram usage:        0 bytes
  4767 ;; Hardware stack levels used: 1
  4768 ;; Hardware stack levels required when called: 5
  4769 ;; This function calls:
  4770 ;;		Nothing
  4771 ;; This function is called by:
  4772 ;;		_main
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text37
  4777  001B1E                     __ptext37:
  4778                           	callstack 0
  4779  001B1E                     _LEDs_Buttons_init:
  4780                           	callstack 25
  4781  001B1E                     
  4782                           ;LEDsButtons.c: 7:     TRISGbits.TRISG0 = 0;
  4783  001B1E  9087               	bcf	135,0,c	;volatile
  4784                           
  4785                           ;LEDsButtons.c: 8:     TRISEbits.TRISE7 = 0;
  4786  001B20  9E85               	bcf	133,7,c	;volatile
  4787                           
  4788                           ;LEDsButtons.c: 9:     TRISAbits.TRISA3 = 0;
  4789  001B22  9681               	bcf	129,3,c	;volatile
  4790                           
  4791                           ;LEDsButtons.c: 10:     TRISDbits.TRISD7 = 0;
  4792  001B24  9E84               	bcf	132,7,c	;volatile
  4793                           
  4794                           ;LEDsButtons.c: 11:     TRISHbits.TRISH3 = 0;
  4795  001B26  9688               	bcf	136,3,c	;volatile
  4796                           
  4797                           ;LEDsButtons.c: 12:     TRISHbits.TRISH1 = 0;
  4798  001B28  9288               	bcf	136,1,c	;volatile
  4799                           
  4800                           ;LEDsButtons.c: 13:     TRISDbits.TRISD3 = 0;
  4801  001B2A  9684               	bcf	132,3,c	;volatile
  4802                           
  4803                           ;LEDsButtons.c: 14:     TRISDbits.TRISD4 = 0;
  4804  001B2C  9884               	bcf	132,4,c	;volatile
  4805                           
  4806                           ;LEDsButtons.c: 15:     TRISHbits.TRISH0 = 0;
  4807  001B2E  9088               	bcf	136,0,c	;volatile
  4808                           
  4809                           ;LEDsButtons.c: 16:     TRISFbits.TRISF0 = 0;
  4810  001B30  9086               	bcf	134,0,c	;volatile
  4811                           
  4812                           ;LEDsButtons.c: 19:     LATGbits.LATG0 = 0;
  4813  001B32  907F               	bcf	127,0,c	;volatile
  4814                           
  4815                           ;LEDsButtons.c: 20:     LATEbits.LATE7 = 0;
  4816  001B34  9E7D               	bcf	125,7,c	;volatile
  4817                           
  4818                           ;LEDsButtons.c: 21:     LATAbits.LATA3 = 0;
  4819  001B36  9679               	bcf	121,3,c	;volatile
  4820                           
  4821                           ;LEDsButtons.c: 22:     LATDbits.LATD7 = 0;
  4822  001B38  9E7C               	bcf	124,7,c	;volatile
  4823                           
  4824                           ;LEDsButtons.c: 23:     LATHbits.LATH3 = 0;
  4825  001B3A  9680               	bcf	128,3,c	;volatile
  4826                           
  4827                           ;LEDsButtons.c: 24:     LATHbits.LATH1 = 0;
  4828  001B3C  9280               	bcf	128,1,c	;volatile
  4829                           
  4830                           ;LEDsButtons.c: 25:     LATDbits.LATD3 = 0;
  4831  001B3E  967C               	bcf	124,3,c	;volatile
  4832                           
  4833                           ;LEDsButtons.c: 26:     LATDbits.LATD4 = 0;
  4834  001B40  987C               	bcf	124,4,c	;volatile
  4835                           
  4836                           ;LEDsButtons.c: 27:     LATFbits.LATF0 = 0;
  4837  001B42  907E               	bcf	126,0,c	;volatile
  4838                           
  4839                           ;LEDsButtons.c: 28:     LATHbits.LATH0 = 0;
  4840  001B44  9080               	bcf	128,0,c	;volatile
  4841                           
  4842                           ;LEDsButtons.c: 31:     TRISFbits.TRISF2=1;
  4843  001B46  8486               	bsf	134,2,c	;volatile
  4844                           
  4845                           ;LEDsButtons.c: 32:     ANSELFbits.ANSELF2=0;
  4846  001B48  010E               	movlb	14	; () banked
  4847  001B4A  95B4               	bcf	180,2,b	;volatile
  4848                           
  4849                           ;LEDsButtons.c: 33:     TRISFbits.TRISF3=1;
  4850  001B4C  8686               	bsf	134,3,c	;volatile
  4851                           
  4852                           ;LEDsButtons.c: 34:     ANSELFbits.ANSELF3=0;
  4853  001B4E  97B4               	bcf	180,3,b	;volatile
  4854  001B50                     
  4855                           ; BSR set to: 14
  4856  001B50  0012               	return		;funcret
  4857  001B52                     __end_of_LEDs_Buttons_init:
  4858                           	callstack 0
  4859                           
  4860 ;; *************** function _Interrupts_init *****************
  4861 ;; Defined at:
  4862 ;;		line 4 in file "interrupts.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;		None
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;		None
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4880 ;;Total ram usage:        0 bytes
  4881 ;; Hardware stack levels used: 1
  4882 ;; Hardware stack levels required when called: 9
  4883 ;; This function calls:
  4884 ;;		_color_click_interrupt_init
  4885 ;; This function is called by:
  4886 ;;		_main
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text38
  4891  001D0C                     __ptext38:
  4892                           	callstack 0
  4893  001D0C                     _Interrupts_init:
  4894                           	callstack 21
  4895  001D0C                     
  4896                           ;interrupts.c: 6:     INTCONbits.IPEN = 1;
  4897  001D0C  8AF2               	bsf	242,5,c	;volatile
  4898                           
  4899                           ;interrupts.c: 8:     PIE0bits.TMR0IE = 1;
  4900  001D0E  010E               	movlb	14	; () banked
  4901  001D10  8B29               	bsf	41,5,b	;volatile
  4902                           
  4903                           ;interrupts.c: 9:     IPR0bits.TMR0IP = 1;
  4904  001D12  8B1F               	bsf	31,5,b	;volatile
  4905                           
  4906                           ;interrupts.c: 12:     TRISBbits.TRISB0 = 1;
  4907  001D14  8082               	bsf	130,0,c	;volatile
  4908                           
  4909                           ;interrupts.c: 13:     ANSELBbits.ANSELB0 = 0;
  4910  001D16  919A               	bcf	154,0,b	;volatile
  4911                           
  4912                           ;interrupts.c: 14:     PIE0bits.INT0IE = 1;
  4913  001D18  8129               	bsf	41,0,b	;volatile
  4914                           
  4915                           ;interrupts.c: 15:     PIR0bits.INT0IF = 0;
  4916  001D1A  9133               	bcf	51,0,b	;volatile
  4917                           
  4918                           ;interrupts.c: 16:     INTCONbits.INT0EDG = 0;
  4919  001D1C  90F2               	bcf	242,0,c	;volatile
  4920                           
  4921                           ;interrupts.c: 17:     IPR0bits.INT0IP = 1;
  4922  001D1E  811F               	bsf	31,0,b	;volatile
  4923  001D20                     
  4924                           ; BSR set to: 14
  4925                           ;interrupts.c: 18:     color_click_interrupt_init();
  4926  001D20  ECD8  F00B         	call	_color_click_interrupt_init	;wreg free
  4927  001D24                     
  4928                           ;interrupts.c: 21:     INTCONbits.PEIE = 1;
  4929  001D24  8CF2               	bsf	242,6,c	;volatile
  4930  001D26                     
  4931                           ;interrupts.c: 22:     INTCONbits.GIE = 1;
  4932  001D26  8EF2               	bsf	242,7,c	;volatile
  4933  001D28  0012               	return		;funcret
  4934  001D2A                     __end_of_Interrupts_init:
  4935                           	callstack 0
  4936                           
  4937 ;; *************** function _color_click_interrupt_init *****************
  4938 ;; Defined at:
  4939 ;;		line 19 in file "color.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		wreg, status,2, status,0, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4957 ;;Total ram usage:        0 bytes
  4958 ;; Hardware stack levels used: 1
  4959 ;; Hardware stack levels required when called: 8
  4960 ;; This function calls:
  4961 ;;		_color_int_clear
  4962 ;;		_color_writetoaddr
  4963 ;; This function is called by:
  4964 ;;		_main
  4965 ;;		_Interrupts_init
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           	psect	text39
  4970  0017B0                     __ptext39:
  4971                           	callstack 0
  4972  0017B0                     _color_click_interrupt_init:
  4973                           	callstack 22
  4974  0017B0                     
  4975                           ;color.c: 21:     color_int_clear();
  4976  0017B0  ECA4  F00E         	call	_color_int_clear	;wreg free
  4977                           
  4978                           ;color.c: 22:     color_writetoaddr(0x00, 0x13);
  4979  0017B4  0E13               	movlw	19
  4980  0017B6  6E12               	movwf	color_writetoaddr@value^0,c
  4981  0017B8  0E00               	movlw	0
  4982  0017BA  EC48  F00E         	call	_color_writetoaddr
  4983                           
  4984                           ;color.c: 24:     color_writetoaddr(0x04, int_low & 0xFF);
  4985  0017BE  C04E  F012         	movff	_int_low,color_writetoaddr@value
  4986  0017C2  0E04               	movlw	4
  4987  0017C4  EC48  F00E         	call	_color_writetoaddr
  4988                           
  4989                           ;color.c: 25:     color_writetoaddr(0x05, int_low >> 8);
  4990  0017C8  504F               	movf	(_int_low+1)^0,w,c
  4991  0017CA  6E12               	movwf	color_writetoaddr@value^0,c
  4992  0017CC  0E05               	movlw	5
  4993  0017CE  EC48  F00E         	call	_color_writetoaddr
  4994                           
  4995                           ;color.c: 26:     color_writetoaddr(0x06, int_high & 0xFF);
  4996  0017D2  C047  F012         	movff	_int_high,color_writetoaddr@value
  4997  0017D6  0E06               	movlw	6
  4998  0017D8  EC48  F00E         	call	_color_writetoaddr
  4999                           
  5000                           ;color.c: 27:     color_writetoaddr(0x07, int_high >>8);
  5001  0017DC  5048               	movf	(_int_high+1)^0,w,c
  5002  0017DE  6E12               	movwf	color_writetoaddr@value^0,c
  5003  0017E0  0E07               	movlw	7
  5004  0017E2  EC48  F00E         	call	_color_writetoaddr
  5005                           
  5006                           ;color.c: 28:     color_writetoaddr(0x0C, 0b0001);
  5007  0017E6  0E01               	movlw	1
  5008  0017E8  6E12               	movwf	color_writetoaddr@value^0,c
  5009  0017EA  0E0C               	movlw	12
  5010  0017EC  EC48  F00E         	call	_color_writetoaddr
  5011                           
  5012                           ;color.c: 29:     color_int_clear();
  5013  0017F0  ECA4  F00E         	call	_color_int_clear	;wreg free
  5014  0017F4                     
  5015                           ;color.c: 30:     LATDbits.LATD4 = 0;
  5016  0017F4  987C               	bcf	124,4,c	;volatile
  5017  0017F6  0012               	return		;funcret
  5018  0017F8                     __end_of_color_click_interrupt_init:
  5019                           	callstack 0
  5020                           
  5021 ;; *************** function _color_writetoaddr *****************
  5022 ;; Defined at:
  5023 ;;		line 79 in file "color.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;  address         1    wreg     unsigned char 
  5026 ;;  value           1   17[COMRAM] unsigned char 
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;  address         1   18[COMRAM] unsigned char 
  5029 ;; Return value:  Size  Location     Type
  5030 ;;                  1    wreg      void 
  5031 ;; Registers used:
  5032 ;;		wreg, status,2, status,0, cstack
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5038 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5039 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5041 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5042 ;;Total ram usage:        2 bytes
  5043 ;; Hardware stack levels used: 1
  5044 ;; Hardware stack levels required when called: 7
  5045 ;; This function calls:
  5046 ;;		_I2C_2_Master_Start
  5047 ;;		_I2C_2_Master_Stop
  5048 ;;		_I2C_2_Master_Write
  5049 ;; This function is called by:
  5050 ;;		_color_click_init
  5051 ;;		_color_click_interrupt_init
  5052 ;;		_color_click_interrupt_off
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text40
  5057  001C90                     __ptext40:
  5058                           	callstack 0
  5059  001C90                     _color_writetoaddr:
  5060                           	callstack 22
  5061                           
  5062                           ;incstack = 0
  5063                           ;color_writetoaddr@address stored from wreg
  5064  001C90  6E13               	movwf	color_writetoaddr@address^0,c
  5065  001C92                     
  5066                           ;color.c: 80:     I2C_2_Master_Start();
  5067  001C92  ECE9  F00E         	call	_I2C_2_Master_Start	;wreg free
  5068                           
  5069                           ;color.c: 81:     I2C_2_Master_Write(0x52 | 0x00);
  5070  001C96  0E52               	movlw	82
  5071  001C98  ECCE  F00E         	call	_I2C_2_Master_Write
  5072                           
  5073                           ;color.c: 82:     I2C_2_Master_Write(0x80 | address);
  5074  001C9C  5013               	movf	color_writetoaddr@address^0,w,c
  5075  001C9E  0980               	iorlw	128
  5076  001CA0  ECCE  F00E         	call	_I2C_2_Master_Write
  5077                           
  5078                           ;color.c: 83:     I2C_2_Master_Write(value);
  5079  001CA4  5012               	movf	color_writetoaddr@value^0,w,c
  5080  001CA6  ECCE  F00E         	call	_I2C_2_Master_Write
  5081                           
  5082                           ;color.c: 84:     I2C_2_Master_Stop();
  5083  001CAA  ECE4  F00E         	call	_I2C_2_Master_Stop	;wreg free
  5084  001CAE  0012               	return		;funcret
  5085  001CB0                     __end_of_color_writetoaddr:
  5086                           	callstack 0
  5087                           
  5088 ;; *************** function _color_int_clear *****************
  5089 ;; Defined at:
  5090 ;;		line 41 in file "color.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      void 
  5097 ;; Registers used:
  5098 ;;		wreg, status,2, status,0, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5108 ;;Total ram usage:        0 bytes
  5109 ;; Hardware stack levels used: 1
  5110 ;; Hardware stack levels required when called: 7
  5111 ;; This function calls:
  5112 ;;		_I2C_2_Master_Start
  5113 ;;		_I2C_2_Master_Stop
  5114 ;;		_I2C_2_Master_Write
  5115 ;; This function is called by:
  5116 ;;		_color_click_interrupt_init
  5117 ;;		_color_click_interrupt_off
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text41
  5122  001D48                     __ptext41:
  5123                           	callstack 0
  5124  001D48                     _color_int_clear:
  5125                           	callstack 22
  5126  001D48                     
  5127                           ;color.c: 42:     I2C_2_Master_Start();
  5128  001D48  ECE9  F00E         	call	_I2C_2_Master_Start	;wreg free
  5129                           
  5130                           ;color.c: 43:  I2C_2_Master_Write(0x52 | 0x00);
  5131  001D4C  0E52               	movlw	82
  5132  001D4E  ECCE  F00E         	call	_I2C_2_Master_Write
  5133                           
  5134                           ;color.c: 44:     I2C_2_Master_Write(0xE6);
  5135  001D52  0EE6               	movlw	230
  5136  001D54  ECCE  F00E         	call	_I2C_2_Master_Write
  5137                           
  5138                           ;color.c: 45:     I2C_2_Master_Stop();
  5139  001D58  ECE4  F00E         	call	_I2C_2_Master_Stop	;wreg free
  5140  001D5C  0012               	return		;funcret
  5141  001D5E                     __end_of_color_int_clear:
  5142                           	callstack 0
  5143                           
  5144 ;; *************** function _I2C_2_Master_Write *****************
  5145 ;; Defined at:
  5146 ;;		line 45 in file "i2c.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  data_byte       1    wreg     unsigned char 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  data_byte       1   16[COMRAM] unsigned char 
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  1    wreg      void 
  5153 ;; Registers used:
  5154 ;;		wreg, status,2, status,0, cstack
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5163 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5164 ;;Total ram usage:        1 bytes
  5165 ;; Hardware stack levels used: 1
  5166 ;; Hardware stack levels required when called: 6
  5167 ;; This function calls:
  5168 ;;		_I2C_2_Master_Idle
  5169 ;; This function is called by:
  5170 ;;		_color_int_clear
  5171 ;;		_color_writetoaddr
  5172 ;;		_color_read
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           	psect	text42
  5177  001D9C                     __ptext42:
  5178                           	callstack 0
  5179  001D9C                     _I2C_2_Master_Write:
  5180                           	callstack 22
  5181                           
  5182                           ;incstack = 0
  5183                           ;I2C_2_Master_Write@data_byte stored from wreg
  5184  001D9C  6E11               	movwf	I2C_2_Master_Write@data_byte^0,c
  5185  001D9E                     
  5186                           ;i2c.c: 46:   I2C_2_Master_Idle();
  5187  001D9E  ECEC  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5188  001DA2                     
  5189                           ;i2c.c: 47:   SSP2BUF = data_byte;
  5190  001DA2  C011  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5191  001DA6  0012               	return		;funcret
  5192  001DA8                     __end_of_I2C_2_Master_Write:
  5193                           	callstack 0
  5194                           
  5195 ;; *************** function _I2C_2_Master_Stop *****************
  5196 ;; Defined at:
  5197 ;;		line 39 in file "i2c.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;		None
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;		None
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      void 
  5204 ;; Registers used:
  5205 ;;		wreg, status,2, status,0, cstack
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5215 ;;Total ram usage:        0 bytes
  5216 ;; Hardware stack levels used: 1
  5217 ;; Hardware stack levels required when called: 6
  5218 ;; This function calls:
  5219 ;;		_I2C_2_Master_Idle
  5220 ;; This function is called by:
  5221 ;;		_color_int_clear
  5222 ;;		_color_writetoaddr
  5223 ;;		_color_read
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           	psect	text43
  5228  001DC8                     __ptext43:
  5229                           	callstack 0
  5230  001DC8                     _I2C_2_Master_Stop:
  5231                           	callstack 22
  5232  001DC8                     
  5233                           ;i2c.c: 40:   I2C_2_Master_Idle();
  5234  001DC8  ECEC  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5235  001DCC                     
  5236                           ;i2c.c: 41:   SSP2CON2bits.PEN = 1;
  5237  001DCC  010E               	movlb	14	; () banked
  5238  001DCE  85DA               	bsf	218,2,b	;volatile
  5239  001DD0                     
  5240                           ; BSR set to: 14
  5241  001DD0  0012               	return		;funcret
  5242  001DD2                     __end_of_I2C_2_Master_Stop:
  5243                           	callstack 0
  5244                           
  5245 ;; *************** function _I2C_2_Master_Start *****************
  5246 ;; Defined at:
  5247 ;;		line 27 in file "i2c.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, status,2, status,0, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5265 ;;Total ram usage:        0 bytes
  5266 ;; Hardware stack levels used: 1
  5267 ;; Hardware stack levels required when called: 6
  5268 ;; This function calls:
  5269 ;;		_I2C_2_Master_Idle
  5270 ;; This function is called by:
  5271 ;;		_color_int_clear
  5272 ;;		_color_writetoaddr
  5273 ;;		_color_read
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           	psect	text44
  5278  001DD2                     __ptext44:
  5279                           	callstack 0
  5280  001DD2                     _I2C_2_Master_Start:
  5281                           	callstack 22
  5282  001DD2                     
  5283                           ;i2c.c: 28:   I2C_2_Master_Idle();
  5284  001DD2  ECEC  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5285  001DD6                     
  5286                           ;i2c.c: 29:   SSP2CON2bits.SEN = 1;
  5287  001DD6  010E               	movlb	14	; () banked
  5288  001DD8  81DA               	bsf	218,0,b	;volatile
  5289  001DDA                     
  5290                           ; BSR set to: 14
  5291  001DDA  0012               	return		;funcret
  5292  001DDC                     __end_of_I2C_2_Master_Start:
  5293                           	callstack 0
  5294                           
  5295 ;; *************** function _I2C_2_Master_Idle *****************
  5296 ;; Defined at:
  5297 ;;		line 22 in file "i2c.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;		None
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;		None
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  1    wreg      void 
  5304 ;; Registers used:
  5305 ;;		wreg, status,2, status,0
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5313 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5314 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5315 ;;Total ram usage:        1 bytes
  5316 ;; Hardware stack levels used: 1
  5317 ;; Hardware stack levels required when called: 5
  5318 ;; This function calls:
  5319 ;;		Nothing
  5320 ;; This function is called by:
  5321 ;;		_I2C_2_Master_Start
  5322 ;;		_I2C_2_Master_RepStart
  5323 ;;		_I2C_2_Master_Stop
  5324 ;;		_I2C_2_Master_Write
  5325 ;;		_I2C_2_Master_Read
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text45
  5330  001BD8                     __ptext45:
  5331                           	callstack 0
  5332  001BD8                     _I2C_2_Master_Idle:
  5333                           	callstack 22
  5334  001BD8                     l147:
  5335  001BD8  010E               	movlb	14	; () banked
  5336  001BDA  B5D8               	btfsc	216,2,b	;volatile
  5337  001BDC  EFF2  F00D         	goto	u2261
  5338  001BE0  EFF4  F00D         	goto	u2260
  5339  001BE4                     u2261:
  5340  001BE4  EFEC  F00D         	goto	l147
  5341  001BE8                     u2260:
  5342  001BE8                     
  5343                           ; BSR set to: 14
  5344  001BE8  CEDA F010          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5345  001BEC  0E1F               	movlw	31
  5346  001BEE  1610               	andwf	??_I2C_2_Master_Idle^0,f,c
  5347  001BF0  A4D8               	btfss	status,2,c
  5348  001BF2  EFFD  F00D         	goto	u2271
  5349  001BF6  EFFF  F00D         	goto	u2270
  5350  001BFA                     u2271:
  5351  001BFA  EFEC  F00D         	goto	l147
  5352  001BFE                     u2270:
  5353  001BFE                     
  5354                           ; BSR set to: 14
  5355  001BFE  0012               	return		;funcret
  5356  001C00                     __end_of_I2C_2_Master_Idle:
  5357                           	callstack 0
  5358                           
  5359 ;; *************** function _CalibrateTurns *****************
  5360 ;; Defined at:
  5361 ;;		line 184 in file "dc_motor.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  mL              2   64[COMRAM] PTR struct DC_motor
  5364 ;;		 -> main@motorL(9), 
  5365 ;;  mR              2   66[COMRAM] PTR struct DC_motor
  5366 ;;		 -> main@motorR(9), 
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;  k               1    0[BANK0 ] unsigned char 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  1    wreg      void 
  5371 ;; Registers used:
  5372 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5378 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5380 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5381 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5382 ;;Total ram usage:        7 bytes
  5383 ;; Hardware stack levels used: 1
  5384 ;; Hardware stack levels required when called: 10
  5385 ;; This function calls:
  5386 ;;		_LightsToggle
  5387 ;;		_PrepareForTurn
  5388 ;;		_TurnLeft
  5389 ;; This function is called by:
  5390 ;;		_main
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           	psect	text46
  5395  000A5C                     __ptext46:
  5396                           	callstack 0
  5397  000A5C                     _CalibrateTurns:
  5398                           	callstack 20
  5399  000A5C                     
  5400                           ;dc_motor.c: 186:     LightsToggle();
  5401  000A5C  ECC0  F009         	call	_LightsToggle	;wreg free
  5402                           
  5403                           ;dc_motor.c: 188:     while(!(!PORTFbits.RF3 && !PORTFbits.RF2)){
  5404  000A60  EFA9  F005         	goto	l3734
  5405  000A64                     l3696:
  5406                           
  5407                           ;dc_motor.c: 190:         PrepareForTurn(mL,mR);
  5408  000A64  C041  F039         	movff	CalibrateTurns@mL,PrepareForTurn@mL
  5409  000A68  C042  F03A         	movff	CalibrateTurns@mL+1,PrepareForTurn@mL+1
  5410  000A6C  C043  F03B         	movff	CalibrateTurns@mR,PrepareForTurn@mR
  5411  000A70  C044  F03C         	movff	CalibrateTurns@mR+1,PrepareForTurn@mR+1
  5412  000A74  EC8B  F00A         	call	_PrepareForTurn	;wreg free
  5413  000A78                     
  5414                           ;dc_motor.c: 191:         for(char k = 0; k<4; k++){
  5415  000A78  0E00               	movlw	0
  5416  000A7A  0100               	movlb	0	; () banked
  5417  000A7C  6FA0               	movwf	CalibrateTurns@k& (0+255),b
  5418  000A7E                     l3704:
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;dc_motor.c: 192:             TurnLeft(mL,mR);
  5422  000A7E  C041  F030         	movff	CalibrateTurns@mL,TurnLeft@mL
  5423  000A82  C042  F031         	movff	CalibrateTurns@mL+1,TurnLeft@mL+1
  5424  000A86  C043  F032         	movff	CalibrateTurns@mR,TurnLeft@mR
  5425  000A8A  C044  F033         	movff	CalibrateTurns@mR+1,TurnLeft@mR+1
  5426  000A8E  ECA9  F007         	call	_TurnLeft	;wreg free
  5427  000A92                     
  5428                           ;dc_motor.c: 193:         }
  5429  000A92  0100               	movlb	0	; () banked
  5430  000A94  2BA0               	incf	CalibrateTurns@k& (0+255),f,b
  5431  000A96                     
  5432                           ; BSR set to: 0
  5433  000A96  0E03               	movlw	3
  5434  000A98  65A0               	cpfsgt	CalibrateTurns@k& (0+255),b
  5435  000A9A  EF51  F005         	goto	u2741
  5436  000A9E  EF53  F005         	goto	u2740
  5437  000AA2                     u2741:
  5438  000AA2  EF3F  F005         	goto	l3704
  5439  000AA6                     u2740:
  5440  000AA6  EF61  F005         	goto	l3712
  5441  000AAA                     l3710:
  5442                           
  5443                           ;dc_motor.c: 197:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  5444  000AAA  0E52               	movlw	82
  5445  000AAC  6E46               	movwf	(??_CalibrateTurns+1)^0,c
  5446  000AAE  0E2B               	movlw	43
  5447  000AB0  6E45               	movwf	??_CalibrateTurns^0,c
  5448  000AB2  0E00               	movlw	0
  5449  000AB4                     u3177:
  5450  000AB4  2EE8               	decfsz	wreg,f,c
  5451  000AB6  D7FE               	bra	u3177
  5452  000AB8  2E45               	decfsz	??_CalibrateTurns^0,f,c
  5453  000ABA  D7FC               	bra	u3177
  5454  000ABC  2E46               	decfsz	(??_CalibrateTurns+1)^0,f,c
  5455  000ABE  D7FA               	bra	u3177
  5456  000AC0  D000               	nop2	
  5457  000AC2                     l3712:
  5458                           
  5459                           ;dc_motor.c: 196:         while(!(!PORTFbits.RF2 || !PORTFbits.RF3))
  5460  000AC2  A48E               	btfss	142,2,c	;volatile
  5461  000AC4  EF66  F005         	goto	u2751
  5462  000AC8  EF68  F005         	goto	u2750
  5463  000ACC                     u2751:
  5464  000ACC  EF6F  F005         	goto	l293
  5465  000AD0                     u2750:
  5466  000AD0  B68E               	btfsc	142,3,c	;volatile
  5467  000AD2  EF6D  F005         	goto	u2761
  5468  000AD6  EF6F  F005         	goto	u2760
  5469  000ADA                     u2761:
  5470  000ADA  EF55  F005         	goto	l3710
  5471  000ADE                     u2760:
  5472  000ADE                     l293:
  5473                           
  5474                           ;dc_motor.c: 198:             if(!PORTFbits.RF2 && !PORTFbits.RF3){
  5475  000ADE  B48E               	btfsc	142,2,c	;volatile
  5476  000AE0  EF74  F005         	goto	u2771
  5477  000AE4  EF76  F005         	goto	u2770
  5478  000AE8                     u2771:
  5479  000AE8  EF81  F005         	goto	l294
  5480  000AEC                     u2770:
  5481  000AEC  B68E               	btfsc	142,3,c	;volatile
  5482  000AEE  EF7B  F005         	goto	u2781
  5483  000AF2  EF7D  F005         	goto	u2780
  5484  000AF6                     u2781:
  5485  000AF6  EF81  F005         	goto	l294
  5486  000AFA                     u2780:
  5487  000AFA                     
  5488                           ;dc_motor.c: 199:                 LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5489  000AFA  8680               	bsf	128,3,c	;volatile
  5490  000AFC  8E7C               	bsf	124,7,c	;volatile
  5491                           
  5492                           ;dc_motor.c: 200:             } else if(!PORTFbits.RF2){
  5493  000AFE  EF9B  F005         	goto	l3728
  5494  000B02                     l294:
  5495  000B02  B48E               	btfsc	142,2,c	;volatile
  5496  000B04  EF86  F005         	goto	u2791
  5497  000B08  EF88  F005         	goto	u2790
  5498  000B0C                     u2791:
  5499  000B0C  EF8F  F005         	goto	l296
  5500  000B10                     u2790:
  5501  000B10                     
  5502                           ;dc_motor.c: 201:                 turning_time -= 10;
  5503  000B10  0EF6               	movlw	246
  5504  000B12  264B               	addwf	_turning_time^0,f,c
  5505  000B14  0EFF               	movlw	255
  5506  000B16  224C               	addwfc	(_turning_time+1)^0,f,c
  5507  000B18                     
  5508                           ;dc_motor.c: 202:                 LATDbits.LATD7 = 1;
  5509  000B18  8E7C               	bsf	124,7,c	;volatile
  5510                           
  5511                           ;dc_motor.c: 203:             } else if(!PORTFbits.RF3){
  5512  000B1A  EF9B  F005         	goto	l3728
  5513  000B1E                     l296:
  5514  000B1E  B68E               	btfsc	142,3,c	;volatile
  5515  000B20  EF94  F005         	goto	u2801
  5516  000B24  EF96  F005         	goto	u2800
  5517  000B28                     u2801:
  5518  000B28  EF9B  F005         	goto	l3728
  5519  000B2C                     u2800:
  5520  000B2C                     
  5521                           ;dc_motor.c: 204:                 turning_time += 10;
  5522  000B2C  0E0A               	movlw	10
  5523  000B2E  264B               	addwf	_turning_time^0,f,c
  5524  000B30  0E00               	movlw	0
  5525  000B32  224C               	addwfc	(_turning_time+1)^0,f,c
  5526  000B34                     
  5527                           ;dc_motor.c: 205:                 LATHbits.LATH3 = 1;
  5528  000B34  8680               	bsf	128,3,c	;volatile
  5529  000B36                     l3728:
  5530                           
  5531                           ;dc_motor.c: 207:         _delay((unsigned long)((2000)*(64000000/4000.0)));
  5532  000B36  0EA3               	movlw	163
  5533  000B38  6E46               	movwf	(??_CalibrateTurns+1)^0,c
  5534  000B3A  0E57               	movlw	87
  5535  000B3C  6E45               	movwf	??_CalibrateTurns^0,c
  5536  000B3E  0E02               	movlw	2
  5537  000B40                     u3187:
  5538  000B40  2EE8               	decfsz	wreg,f,c
  5539  000B42  D7FE               	bra	u3187
  5540  000B44  2E45               	decfsz	??_CalibrateTurns^0,f,c
  5541  000B46  D7FC               	bra	u3187
  5542  000B48  2E46               	decfsz	(??_CalibrateTurns+1)^0,f,c
  5543  000B4A  D7FA               	bra	u3187
  5544  000B4C  D000               	nop2	
  5545  000B4E                     
  5546                           ;dc_motor.c: 208:         LATDbits.LATD7 = 0;
  5547  000B4E  9E7C               	bcf	124,7,c	;volatile
  5548  000B50                     
  5549                           ;dc_motor.c: 209:         LATHbits.LATH3 = 0;
  5550  000B50  9680               	bcf	128,3,c	;volatile
  5551  000B52                     l3734:
  5552                           
  5553                           ;dc_motor.c: 188:     while(!(!PORTFbits.RF3 && !PORTFbits.RF2)){
  5554  000B52  B68E               	btfsc	142,3,c	;volatile
  5555  000B54  EFAE  F005         	goto	u2811
  5556  000B58  EFB0  F005         	goto	u2810
  5557  000B5C                     u2811:
  5558  000B5C  EF32  F005         	goto	l3696
  5559  000B60                     u2810:
  5560  000B60  B48E               	btfsc	142,2,c	;volatile
  5561  000B62  EFB5  F005         	goto	u2821
  5562  000B66  EFB7  F005         	goto	u2820
  5563  000B6A                     u2821:
  5564  000B6A  EF32  F005         	goto	l3696
  5565  000B6E                     u2820:
  5566  000B6E                     
  5567                           ;dc_motor.c: 211:     LightsToggle();
  5568  000B6E  ECC0  F009         	call	_LightsToggle	;wreg free
  5569  000B72  0012               	return		;funcret
  5570  000B74                     __end_of_CalibrateTurns:
  5571                           	callstack 0
  5572                           
  5573 ;; *************** function _TurnLeft *****************
  5574 ;; Defined at:
  5575 ;;		line 139 in file "dc_motor.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  mL              2   47[COMRAM] PTR struct DC_motor
  5578 ;;		 -> main@motorL(9), 
  5579 ;;  mR              2   49[COMRAM] PTR struct DC_motor
  5580 ;;		 -> main@motorR(9), 
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;		None
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      void 
  5585 ;; Registers used:
  5586 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5592 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5594 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5595 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5596 ;;Total ram usage:        6 bytes
  5597 ;; Hardware stack levels used: 1
  5598 ;; Hardware stack levels required when called: 8
  5599 ;; This function calls:
  5600 ;;		_custom_delay_ms
  5601 ;;		_setMotorPWM
  5602 ;;		_stop
  5603 ;; This function is called by:
  5604 ;;		_CalibrateTurns
  5605 ;;		_green_move
  5606 ;;		_blue_move
  5607 ;;		_lightblue_move
  5608 ;;		_pink_move
  5609 ;;		_reverse_pink_move
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           	psect	text47
  5614  000F52                     __ptext47:
  5615                           	callstack 0
  5616  000F52                     _TurnLeft:
  5617                           	callstack 18
  5618  000F52                     
  5619                           ;dc_motor.c: 140:     stop(mL,mR);
  5620  000F52  C030  F029         	movff	TurnLeft@mL,stop@mL
  5621  000F56  C031  F02A         	movff	TurnLeft@mL+1,stop@mL+1
  5622  000F5A  C032  F02B         	movff	TurnLeft@mR,stop@mR
  5623  000F5E  C033  F02C         	movff	TurnLeft@mR+1,stop@mR+1
  5624  000F62  EC1C  F008         	call	_stop	;wreg free
  5625  000F66                     
  5626                           ;dc_motor.c: 141:     mL->direction = 0;
  5627  000F66  EE20 F001          	lfsr	2,1
  5628  000F6A  5030               	movf	TurnLeft@mL^0,w,c
  5629  000F6C  26D9               	addwf	fsr2l,f,c
  5630  000F6E  5031               	movf	(TurnLeft@mL+1)^0,w,c
  5631  000F70  22DA               	addwfc	fsr2h,f,c
  5632  000F72  0E00               	movlw	0
  5633  000F74  6EDF               	movwf	indf2,c
  5634  000F76                     
  5635                           ;dc_motor.c: 142:     mR->direction = 1;
  5636  000F76  EE20 F001          	lfsr	2,1
  5637  000F7A  5032               	movf	TurnLeft@mR^0,w,c
  5638  000F7C  26D9               	addwf	fsr2l,f,c
  5639  000F7E  5033               	movf	(TurnLeft@mR+1)^0,w,c
  5640  000F80  22DA               	addwfc	fsr2h,f,c
  5641  000F82  0E01               	movlw	1
  5642  000F84  6EDF               	movwf	indf2,c
  5643                           
  5644                           ;dc_motor.c: 143:     setMotorPWM(mL);
  5645  000F86  C030  F01E         	movff	TurnLeft@mL,setMotorPWM@m
  5646  000F8A  C031  F01F         	movff	TurnLeft@mL+1,setMotorPWM@m+1
  5647  000F8E  ECB2  F003         	call	_setMotorPWM	;wreg free
  5648                           
  5649                           ;dc_motor.c: 144:     setMotorPWM(mR);
  5650  000F92  C032  F01E         	movff	TurnLeft@mR,setMotorPWM@m
  5651  000F96  C033  F01F         	movff	TurnLeft@mR+1,setMotorPWM@m+1
  5652  000F9A  ECB2  F003         	call	_setMotorPWM	;wreg free
  5653                           
  5654                           ;dc_motor.c: 146:     while (mR->power != 80){
  5655  000F9E  EFF3  F007         	goto	l270
  5656  000FA2                     l3314:
  5657                           
  5658                           ;dc_motor.c: 147:         mR->power = mR->power + 10;
  5659  000FA2  C032  FFD9         	movff	TurnLeft@mR,fsr2l
  5660  000FA6  C033  FFDA         	movff	TurnLeft@mR+1,fsr2h
  5661  000FAA  50DF               	movf	indf2,w,c
  5662  000FAC  0F0A               	addlw	10
  5663  000FAE  C032  FFD9         	movff	TurnLeft@mR,fsr2l
  5664  000FB2  C033  FFDA         	movff	TurnLeft@mR+1,fsr2h
  5665  000FB6  6EDF               	movwf	indf2,c
  5666                           
  5667                           ;dc_motor.c: 148:         mL->power = mL->power + 10;
  5668  000FB8  C030  FFD9         	movff	TurnLeft@mL,fsr2l
  5669  000FBC  C031  FFDA         	movff	TurnLeft@mL+1,fsr2h
  5670  000FC0  50DF               	movf	indf2,w,c
  5671  000FC2  0F0A               	addlw	10
  5672  000FC4  C030  FFD9         	movff	TurnLeft@mL,fsr2l
  5673  000FC8  C031  FFDA         	movff	TurnLeft@mL+1,fsr2h
  5674  000FCC  6EDF               	movwf	indf2,c
  5675  000FCE                     
  5676                           ;dc_motor.c: 149:         setMotorPWM(mR);
  5677  000FCE  C032  F01E         	movff	TurnLeft@mR,setMotorPWM@m
  5678  000FD2  C033  F01F         	movff	TurnLeft@mR+1,setMotorPWM@m+1
  5679  000FD6  ECB2  F003         	call	_setMotorPWM	;wreg free
  5680  000FDA                     
  5681                           ;dc_motor.c: 150:         setMotorPWM(mL);
  5682  000FDA  C030  F01E         	movff	TurnLeft@mL,setMotorPWM@m
  5683  000FDE  C031  F01F         	movff	TurnLeft@mL+1,setMotorPWM@m+1
  5684  000FE2  ECB2  F003         	call	_setMotorPWM	;wreg free
  5685  000FE6                     l270:
  5686                           
  5687                           ;dc_motor.c: 146:     while (mR->power != 80){
  5688  000FE6  C032  FFD9         	movff	TurnLeft@mR,fsr2l
  5689  000FEA  C033  FFDA         	movff	TurnLeft@mR+1,fsr2h
  5690  000FEE  0E50               	movlw	80
  5691  000FF0  18DE               	xorwf	postinc2,w,c
  5692  000FF2  A4D8               	btfss	status,2,c
  5693  000FF4  EFFE  F007         	goto	u2291
  5694  000FF8  EF00  F008         	goto	u2290
  5695  000FFC                     u2291:
  5696  000FFC  EFD1  F007         	goto	l3314
  5697  001000                     u2290:
  5698  001000                     
  5699                           ;dc_motor.c: 152:     custom_delay_ms(turning_time);
  5700  001000  C04B  F010         	movff	_turning_time,custom_delay_ms@delay_time
  5701  001004  C04C  F011         	movff	_turning_time+1,custom_delay_ms@delay_time+1
  5702  001008  EC58  F00D         	call	_custom_delay_ms	;wreg free
  5703  00100C                     
  5704                           ;dc_motor.c: 153:     stop(mL,mR);
  5705  00100C  C030  F029         	movff	TurnLeft@mL,stop@mL
  5706  001010  C031  F02A         	movff	TurnLeft@mL+1,stop@mL+1
  5707  001014  C032  F02B         	movff	TurnLeft@mR,stop@mR
  5708  001018  C033  F02C         	movff	TurnLeft@mR+1,stop@mR+1
  5709  00101C  EC1C  F008         	call	_stop	;wreg free
  5710  001020                     
  5711                           ;dc_motor.c: 154:     _delay((unsigned long)((150)*(64000000/4000.0)));
  5712  001020  0E0D               	movlw	13
  5713  001022  6E35               	movwf	(??_TurnLeft+1)^0,c
  5714  001024  0E2D               	movlw	45
  5715  001026  6E34               	movwf	??_TurnLeft^0,c
  5716  001028  0ED8               	movlw	216
  5717  00102A                     u3197:
  5718  00102A  2EE8               	decfsz	wreg,f,c
  5719  00102C  D7FE               	bra	u3197
  5720  00102E  2E34               	decfsz	??_TurnLeft^0,f,c
  5721  001030  D7FC               	bra	u3197
  5722  001032  2E35               	decfsz	(??_TurnLeft+1)^0,f,c
  5723  001034  D7FA               	bra	u3197
  5724  001036  0012               	return		;funcret
  5725  001038                     __end_of_TurnLeft:
  5726                           	callstack 0
  5727                           
  5728 ;; *************** function _PrepareForTurn *****************
  5729 ;; Defined at:
  5730 ;;		line 177 in file "dc_motor.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  mL              2   56[COMRAM] PTR struct DC_motor
  5733 ;;		 -> main@motorL(9), 
  5734 ;;  mR              2   58[COMRAM] PTR struct DC_motor
  5735 ;;		 -> main@motorR(9), 
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;		None
  5738 ;; Return value:  Size  Location     Type
  5739 ;;                  1    wreg      void 
  5740 ;; Registers used:
  5741 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5742 ;; Tracked objects:
  5743 ;;		On entry : 0/0
  5744 ;;		On exit  : 0/0
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5747 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5748 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5749 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5750 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5751 ;;Total ram usage:        8 bytes
  5752 ;; Hardware stack levels used: 1
  5753 ;; Hardware stack levels required when called: 9
  5754 ;; This function calls:
  5755 ;;		___awdiv
  5756 ;;		_move_backward
  5757 ;;		_stop
  5758 ;; This function is called by:
  5759 ;;		_CalibrateTurns
  5760 ;;		_red_move
  5761 ;;		_green_move
  5762 ;;		_blue_move
  5763 ;;		_orange_move
  5764 ;;		_lightblue_move
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           	psect	text48
  5769  001516                     __ptext48:
  5770                           	callstack 0
  5771  001516                     _PrepareForTurn:
  5772                           	callstack 17
  5773  001516                     
  5774                           ;dc_motor.c: 178:     move_backward(mL,mR,reverse_time/5);
  5775  001516  C049  F016         	movff	_reverse_time,___awdiv@dividend
  5776  00151A  C04A  F017         	movff	_reverse_time+1,___awdiv@dividend+1
  5777  00151E  0E00               	movlw	0
  5778  001520  6E19               	movwf	(___awdiv@divisor+1)^0,c
  5779  001522  0E05               	movlw	5
  5780  001524  6E18               	movwf	___awdiv@divisor^0,c
  5781  001526  ECFF  F008         	call	___awdiv	;wreg free
  5782  00152A  C016  F03F         	movff	?___awdiv,_PrepareForTurn$2745
  5783  00152E  C017  F040         	movff	?___awdiv+1,_PrepareForTurn$2745+1
  5784  001532                     
  5785                           ;dc_motor.c: 178:     move_backward(mL,mR,reverse_time/5);
  5786  001532  C039  F030         	movff	PrepareForTurn@mL,move_backward@mL
  5787  001536  C03A  F031         	movff	PrepareForTurn@mL+1,move_backward@mL+1
  5788  00153A  C03B  F032         	movff	PrepareForTurn@mR,move_backward@mR
  5789  00153E  C03C  F033         	movff	PrepareForTurn@mR+1,move_backward@mR+1
  5790  001542  C03F  F034         	movff	_PrepareForTurn$2745,move_backward@duration
  5791  001546  C040  F035         	movff	_PrepareForTurn$2745+1,move_backward@duration+1
  5792  00154A  EC9C  F004         	call	_move_backward	;wreg free
  5793  00154E                     
  5794                           ;dc_motor.c: 179:     stop(mL,mR);
  5795  00154E  C039  F029         	movff	PrepareForTurn@mL,stop@mL
  5796  001552  C03A  F02A         	movff	PrepareForTurn@mL+1,stop@mL+1
  5797  001556  C03B  F02B         	movff	PrepareForTurn@mR,stop@mR
  5798  00155A  C03C  F02C         	movff	PrepareForTurn@mR+1,stop@mR+1
  5799  00155E  EC1C  F008         	call	_stop	;wreg free
  5800  001562                     
  5801                           ;dc_motor.c: 180:     _delay((unsigned long)((200)*(64000000/4000.0)));
  5802  001562  0E11               	movlw	17
  5803  001564  6E3E               	movwf	(??_PrepareForTurn+1)^0,c
  5804  001566  0E3C               	movlw	60
  5805  001568  6E3D               	movwf	??_PrepareForTurn^0,c
  5806  00156A  0ECB               	movlw	203
  5807  00156C                     u3207:
  5808  00156C  2EE8               	decfsz	wreg,f,c
  5809  00156E  D7FE               	bra	u3207
  5810  001570  2E3D               	decfsz	??_PrepareForTurn^0,f,c
  5811  001572  D7FC               	bra	u3207
  5812  001574  2E3E               	decfsz	(??_PrepareForTurn+1)^0,f,c
  5813  001576  D7FA               	bra	u3207
  5814  001578  F000               	nop	
  5815  00157A  0012               	return		;funcret
  5816  00157C                     __end_of_PrepareForTurn:
  5817                           	callstack 0
  5818                           
  5819 ;; *************** function _CalibrateReverseSquare *****************
  5820 ;; Defined at:
  5821 ;;		line 216 in file "dc_motor.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  mL              2   62[COMRAM] PTR struct DC_motor
  5824 ;;		 -> main@motorL(9), 
  5825 ;;  mR              2   64[COMRAM] PTR struct DC_motor
  5826 ;;		 -> main@motorR(9), 
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;		None
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  1    wreg      void 
  5831 ;; Registers used:
  5832 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5838 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5840 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5841 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5842 ;;Total ram usage:        6 bytes
  5843 ;; Hardware stack levels used: 1
  5844 ;; Hardware stack levels required when called: 10
  5845 ;; This function calls:
  5846 ;;		_LightsToggle
  5847 ;;		_reverse_square
  5848 ;;		_stop
  5849 ;; This function is called by:
  5850 ;;		_main
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           	psect	text49
  5855  000C86                     __ptext49:
  5856                           	callstack 0
  5857  000C86                     _CalibrateReverseSquare:
  5858                           	callstack 20
  5859  000C86                     
  5860                           ;dc_motor.c: 218:     LightsToggle();
  5861  000C86  ECC0  F009         	call	_LightsToggle	;wreg free
  5862                           
  5863                           ;dc_motor.c: 220:     while(!(!PORTFbits.RF3 && !PORTFbits.RF2)) {
  5864  000C8A  EFB1  F006         	goto	l3768
  5865  000C8E                     l3742:
  5866                           
  5867                           ;dc_motor.c: 221:         reverse_square(mL,mR);
  5868  000C8E  C03F  F039         	movff	CalibrateReverseSquare@mL,reverse_square@mL
  5869  000C92  C040  F03A         	movff	CalibrateReverseSquare@mL+1,reverse_square@mL+1
  5870  000C96  C041  F03B         	movff	CalibrateReverseSquare@mR,reverse_square@mR
  5871  000C9A  C042  F03C         	movff	CalibrateReverseSquare@mR+1,reverse_square@mR+1
  5872  000C9E  ECB3  F00B         	call	_reverse_square	;wreg free
  5873                           
  5874                           ;dc_motor.c: 222:         stop(mL,mR);
  5875  000CA2  C03F  F029         	movff	CalibrateReverseSquare@mL,stop@mL
  5876  000CA6  C040  F02A         	movff	CalibrateReverseSquare@mL+1,stop@mL+1
  5877  000CAA  C041  F02B         	movff	CalibrateReverseSquare@mR,stop@mR
  5878  000CAE  C042  F02C         	movff	CalibrateReverseSquare@mR+1,stop@mR+1
  5879  000CB2  EC1C  F008         	call	_stop	;wreg free
  5880                           
  5881                           ;dc_motor.c: 224:         while(!(!PORTFbits.RF3 || !PORTFbits.RF2))
  5882  000CB6  EF69  F006         	goto	l3746
  5883  000CBA                     l3744:
  5884                           
  5885                           ;dc_motor.c: 225:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  5886  000CBA  0E52               	movlw	82
  5887  000CBC  6E44               	movwf	(??_CalibrateReverseSquare+1)^0,c
  5888  000CBE  0E2B               	movlw	43
  5889  000CC0  6E43               	movwf	??_CalibrateReverseSquare^0,c
  5890  000CC2  0E00               	movlw	0
  5891  000CC4                     u3217:
  5892  000CC4  2EE8               	decfsz	wreg,f,c
  5893  000CC6  D7FE               	bra	u3217
  5894  000CC8  2E43               	decfsz	??_CalibrateReverseSquare^0,f,c
  5895  000CCA  D7FC               	bra	u3217
  5896  000CCC  2E44               	decfsz	(??_CalibrateReverseSquare+1)^0,f,c
  5897  000CCE  D7FA               	bra	u3217
  5898  000CD0  D000               	nop2	
  5899  000CD2                     l3746:
  5900                           
  5901                           ;dc_motor.c: 224:         while(!(!PORTFbits.RF3 || !PORTFbits.RF2))
  5902  000CD2  A68E               	btfss	142,3,c	;volatile
  5903  000CD4  EF6E  F006         	goto	u2831
  5904  000CD8  EF70  F006         	goto	u2830
  5905  000CDC                     u2831:
  5906  000CDC  EF77  F006         	goto	l309
  5907  000CE0                     u2830:
  5908  000CE0  B48E               	btfsc	142,2,c	;volatile
  5909  000CE2  EF75  F006         	goto	u2841
  5910  000CE6  EF77  F006         	goto	u2840
  5911  000CEA                     u2841:
  5912  000CEA  EF5D  F006         	goto	l3744
  5913  000CEE                     u2840:
  5914  000CEE                     l309:
  5915                           
  5916                           ;dc_motor.c: 226:         if(!PORTFbits.RF2 && !PORTFbits.RF3){
  5917  000CEE  B48E               	btfsc	142,2,c	;volatile
  5918  000CF0  EF7C  F006         	goto	u2851
  5919  000CF4  EF7E  F006         	goto	u2850
  5920  000CF8                     u2851:
  5921  000CF8  EF89  F006         	goto	l310
  5922  000CFC                     u2850:
  5923  000CFC  B68E               	btfsc	142,3,c	;volatile
  5924  000CFE  EF83  F006         	goto	u2861
  5925  000D02  EF85  F006         	goto	u2860
  5926  000D06                     u2861:
  5927  000D06  EF89  F006         	goto	l310
  5928  000D0A                     u2860:
  5929  000D0A                     
  5930                           ;dc_motor.c: 227:             LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5931  000D0A  8680               	bsf	128,3,c	;volatile
  5932  000D0C  8E7C               	bsf	124,7,c	;volatile
  5933                           
  5934                           ;dc_motor.c: 228:         } else if(!PORTFbits.RF2){
  5935  000D0E  EFA3  F006         	goto	l3762
  5936  000D12                     l310:
  5937  000D12  B48E               	btfsc	142,2,c	;volatile
  5938  000D14  EF8E  F006         	goto	u2871
  5939  000D18  EF90  F006         	goto	u2870
  5940  000D1C                     u2871:
  5941  000D1C  EF97  F006         	goto	l312
  5942  000D20                     u2870:
  5943  000D20                     
  5944                           ;dc_motor.c: 229:             reverse_time -= 150;
  5945  000D20  0E6A               	movlw	106
  5946  000D22  2649               	addwf	_reverse_time^0,f,c
  5947  000D24  0EFF               	movlw	255
  5948  000D26  224A               	addwfc	(_reverse_time+1)^0,f,c
  5949  000D28                     
  5950                           ;dc_motor.c: 230:             LATDbits.LATD7 = 1;
  5951  000D28  8E7C               	bsf	124,7,c	;volatile
  5952                           
  5953                           ;dc_motor.c: 231:         } else if(!PORTFbits.RF3){
  5954  000D2A  EFA3  F006         	goto	l3762
  5955  000D2E                     l312:
  5956  000D2E  B68E               	btfsc	142,3,c	;volatile
  5957  000D30  EF9C  F006         	goto	u2881
  5958  000D34  EF9E  F006         	goto	u2880
  5959  000D38                     u2881:
  5960  000D38  EFA3  F006         	goto	l3762
  5961  000D3C                     u2880:
  5962  000D3C                     
  5963                           ;dc_motor.c: 232:             reverse_time += 150;
  5964  000D3C  0E96               	movlw	150
  5965  000D3E  2649               	addwf	_reverse_time^0,f,c
  5966  000D40  0E00               	movlw	0
  5967  000D42  224A               	addwfc	(_reverse_time+1)^0,f,c
  5968  000D44                     
  5969                           ;dc_motor.c: 233:             LATHbits.LATH3 = 1;
  5970  000D44  8680               	bsf	128,3,c	;volatile
  5971  000D46                     l3762:
  5972                           
  5973                           ;dc_motor.c: 235:         _delay((unsigned long)((2000)*(64000000/4000.0)));
  5974  000D46  0EA3               	movlw	163
  5975  000D48  6E44               	movwf	(??_CalibrateReverseSquare+1)^0,c
  5976  000D4A  0E57               	movlw	87
  5977  000D4C  6E43               	movwf	??_CalibrateReverseSquare^0,c
  5978  000D4E  0E02               	movlw	2
  5979  000D50                     u3227:
  5980  000D50  2EE8               	decfsz	wreg,f,c
  5981  000D52  D7FE               	bra	u3227
  5982  000D54  2E43               	decfsz	??_CalibrateReverseSquare^0,f,c
  5983  000D56  D7FC               	bra	u3227
  5984  000D58  2E44               	decfsz	(??_CalibrateReverseSquare+1)^0,f,c
  5985  000D5A  D7FA               	bra	u3227
  5986  000D5C  D000               	nop2	
  5987  000D5E                     
  5988                           ;dc_motor.c: 236:         LATDbits.LATD7 = 0;
  5989  000D5E  9E7C               	bcf	124,7,c	;volatile
  5990  000D60                     
  5991                           ;dc_motor.c: 237:         LATHbits.LATH3 = 0;
  5992  000D60  9680               	bcf	128,3,c	;volatile
  5993  000D62                     l3768:
  5994                           
  5995                           ;dc_motor.c: 220:     while(!(!PORTFbits.RF3 && !PORTFbits.RF2)) {
  5996  000D62  B68E               	btfsc	142,3,c	;volatile
  5997  000D64  EFB6  F006         	goto	u2891
  5998  000D68  EFB8  F006         	goto	u2890
  5999  000D6C                     u2891:
  6000  000D6C  EF47  F006         	goto	l3742
  6001  000D70                     u2890:
  6002  000D70  B48E               	btfsc	142,2,c	;volatile
  6003  000D72  EFBD  F006         	goto	u2901
  6004  000D76  EFBF  F006         	goto	u2900
  6005  000D7A                     u2901:
  6006  000D7A  EF47  F006         	goto	l3742
  6007  000D7E                     u2900:
  6008  000D7E                     
  6009                           ;dc_motor.c: 239:     LightsToggle();
  6010  000D7E  ECC0  F009         	call	_LightsToggle	;wreg free
  6011  000D82  0012               	return		;funcret
  6012  000D84                     __end_of_CalibrateReverseSquare:
  6013                           	callstack 0
  6014                           
  6015 ;; *************** function _reverse_square *****************
  6016 ;; Defined at:
  6017 ;;		line 124 in file "dc_motor.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;  mL              2   56[COMRAM] PTR struct DC_motor
  6020 ;;		 -> main@motorL(9), 
  6021 ;;  mR              2   58[COMRAM] PTR struct DC_motor
  6022 ;;		 -> main@motorR(9), 
  6023 ;; Auto vars:     Size  Location     Type
  6024 ;;		None
  6025 ;; Return value:  Size  Location     Type
  6026 ;;                  1    wreg      void 
  6027 ;; Registers used:
  6028 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : 0/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6034 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6036 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6037 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6038 ;;Total ram usage:        6 bytes
  6039 ;; Hardware stack levels used: 1
  6040 ;; Hardware stack levels required when called: 9
  6041 ;; This function calls:
  6042 ;;		_move_backward
  6043 ;;		_stop
  6044 ;; This function is called by:
  6045 ;;		_CalibrateReverseSquare
  6046 ;;		_yellow_move
  6047 ;;		_pink_move
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           	psect	text50
  6052  001766                     __ptext50:
  6053                           	callstack 0
  6054  001766                     _reverse_square:
  6055                           	callstack 19
  6056  001766                     
  6057                           ;dc_motor.c: 125:     move_backward(mL,mR,reverse_time);
  6058  001766  C039  F030         	movff	reverse_square@mL,move_backward@mL
  6059  00176A  C03A  F031         	movff	reverse_square@mL+1,move_backward@mL+1
  6060  00176E  C03B  F032         	movff	reverse_square@mR,move_backward@mR
  6061  001772  C03C  F033         	movff	reverse_square@mR+1,move_backward@mR+1
  6062  001776  C049  F034         	movff	_reverse_time,move_backward@duration
  6063  00177A  C04A  F035         	movff	_reverse_time+1,move_backward@duration+1
  6064  00177E  EC9C  F004         	call	_move_backward	;wreg free
  6065                           
  6066                           ;dc_motor.c: 126:     stop(mL,mR);
  6067  001782  C039  F029         	movff	reverse_square@mL,stop@mL
  6068  001786  C03A  F02A         	movff	reverse_square@mL+1,stop@mL+1
  6069  00178A  C03B  F02B         	movff	reverse_square@mR,stop@mR
  6070  00178E  C03C  F02C         	movff	reverse_square@mR+1,stop@mR+1
  6071  001792  EC1C  F008         	call	_stop	;wreg free
  6072  001796                     
  6073                           ;dc_motor.c: 127:     _delay((unsigned long)((250)*(64000000/4000.0)));
  6074  001796  0E15               	movlw	21
  6075  001798  6E3E               	movwf	(??_reverse_square+1)^0,c
  6076  00179A  0E4B               	movlw	75
  6077  00179C  6E3D               	movwf	??_reverse_square^0,c
  6078  00179E  0EBE               	movlw	190
  6079  0017A0                     u3237:
  6080  0017A0  2EE8               	decfsz	wreg,f,c
  6081  0017A2  D7FE               	bra	u3237
  6082  0017A4  2E3D               	decfsz	??_reverse_square^0,f,c
  6083  0017A6  D7FC               	bra	u3237
  6084  0017A8  2E3E               	decfsz	(??_reverse_square+1)^0,f,c
  6085  0017AA  D7FA               	bra	u3237
  6086  0017AC  D000               	nop2	
  6087  0017AE  0012               	return		;funcret
  6088  0017B0                     __end_of_reverse_square:
  6089                           	callstack 0
  6090                           
  6091 ;; *************** function _move_backward *****************
  6092 ;; Defined at:
  6093 ;;		line 99 in file "dc_motor.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;  mL              2   47[COMRAM] PTR struct DC_motor
  6096 ;;		 -> main@motorL(9), 
  6097 ;;  mR              2   49[COMRAM] PTR struct DC_motor
  6098 ;;		 -> main@motorR(9), 
  6099 ;;  duration        2   51[COMRAM] unsigned int 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;		None
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  1    wreg      void 
  6104 ;; Registers used:
  6105 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6111 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6113 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6114 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6115 ;;Total ram usage:        9 bytes
  6116 ;; Hardware stack levels used: 1
  6117 ;; Hardware stack levels required when called: 8
  6118 ;; This function calls:
  6119 ;;		_custom_delay_ms
  6120 ;;		_setMotorPWM
  6121 ;;		_stop
  6122 ;; This function is called by:
  6123 ;;		_reverse_square
  6124 ;;		_PrepareForTurn
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           	psect	text51
  6129  000938                     __ptext51:
  6130                           	callstack 0
  6131  000938                     _move_backward:
  6132                           	callstack 19
  6133  000938                     
  6134                           ;dc_motor.c: 100:     stop(mL,mR);
  6135  000938  C030  F029         	movff	move_backward@mL,stop@mL
  6136  00093C  C031  F02A         	movff	move_backward@mL+1,stop@mL+1
  6137  000940  C032  F02B         	movff	move_backward@mR,stop@mR
  6138  000944  C033  F02C         	movff	move_backward@mR+1,stop@mR+1
  6139  000948  EC1C  F008         	call	_stop	;wreg free
  6140  00094C                     
  6141                           ;dc_motor.c: 102:     mL->direction = 0;
  6142  00094C  EE20 F001          	lfsr	2,1
  6143  000950  5030               	movf	move_backward@mL^0,w,c
  6144  000952  26D9               	addwf	fsr2l,f,c
  6145  000954  5031               	movf	(move_backward@mL+1)^0,w,c
  6146  000956  22DA               	addwfc	fsr2h,f,c
  6147  000958  0E00               	movlw	0
  6148  00095A  6EDF               	movwf	indf2,c
  6149  00095C                     
  6150                           ;dc_motor.c: 103:     mR->direction = 0;
  6151  00095C  EE20 F001          	lfsr	2,1
  6152  000960  5032               	movf	move_backward@mR^0,w,c
  6153  000962  26D9               	addwf	fsr2l,f,c
  6154  000964  5033               	movf	(move_backward@mR+1)^0,w,c
  6155  000966  22DA               	addwfc	fsr2h,f,c
  6156  000968  0E00               	movlw	0
  6157  00096A  6EDF               	movwf	indf2,c
  6158                           
  6159                           ;dc_motor.c: 104:     setMotorPWM(mR);
  6160  00096C  C032  F01E         	movff	move_backward@mR,setMotorPWM@m
  6161  000970  C033  F01F         	movff	move_backward@mR+1,setMotorPWM@m+1
  6162  000974  ECB2  F003         	call	_setMotorPWM	;wreg free
  6163                           
  6164                           ;dc_motor.c: 105:     setMotorPWM(mL);
  6165  000978  C030  F01E         	movff	move_backward@mL,setMotorPWM@m
  6166  00097C  C031  F01F         	movff	move_backward@mL+1,setMotorPWM@m+1
  6167  000980  ECB2  F003         	call	_setMotorPWM	;wreg free
  6168                           
  6169                           ;dc_motor.c: 107:     while ((mL->power + mR->power) < (80 + 2* peak_power) ){
  6170  000984  EFE6  F004         	goto	l258
  6171  000988                     l3276:
  6172                           
  6173                           ;dc_motor.c: 108:         mL->power = mL->power + 5;
  6174  000988  C030  FFD9         	movff	move_backward@mL,fsr2l
  6175  00098C  C031  FFDA         	movff	move_backward@mL+1,fsr2h
  6176  000990  50DF               	movf	indf2,w,c
  6177  000992  0F05               	addlw	5
  6178  000994  C030  FFD9         	movff	move_backward@mL,fsr2l
  6179  000998  C031  FFDA         	movff	move_backward@mL+1,fsr2h
  6180  00099C  6EDF               	movwf	indf2,c
  6181                           
  6182                           ;dc_motor.c: 109:         mR->power = mR->power + 5;
  6183  00099E  C032  FFD9         	movff	move_backward@mR,fsr2l
  6184  0009A2  C033  FFDA         	movff	move_backward@mR+1,fsr2h
  6185  0009A6  50DF               	movf	indf2,w,c
  6186  0009A8  0F05               	addlw	5
  6187  0009AA  C032  FFD9         	movff	move_backward@mR,fsr2l
  6188  0009AE  C033  FFDA         	movff	move_backward@mR+1,fsr2h
  6189  0009B2  6EDF               	movwf	indf2,c
  6190  0009B4                     
  6191                           ;dc_motor.c: 110:         setMotorPWM(mR);
  6192  0009B4  C032  F01E         	movff	move_backward@mR,setMotorPWM@m
  6193  0009B8  C033  F01F         	movff	move_backward@mR+1,setMotorPWM@m+1
  6194  0009BC  ECB2  F003         	call	_setMotorPWM	;wreg free
  6195  0009C0                     
  6196                           ;dc_motor.c: 111:         setMotorPWM(mL);
  6197  0009C0  C030  F01E         	movff	move_backward@mL,setMotorPWM@m
  6198  0009C4  C031  F01F         	movff	move_backward@mL+1,setMotorPWM@m+1
  6199  0009C8  ECB2  F003         	call	_setMotorPWM	;wreg free
  6200  0009CC                     l258:
  6201                           
  6202                           ;dc_motor.c: 107:     while ((mL->power + mR->power) < (80 + 2* peak_power) ){
  6203  0009CC  C030  FFD9         	movff	move_backward@mL,fsr2l
  6204  0009D0  C031  FFDA         	movff	move_backward@mL+1,fsr2h
  6205  0009D4  50DF               	movf	indf2,w,c
  6206  0009D6  6E36               	movwf	??_move_backward^0,c
  6207  0009D8  6A37               	clrf	(??_move_backward+1)^0,c
  6208  0009DA  C032  FFD9         	movff	move_backward@mR,fsr2l
  6209  0009DE  C033  FFDA         	movff	move_backward@mR+1,fsr2h
  6210  0009E2  50DF               	movf	indf2,w,c
  6211  0009E4  6E38               	movwf	(??_move_backward+2)^0,c
  6212  0009E6  5038               	movf	(??_move_backward+2)^0,w,c
  6213  0009E8  2636               	addwf	??_move_backward^0,f,c
  6214  0009EA  0E00               	movlw	0
  6215  0009EC  2237               	addwfc	(??_move_backward+1)^0,f,c
  6216  0009EE  BE37               	btfsc	(??_move_backward+1)^0,7,c
  6217  0009F0  EF03  F005         	goto	u2251
  6218  0009F4  5037               	movf	(??_move_backward+1)^0,w,c
  6219  0009F6  E109               	bnz	u2250
  6220  0009F8  0E82               	movlw	130
  6221  0009FA  5C36               	subwf	??_move_backward^0,w,c
  6222  0009FC  A0D8               	btfss	status,0,c
  6223  0009FE  EF03  F005         	goto	u2251
  6224  000A02  EF05  F005         	goto	u2250
  6225  000A06                     u2251:
  6226  000A06  EFC4  F004         	goto	l3276
  6227  000A0A                     u2250:
  6228  000A0A                     
  6229                           ;dc_motor.c: 115:     mL->power = mL->power + 2;
  6230  000A0A  C030  FFD9         	movff	move_backward@mL,fsr2l
  6231  000A0E  C031  FFDA         	movff	move_backward@mL+1,fsr2h
  6232  000A12  50DF               	movf	indf2,w,c
  6233  000A14  0F02               	addlw	2
  6234  000A16  C030  FFD9         	movff	move_backward@mL,fsr2l
  6235  000A1A  C031  FFDA         	movff	move_backward@mL+1,fsr2h
  6236  000A1E  6EDF               	movwf	indf2,c
  6237                           
  6238                           ;dc_motor.c: 116:     mR->power = mR->power + 2;
  6239  000A20  C032  FFD9         	movff	move_backward@mR,fsr2l
  6240  000A24  C033  FFDA         	movff	move_backward@mR+1,fsr2h
  6241  000A28  50DF               	movf	indf2,w,c
  6242  000A2A  0F02               	addlw	2
  6243  000A2C  C032  FFD9         	movff	move_backward@mR,fsr2l
  6244  000A30  C033  FFDA         	movff	move_backward@mR+1,fsr2h
  6245  000A34  6EDF               	movwf	indf2,c
  6246  000A36                     
  6247                           ;dc_motor.c: 117:     setMotorPWM(mR);
  6248  000A36  C032  F01E         	movff	move_backward@mR,setMotorPWM@m
  6249  000A3A  C033  F01F         	movff	move_backward@mR+1,setMotorPWM@m+1
  6250  000A3E  ECB2  F003         	call	_setMotorPWM	;wreg free
  6251  000A42                     
  6252                           ;dc_motor.c: 118:     setMotorPWM(mL);
  6253  000A42  C030  F01E         	movff	move_backward@mL,setMotorPWM@m
  6254  000A46  C031  F01F         	movff	move_backward@mL+1,setMotorPWM@m+1
  6255  000A4A  ECB2  F003         	call	_setMotorPWM	;wreg free
  6256  000A4E                     
  6257                           ;dc_motor.c: 120:     custom_delay_ms(duration);
  6258  000A4E  C034  F010         	movff	move_backward@duration,custom_delay_ms@delay_time
  6259  000A52  C035  F011         	movff	move_backward@duration+1,custom_delay_ms@delay_time+1
  6260  000A56  EC58  F00D         	call	_custom_delay_ms	;wreg free
  6261  000A5A  0012               	return		;funcret
  6262  000A5C                     __end_of_move_backward:
  6263                           	callstack 0
  6264                           
  6265 ;; *************** function _stop *****************
  6266 ;; Defined at:
  6267 ;;		line 63 in file "dc_motor.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;  mL              2   40[COMRAM] PTR struct DC_motor
  6270 ;;		 -> main@motorL(9), 
  6271 ;;  mR              2   42[COMRAM] PTR struct DC_motor
  6272 ;;		 -> main@motorR(9), 
  6273 ;; Auto vars:     Size  Location     Type
  6274 ;;		None
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  1    wreg      void 
  6277 ;; Registers used:
  6278 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6284 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6286 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6287 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6288 ;;Total ram usage:        7 bytes
  6289 ;; Hardware stack levels used: 1
  6290 ;; Hardware stack levels required when called: 7
  6291 ;; This function calls:
  6292 ;;		_setMotorPWM
  6293 ;; This function is called by:
  6294 ;;		_move_forward
  6295 ;;		_move_backward
  6296 ;;		_reverse_square
  6297 ;;		_forward_square
  6298 ;;		_TurnLeft
  6299 ;;		_TurnRight
  6300 ;;		_PrepareForTurn
  6301 ;;		_CalibrateReverseSquare
  6302 ;;		_main
  6303 ;;		_white_move
  6304 ;; This function uses a non-reentrant model
  6305 ;;
  6306                           
  6307                           	psect	text52
  6308  001038                     __ptext52:
  6309                           	callstack 0
  6310  001038                     _stop:
  6311                           	callstack 23
  6312  001038                     
  6313                           ;dc_motor.c: 65:     while ((mL->power + mR->power) > 0){
  6314  001038  EF58  F008         	goto	l244
  6315  00103C                     l3246:
  6316                           
  6317                           ;dc_motor.c: 66:         if(mL->power > 0){
  6318  00103C  C029  FFD9         	movff	stop@mL,fsr2l
  6319  001040  C02A  FFDA         	movff	stop@mL+1,fsr2h
  6320  001044  50DF               	movf	indf2,w,c
  6321  001046  B4D8               	btfsc	status,2,c
  6322  001048  EF28  F008         	goto	u2211
  6323  00104C  EF2A  F008         	goto	u2210
  6324  001050                     u2211:
  6325  001050  EF35  F008         	goto	l3250
  6326  001054                     u2210:
  6327  001054                     
  6328                           ;dc_motor.c: 67:             mL->power = mL->power -5;
  6329  001054  C029  FFD9         	movff	stop@mL,fsr2l
  6330  001058  C02A  FFDA         	movff	stop@mL+1,fsr2h
  6331  00105C  50DF               	movf	indf2,w,c
  6332  00105E  0FFB               	addlw	251
  6333  001060  C029  FFD9         	movff	stop@mL,fsr2l
  6334  001064  C02A  FFDA         	movff	stop@mL+1,fsr2h
  6335  001068  6EDF               	movwf	indf2,c
  6336  00106A                     l3250:
  6337                           
  6338                           ;dc_motor.c: 69:         if(mR->power > 0){
  6339  00106A  C02B  FFD9         	movff	stop@mR,fsr2l
  6340  00106E  C02C  FFDA         	movff	stop@mR+1,fsr2h
  6341  001072  50DF               	movf	indf2,w,c
  6342  001074  B4D8               	btfsc	status,2,c
  6343  001076  EF3F  F008         	goto	u2221
  6344  00107A  EF41  F008         	goto	u2220
  6345  00107E                     u2221:
  6346  00107E  EF4C  F008         	goto	l3254
  6347  001082                     u2220:
  6348  001082                     
  6349                           ;dc_motor.c: 70:             mR->power = mR->power - 5;
  6350  001082  C02B  FFD9         	movff	stop@mR,fsr2l
  6351  001086  C02C  FFDA         	movff	stop@mR+1,fsr2h
  6352  00108A  50DF               	movf	indf2,w,c
  6353  00108C  0FFB               	addlw	251
  6354  00108E  C02B  FFD9         	movff	stop@mR,fsr2l
  6355  001092  C02C  FFDA         	movff	stop@mR+1,fsr2h
  6356  001096  6EDF               	movwf	indf2,c
  6357  001098                     l3254:
  6358                           
  6359                           ;dc_motor.c: 72:         setMotorPWM(mL);
  6360  001098  C029  F01E         	movff	stop@mL,setMotorPWM@m
  6361  00109C  C02A  F01F         	movff	stop@mL+1,setMotorPWM@m+1
  6362  0010A0  ECB2  F003         	call	_setMotorPWM	;wreg free
  6363  0010A4                     
  6364                           ;dc_motor.c: 73:         setMotorPWM(mR);
  6365  0010A4  C02B  F01E         	movff	stop@mR,setMotorPWM@m
  6366  0010A8  C02C  F01F         	movff	stop@mR+1,setMotorPWM@m+1
  6367  0010AC  ECB2  F003         	call	_setMotorPWM	;wreg free
  6368  0010B0                     l244:
  6369                           
  6370                           ;dc_motor.c: 65:     while ((mL->power + mR->power) > 0){
  6371  0010B0  C029  FFD9         	movff	stop@mL,fsr2l
  6372  0010B4  C02A  FFDA         	movff	stop@mL+1,fsr2h
  6373  0010B8  50DF               	movf	indf2,w,c
  6374  0010BA  6E2D               	movwf	??_stop^0,c
  6375  0010BC  6A2E               	clrf	(??_stop+1)^0,c
  6376  0010BE  C02B  FFD9         	movff	stop@mR,fsr2l
  6377  0010C2  C02C  FFDA         	movff	stop@mR+1,fsr2h
  6378  0010C6  50DF               	movf	indf2,w,c
  6379  0010C8  6E2F               	movwf	(??_stop+2)^0,c
  6380  0010CA  502F               	movf	(??_stop+2)^0,w,c
  6381  0010CC  262D               	addwf	??_stop^0,f,c
  6382  0010CE  0E00               	movlw	0
  6383  0010D0  222E               	addwfc	(??_stop+1)^0,f,c
  6384  0010D2  BE2E               	btfsc	(??_stop+1)^0,7,c
  6385  0010D4  EF76  F008         	goto	u2230
  6386  0010D8  502E               	movf	(??_stop+1)^0,w,c
  6387  0010DA  E106               	bnz	u2231
  6388  0010DC  042D               	decf	??_stop^0,w,c
  6389  0010DE  B0D8               	btfsc	status,0,c
  6390  0010E0  EF74  F008         	goto	u2231
  6391  0010E4  EF76  F008         	goto	u2230
  6392  0010E8                     u2231:
  6393  0010E8  EF1E  F008         	goto	l3246
  6394  0010EC                     u2230:
  6395  0010EC                     
  6396                           ;dc_motor.c: 76:     mL->power = 0;
  6397  0010EC  C029  FFD9         	movff	stop@mL,fsr2l
  6398  0010F0  C02A  FFDA         	movff	stop@mL+1,fsr2h
  6399  0010F4  0E00               	movlw	0
  6400  0010F6  6EDF               	movwf	indf2,c
  6401                           
  6402                           ;dc_motor.c: 77:     mR->power = 0;
  6403  0010F8  C02B  FFD9         	movff	stop@mR,fsr2l
  6404  0010FC  C02C  FFDA         	movff	stop@mR+1,fsr2h
  6405  001100  0E00               	movlw	0
  6406  001102  6EDF               	movwf	indf2,c
  6407  001104                     
  6408                           ;dc_motor.c: 78:     setMotorPWM(mL);
  6409  001104  C029  F01E         	movff	stop@mL,setMotorPWM@m
  6410  001108  C02A  F01F         	movff	stop@mL+1,setMotorPWM@m+1
  6411  00110C  ECB2  F003         	call	_setMotorPWM	;wreg free
  6412  001110                     
  6413                           ;dc_motor.c: 79:     setMotorPWM(mR);
  6414  001110  C02B  F01E         	movff	stop@mR,setMotorPWM@m
  6415  001114  C02C  F01F         	movff	stop@mR+1,setMotorPWM@m+1
  6416  001118  ECB2  F003         	call	_setMotorPWM	;wreg free
  6417  00111C  0012               	return		;funcret
  6418  00111E                     __end_of_stop:
  6419                           	callstack 0
  6420                           
  6421 ;; *************** function _setMotorPWM *****************
  6422 ;; Defined at:
  6423 ;;		line 42 in file "dc_motor.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;  m               2   29[COMRAM] PTR struct DC_motor
  6426 ;;		 -> main@motorR(9), main@motorL(9), 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  PWMduty         2   38[COMRAM] int 
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      void 
  6431 ;; Registers used:
  6432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6439 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6440 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6441 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6442 ;;Total ram usage:       11 bytes
  6443 ;; Hardware stack levels used: 1
  6444 ;; Hardware stack levels required when called: 6
  6445 ;; This function calls:
  6446 ;;		___awdiv
  6447 ;;		___wmul
  6448 ;; This function is called by:
  6449 ;;		_stop
  6450 ;;		_move_forward
  6451 ;;		_move_backward
  6452 ;;		_TurnLeft
  6453 ;;		_TurnRight
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	text53
  6458  000764                     __ptext53:
  6459                           	callstack 0
  6460  000764                     _setMotorPWM:
  6461                           	callstack 23
  6462  000764                     
  6463                           ;dc_motor.c: 43:  int PWMduty;;dc_motor.c: 45:  if (m->direction){
  6464  000764  EE20 F001          	lfsr	2,1
  6465  000768  501E               	movf	setMotorPWM@m^0,w,c
  6466  00076A  26D9               	addwf	fsr2l,f,c
  6467  00076C  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6468  00076E  22DA               	addwfc	fsr2h,f,c
  6469  000770  50DF               	movf	indf2,w,c
  6470  000772  B4D8               	btfsc	status,2,c
  6471  000774  EFBE  F003         	goto	u2171
  6472  000778  EFC0  F003         	goto	u2170
  6473  00077C                     u2171:
  6474  00077C  EFF1  F003         	goto	l3234
  6475  000780                     u2170:
  6476  000780                     
  6477                           ;dc_motor.c: 46:   PWMduty = m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  6478  000780  C01E  FFD9         	movff	setMotorPWM@m,fsr2l
  6479  000784  C01F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6480  000788  50DF               	movf	indf2,w,c
  6481  00078A  6E20               	movwf	??_setMotorPWM^0,c
  6482  00078C  5020               	movf	??_setMotorPWM^0,w,c
  6483  00078E  6E10               	movwf	___wmul@multiplier^0,c
  6484  000790  6A11               	clrf	(___wmul@multiplier+1)^0,c
  6485  000792  EE20 F007          	lfsr	2,7
  6486  000796  501E               	movf	setMotorPWM@m^0,w,c
  6487  000798  26D9               	addwf	fsr2l,f,c
  6488  00079A  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6489  00079C  22DA               	addwfc	fsr2h,f,c
  6490  00079E  CFDE F012          	movff	postinc2,___wmul@multiplicand
  6491  0007A2  CFDD F013          	movff	postdec2,___wmul@multiplicand+1
  6492  0007A6  EC14  F00E         	call	___wmul	;wreg free
  6493  0007AA  C010  F016         	movff	?___wmul,___awdiv@dividend
  6494  0007AE  C011  F017         	movff	?___wmul+1,___awdiv@dividend+1
  6495  0007B2  0E00               	movlw	0
  6496  0007B4  6E19               	movwf	(___awdiv@divisor+1)^0,c
  6497  0007B6  0E64               	movlw	100
  6498  0007B8  6E18               	movwf	___awdiv@divisor^0,c
  6499  0007BA  ECFF  F008         	call	___awdiv	;wreg free
  6500  0007BE  EE20 F007          	lfsr	2,7
  6501  0007C2  501E               	movf	setMotorPWM@m^0,w,c
  6502  0007C4  26D9               	addwf	fsr2l,f,c
  6503  0007C6  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6504  0007C8  22DA               	addwfc	fsr2h,f,c
  6505  0007CA  CFDE F021          	movff	postinc2,??_setMotorPWM+1
  6506  0007CE  CFDD F022          	movff	postdec2,??_setMotorPWM+2
  6507  0007D2  5016               	movf	?___awdiv^0,w,c
  6508  0007D4  5C21               	subwf	(??_setMotorPWM+1)^0,w,c
  6509  0007D6  6E27               	movwf	setMotorPWM@PWMduty^0,c
  6510  0007D8  5017               	movf	(?___awdiv+1)^0,w,c
  6511  0007DA  5822               	subwfb	(??_setMotorPWM+2)^0,w,c
  6512  0007DC  6E28               	movwf	(setMotorPWM@PWMduty+1)^0,c
  6513                           
  6514                           ;dc_motor.c: 47:  }
  6515  0007DE  EF14  F004         	goto	l3236
  6516  0007E2                     l3234:
  6517                           
  6518                           ;dc_motor.c: 49:   PWMduty =((int)(m->power)*(m->PWMperiod))/100;
  6519  0007E2  C01E  FFD9         	movff	setMotorPWM@m,fsr2l
  6520  0007E6  C01F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6521  0007EA  50DF               	movf	indf2,w,c
  6522  0007EC  6E20               	movwf	??_setMotorPWM^0,c
  6523  0007EE  5020               	movf	??_setMotorPWM^0,w,c
  6524  0007F0  6E10               	movwf	___wmul@multiplier^0,c
  6525  0007F2  6A11               	clrf	(___wmul@multiplier+1)^0,c
  6526  0007F4  EE20 F007          	lfsr	2,7
  6527  0007F8  501E               	movf	setMotorPWM@m^0,w,c
  6528  0007FA  26D9               	addwf	fsr2l,f,c
  6529  0007FC  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6530  0007FE  22DA               	addwfc	fsr2h,f,c
  6531  000800  CFDE F012          	movff	postinc2,___wmul@multiplicand
  6532  000804  CFDD F013          	movff	postdec2,___wmul@multiplicand+1
  6533  000808  EC14  F00E         	call	___wmul	;wreg free
  6534  00080C  C010  F016         	movff	?___wmul,___awdiv@dividend
  6535  000810  C011  F017         	movff	?___wmul+1,___awdiv@dividend+1
  6536  000814  0E00               	movlw	0
  6537  000816  6E19               	movwf	(___awdiv@divisor+1)^0,c
  6538  000818  0E64               	movlw	100
  6539  00081A  6E18               	movwf	___awdiv@divisor^0,c
  6540  00081C  ECFF  F008         	call	___awdiv	;wreg free
  6541  000820  C016  F027         	movff	?___awdiv,setMotorPWM@PWMduty
  6542  000824  C017  F028         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  6543  000828                     l3236:
  6544                           
  6545                           ;dc_motor.c: 52:  *(m->dutyHighByte) = PWMduty;
  6546  000828  EE20 F002          	lfsr	2,2
  6547  00082C  501E               	movf	setMotorPWM@m^0,w,c
  6548  00082E  26D9               	addwf	fsr2l,f,c
  6549  000830  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6550  000832  22DA               	addwfc	fsr2h,f,c
  6551  000834  CFDE F020          	movff	postinc2,??_setMotorPWM
  6552  000838  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  6553  00083C  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  6554  000840  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6555  000844  C027  FFDF         	movff	setMotorPWM@PWMduty,indf2
  6556  000848                     
  6557                           ;dc_motor.c: 55:  if (m->direction){
  6558  000848  EE20 F001          	lfsr	2,1
  6559  00084C  501E               	movf	setMotorPWM@m^0,w,c
  6560  00084E  26D9               	addwf	fsr2l,f,c
  6561  000850  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6562  000852  22DA               	addwfc	fsr2h,f,c
  6563  000854  50DF               	movf	indf2,w,c
  6564  000856  B4D8               	btfsc	status,2,c
  6565  000858  EF30  F004         	goto	u2181
  6566  00085C  EF32  F004         	goto	u2180
  6567  000860                     u2181:
  6568  000860  EF67  F004         	goto	l3242
  6569  000864                     u2180:
  6570  000864                     
  6571                           ;dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  6572  000864  EE20 F004          	lfsr	2,4
  6573  000868  501E               	movf	setMotorPWM@m^0,w,c
  6574  00086A  26D9               	addwf	fsr2l,f,c
  6575  00086C  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6576  00086E  22DA               	addwfc	fsr2h,f,c
  6577  000870  CFDE F020          	movff	postinc2,??_setMotorPWM
  6578  000874  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  6579  000878  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  6580  00087C  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6581  000880  EE10 F004          	lfsr	1,4
  6582  000884  501E               	movf	setMotorPWM@m^0,w,c
  6583  000886  26E1               	addwf	fsr1l,f,c
  6584  000888  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6585  00088A  22E2               	addwfc	fsr1h,f,c
  6586  00088C  CFE6 F022          	movff	postinc1,??_setMotorPWM+2
  6587  000890  CFE5 F023          	movff	postdec1,??_setMotorPWM+3
  6588  000894  C022  FFE1         	movff	??_setMotorPWM+2,fsr1l
  6589  000898  C023  FFE2         	movff	??_setMotorPWM+3,fsr1h
  6590  00089C  50E7               	movf	indf1,w,c
  6591  00089E  6E24               	movwf	(??_setMotorPWM+4)^0,c
  6592  0008A0  EE10 F006          	lfsr	1,6
  6593  0008A4  501E               	movf	setMotorPWM@m^0,w,c
  6594  0008A6  26E1               	addwf	fsr1l,f,c
  6595  0008A8  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6596  0008AA  22E2               	addwfc	fsr1h,f,c
  6597  0008AC  50E7               	movf	indf1,w,c
  6598  0008AE  6E25               	movwf	(??_setMotorPWM+5)^0,c
  6599  0008B0  0E01               	movlw	1
  6600  0008B2  6E26               	movwf	(??_setMotorPWM+6)^0,c
  6601  0008B4  2A25               	incf	(??_setMotorPWM+5)^0,f,c
  6602  0008B6  EF5F  F004         	goto	u2194
  6603  0008BA                     u2195:
  6604  0008BA  90D8               	bcf	status,0,c
  6605  0008BC  3626               	rlcf	(??_setMotorPWM+6)^0,f,c
  6606  0008BE                     u2194:
  6607  0008BE  2E25               	decfsz	(??_setMotorPWM+5)^0,f,c
  6608  0008C0  EF5D  F004         	goto	u2195
  6609  0008C4  5026               	movf	(??_setMotorPWM+6)^0,w,c
  6610  0008C6  1024               	iorwf	(??_setMotorPWM+4)^0,w,c
  6611  0008C8  6EDF               	movwf	indf2,c
  6612                           
  6613                           ;dc_motor.c: 57:  } else {
  6614  0008CA  EF9B  F004         	goto	l241
  6615  0008CE                     l3242:
  6616                           
  6617                           ;dc_motor.c: 58:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  6618  0008CE  EE20 F004          	lfsr	2,4
  6619  0008D2  501E               	movf	setMotorPWM@m^0,w,c
  6620  0008D4  26D9               	addwf	fsr2l,f,c
  6621  0008D6  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6622  0008D8  22DA               	addwfc	fsr2h,f,c
  6623  0008DA  CFDE F020          	movff	postinc2,??_setMotorPWM
  6624  0008DE  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  6625  0008E2  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  6626  0008E6  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6627  0008EA  EE10 F004          	lfsr	1,4
  6628  0008EE  501E               	movf	setMotorPWM@m^0,w,c
  6629  0008F0  26E1               	addwf	fsr1l,f,c
  6630  0008F2  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6631  0008F4  22E2               	addwfc	fsr1h,f,c
  6632  0008F6  CFE6 F022          	movff	postinc1,??_setMotorPWM+2
  6633  0008FA  CFE5 F023          	movff	postdec1,??_setMotorPWM+3
  6634  0008FE  C022  FFE1         	movff	??_setMotorPWM+2,fsr1l
  6635  000902  C023  FFE2         	movff	??_setMotorPWM+3,fsr1h
  6636  000906  50E7               	movf	indf1,w,c
  6637  000908  6E24               	movwf	(??_setMotorPWM+4)^0,c
  6638  00090A  EE10 F006          	lfsr	1,6
  6639  00090E  501E               	movf	setMotorPWM@m^0,w,c
  6640  000910  26E1               	addwf	fsr1l,f,c
  6641  000912  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6642  000914  22E2               	addwfc	fsr1h,f,c
  6643  000916  50E7               	movf	indf1,w,c
  6644  000918  6E25               	movwf	(??_setMotorPWM+5)^0,c
  6645  00091A  0E01               	movlw	1
  6646  00091C  6E26               	movwf	(??_setMotorPWM+6)^0,c
  6647  00091E  2A25               	incf	(??_setMotorPWM+5)^0,f,c
  6648  000920  EF94  F004         	goto	u2204
  6649  000924                     u2205:
  6650  000924  90D8               	bcf	status,0,c
  6651  000926  3626               	rlcf	(??_setMotorPWM+6)^0,f,c
  6652  000928                     u2204:
  6653  000928  2E25               	decfsz	(??_setMotorPWM+5)^0,f,c
  6654  00092A  EF92  F004         	goto	u2205
  6655  00092E  5026               	movf	(??_setMotorPWM+6)^0,w,c
  6656  000930  0AFF               	xorlw	255
  6657  000932  1424               	andwf	(??_setMotorPWM+4)^0,w,c
  6658  000934  6EDF               	movwf	indf2,c
  6659  000936                     l241:
  6660  000936  0012               	return		;funcret
  6661  000938                     __end_of_setMotorPWM:
  6662                           	callstack 0
  6663                           
  6664 ;; *************** function ___wmul *****************
  6665 ;; Defined at:
  6666 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
  6667 ;; Parameters:    Size  Location     Type
  6668 ;;  multiplier      2   15[COMRAM] unsigned int 
  6669 ;;  multiplicand    2   17[COMRAM] unsigned int 
  6670 ;; Auto vars:     Size  Location     Type
  6671 ;;  product         2   19[COMRAM] unsigned int 
  6672 ;; Return value:  Size  Location     Type
  6673 ;;                  2   15[COMRAM] unsigned int 
  6674 ;; Registers used:
  6675 ;;		wreg, status,2, status,0, prodl, prodh
  6676 ;; Tracked objects:
  6677 ;;		On entry : 0/0
  6678 ;;		On exit  : 0/0
  6679 ;;		Unchanged: 0/0
  6680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6681 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6684 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6685 ;;Total ram usage:        6 bytes
  6686 ;; Hardware stack levels used: 1
  6687 ;; Hardware stack levels required when called: 5
  6688 ;; This function calls:
  6689 ;;		Nothing
  6690 ;; This function is called by:
  6691 ;;		_setMotorPWM
  6692 ;; This function uses a non-reentrant model
  6693 ;;
  6694                           
  6695                           	psect	text54
  6696  001C28                     __ptext54:
  6697                           	callstack 0
  6698  001C28                     ___wmul:
  6699                           	callstack 23
  6700  001C28  5010               	movf	___wmul@multiplier^0,w,c
  6701  001C2A  0212               	mulwf	___wmul@multiplicand^0,c
  6702  001C2C  CFF3 F014          	movff	prodl,___wmul@product
  6703  001C30  CFF4 F015          	movff	prodh,___wmul@product+1
  6704  001C34  5010               	movf	___wmul@multiplier^0,w,c
  6705  001C36  0213               	mulwf	(___wmul@multiplicand+1)^0,c
  6706  001C38  50F3               	movf	243,w,c
  6707  001C3A  2615               	addwf	(___wmul@product+1)^0,f,c
  6708  001C3C  5011               	movf	(___wmul@multiplier+1)^0,w,c
  6709  001C3E  0212               	mulwf	___wmul@multiplicand^0,c
  6710  001C40  50F3               	movf	243,w,c
  6711  001C42  2615               	addwf	(___wmul@product+1)^0,f,c
  6712  001C44  C014  F010         	movff	___wmul@product,?___wmul
  6713  001C48  C015  F011         	movff	___wmul@product+1,?___wmul+1
  6714  001C4C  0012               	return		;funcret
  6715  001C4E                     __end_of___wmul:
  6716                           	callstack 0
  6717                           
  6718 ;; *************** function ___awdiv *****************
  6719 ;; Defined at:
  6720 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;  dividend        2   21[COMRAM] int 
  6723 ;;  divisor         2   23[COMRAM] int 
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;  quotient        2   27[COMRAM] int 
  6726 ;;  sign            1   26[COMRAM] unsigned char 
  6727 ;;  counter         1   25[COMRAM] unsigned char 
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  2   21[COMRAM] int 
  6730 ;; Registers used:
  6731 ;;		wreg, status,2, status,0
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6737 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6738 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6740 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6741 ;;Total ram usage:        8 bytes
  6742 ;; Hardware stack levels used: 1
  6743 ;; Hardware stack levels required when called: 5
  6744 ;; This function calls:
  6745 ;;		Nothing
  6746 ;; This function is called by:
  6747 ;;		_setMotorPWM
  6748 ;;		_PrepareForTurn
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           	psect	text55
  6753  0011FE                     __ptext55:
  6754                           	callstack 0
  6755  0011FE                     ___awdiv:
  6756                           	callstack 23
  6757  0011FE  0E00               	movlw	0
  6758  001200  6E1B               	movwf	___awdiv@sign^0,c
  6759  001202  BE19               	btfsc	(___awdiv@divisor+1)^0,7,c
  6760  001204  EF08  F009         	goto	u2110
  6761  001208  EF06  F009         	goto	u2111
  6762  00120C                     u2111:
  6763  00120C  EF0E  F009         	goto	l3194
  6764  001210                     u2110:
  6765  001210  6C18               	negf	___awdiv@divisor^0,c
  6766  001212  1E19               	comf	(___awdiv@divisor+1)^0,f,c
  6767  001214  B0D8               	btfsc	status,0,c
  6768  001216  2A19               	incf	(___awdiv@divisor+1)^0,f,c
  6769  001218  0E01               	movlw	1
  6770  00121A  6E1B               	movwf	___awdiv@sign^0,c
  6771  00121C                     l3194:
  6772  00121C  BE17               	btfsc	(___awdiv@dividend+1)^0,7,c
  6773  00121E  EF15  F009         	goto	u2120
  6774  001222  EF13  F009         	goto	u2121
  6775  001226                     u2121:
  6776  001226  EF1B  F009         	goto	l3200
  6777  00122A                     u2120:
  6778  00122A  6C16               	negf	___awdiv@dividend^0,c
  6779  00122C  1E17               	comf	(___awdiv@dividend+1)^0,f,c
  6780  00122E  B0D8               	btfsc	status,0,c
  6781  001230  2A17               	incf	(___awdiv@dividend+1)^0,f,c
  6782  001232  0E01               	movlw	1
  6783  001234  1A1B               	xorwf	___awdiv@sign^0,f,c
  6784  001236                     l3200:
  6785  001236  0E00               	movlw	0
  6786  001238  6E1D               	movwf	(___awdiv@quotient+1)^0,c
  6787  00123A  0E00               	movlw	0
  6788  00123C  6E1C               	movwf	___awdiv@quotient^0,c
  6789  00123E  5018               	movf	___awdiv@divisor^0,w,c
  6790  001240  1019               	iorwf	(___awdiv@divisor+1)^0,w,c
  6791  001242  B4D8               	btfsc	status,2,c
  6792  001244  EF26  F009         	goto	u2131
  6793  001248  EF28  F009         	goto	u2130
  6794  00124C                     u2131:
  6795  00124C  EF50  F009         	goto	l3222
  6796  001250                     u2130:
  6797  001250  0E01               	movlw	1
  6798  001252  6E1A               	movwf	___awdiv@counter^0,c
  6799  001254  EF30  F009         	goto	l3208
  6800  001258                     l3206:
  6801  001258  90D8               	bcf	status,0,c
  6802  00125A  3618               	rlcf	___awdiv@divisor^0,f,c
  6803  00125C  3619               	rlcf	(___awdiv@divisor+1)^0,f,c
  6804  00125E  2A1A               	incf	___awdiv@counter^0,f,c
  6805  001260                     l3208:
  6806  001260  AE19               	btfss	(___awdiv@divisor+1)^0,7,c
  6807  001262  EF35  F009         	goto	u2141
  6808  001266  EF37  F009         	goto	u2140
  6809  00126A                     u2141:
  6810  00126A  EF2C  F009         	goto	l3206
  6811  00126E                     u2140:
  6812  00126E                     l3210:
  6813  00126E  90D8               	bcf	status,0,c
  6814  001270  361C               	rlcf	___awdiv@quotient^0,f,c
  6815  001272  361D               	rlcf	(___awdiv@quotient+1)^0,f,c
  6816  001274  5018               	movf	___awdiv@divisor^0,w,c
  6817  001276  5C16               	subwf	___awdiv@dividend^0,w,c
  6818  001278  5019               	movf	(___awdiv@divisor+1)^0,w,c
  6819  00127A  5817               	subwfb	(___awdiv@dividend+1)^0,w,c
  6820  00127C  A0D8               	btfss	status,0,c
  6821  00127E  EF43  F009         	goto	u2151
  6822  001282  EF45  F009         	goto	u2150
  6823  001286                     u2151:
  6824  001286  EF4A  F009         	goto	l3218
  6825  00128A                     u2150:
  6826  00128A  5018               	movf	___awdiv@divisor^0,w,c
  6827  00128C  5E16               	subwf	___awdiv@dividend^0,f,c
  6828  00128E  5019               	movf	(___awdiv@divisor+1)^0,w,c
  6829  001290  5A17               	subwfb	(___awdiv@dividend+1)^0,f,c
  6830  001292  801C               	bsf	___awdiv@quotient^0,0,c
  6831  001294                     l3218:
  6832  001294  90D8               	bcf	status,0,c
  6833  001296  3219               	rrcf	(___awdiv@divisor+1)^0,f,c
  6834  001298  3218               	rrcf	___awdiv@divisor^0,f,c
  6835  00129A  2E1A               	decfsz	___awdiv@counter^0,f,c
  6836  00129C  EF37  F009         	goto	l3210
  6837  0012A0                     l3222:
  6838  0012A0  501B               	movf	___awdiv@sign^0,w,c
  6839  0012A2  B4D8               	btfsc	status,2,c
  6840  0012A4  EF56  F009         	goto	u2161
  6841  0012A8  EF58  F009         	goto	u2160
  6842  0012AC                     u2161:
  6843  0012AC  EF5C  F009         	goto	l3226
  6844  0012B0                     u2160:
  6845  0012B0  6C1C               	negf	___awdiv@quotient^0,c
  6846  0012B2  1E1D               	comf	(___awdiv@quotient+1)^0,f,c
  6847  0012B4  B0D8               	btfsc	status,0,c
  6848  0012B6  2A1D               	incf	(___awdiv@quotient+1)^0,f,c
  6849  0012B8                     l3226:
  6850  0012B8  C01C  F016         	movff	___awdiv@quotient,?___awdiv
  6851  0012BC  C01D  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  6852  0012C0  0012               	return		;funcret
  6853  0012C2                     __end_of___awdiv:
  6854                           	callstack 0
  6855                           
  6856 ;; *************** function _custom_delay_ms *****************
  6857 ;; Defined at:
  6858 ;;		line 29 in file "timers.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  delay_time      2   15[COMRAM] int 
  6861 ;; Auto vars:     Size  Location     Type
  6862 ;;  i               2   18[COMRAM] unsigned int 
  6863 ;; Return value:  Size  Location     Type
  6864 ;;                  1    wreg      void 
  6865 ;; Registers used:
  6866 ;;		wreg, status,2, status,0
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6872 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6874 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6875 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6876 ;;Total ram usage:        5 bytes
  6877 ;; Hardware stack levels used: 1
  6878 ;; Hardware stack levels required when called: 5
  6879 ;; This function calls:
  6880 ;;		Nothing
  6881 ;; This function is called by:
  6882 ;;		_move_forward
  6883 ;;		_move_backward
  6884 ;;		_TurnLeft
  6885 ;;		_TurnRight
  6886 ;; This function uses a non-reentrant model
  6887 ;;
  6888                           
  6889                           	psect	text56
  6890  001AB0                     __ptext56:
  6891                           	callstack 0
  6892  001AB0                     _custom_delay_ms:
  6893                           	callstack 21
  6894  001AB0                     
  6895                           ;timers.c: 30:     for(unsigned int i=0;i<delay_time;i++){
  6896  001AB0  0E00               	movlw	0
  6897  001AB2  6E14               	movwf	(custom_delay_ms@i+1)^0,c
  6898  001AB4  0E00               	movlw	0
  6899  001AB6  6E13               	movwf	custom_delay_ms@i^0,c
  6900  001AB8  EF68  F00D         	goto	l502
  6901  001ABC                     l3266:
  6902                           
  6903                           ;timers.c: 31:         _delay((unsigned long)((1)*(64000000/4000.0)));
  6904  001ABC  0E15               	movlw	21
  6905  001ABE  6E12               	movwf	??_custom_delay_ms^0,c
  6906  001AC0  0EC6               	movlw	198
  6907  001AC2                     u3247:
  6908  001AC2  2EE8               	decfsz	wreg,f,c
  6909  001AC4  D7FE               	bra	u3247
  6910  001AC6  2E12               	decfsz	??_custom_delay_ms^0,f,c
  6911  001AC8  D7FC               	bra	u3247
  6912  001ACA  D000               	nop2	
  6913  001ACC                     
  6914                           ;timers.c: 32:     }
  6915  001ACC  4A13               	infsnz	custom_delay_ms@i^0,f,c
  6916  001ACE  2A14               	incf	(custom_delay_ms@i+1)^0,f,c
  6917  001AD0                     l502:
  6918  001AD0  5010               	movf	custom_delay_ms@delay_time^0,w,c
  6919  001AD2  5C13               	subwf	custom_delay_ms@i^0,w,c
  6920  001AD4  5011               	movf	(custom_delay_ms@delay_time+1)^0,w,c
  6921  001AD6  5814               	subwfb	(custom_delay_ms@i+1)^0,w,c
  6922  001AD8  A0D8               	btfss	status,0,c
  6923  001ADA  EF71  F00D         	goto	u2241
  6924  001ADE  EF73  F00D         	goto	u2240
  6925  001AE2                     u2241:
  6926  001AE2  EF5E  F00D         	goto	l3266
  6927  001AE6                     u2240:
  6928  001AE6  0012               	return		;funcret
  6929  001AE8                     __end_of_custom_delay_ms:
  6930                           	callstack 0
  6931                           
  6932 ;; *************** function _LightsToggle *****************
  6933 ;; Defined at:
  6934 ;;		line 51 in file "LEDsButtons.c"
  6935 ;; Parameters:    Size  Location     Type
  6936 ;;		None
  6937 ;; Auto vars:     Size  Location     Type
  6938 ;;  i               1   17[COMRAM] unsigned char 
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  1    wreg      void 
  6941 ;; Registers used:
  6942 ;;		wreg, status,2, status,0
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6949 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6950 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6951 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6952 ;;Total ram usage:        3 bytes
  6953 ;; Hardware stack levels used: 1
  6954 ;; Hardware stack levels required when called: 5
  6955 ;; This function calls:
  6956 ;;		Nothing
  6957 ;; This function is called by:
  6958 ;;		_interrupt_threshold_calibrate
  6959 ;;		_CalibrateTurns
  6960 ;;		_CalibrateReverseSquare
  6961 ;;		_pick_move
  6962 ;;		_white_move
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           	psect	text57
  6967  001380                     __ptext57:
  6968                           	callstack 0
  6969  001380                     _LightsToggle:
  6970                           	callstack 23
  6971  001380                     
  6972                           ;LEDsButtons.c: 52:     for(char i=0; i <4;i++){
  6973  001380  0E00               	movlw	0
  6974  001382  6E12               	movwf	LightsToggle@i^0,c
  6975  001384                     l3410:
  6976                           
  6977                           ;LEDsButtons.c: 53:         LATDbits.LATD7 = !LATDbits.LATD7;
  6978  001384  AE7C               	btfss	124,7,c	;volatile
  6979  001386  EFC7  F009         	goto	u2341
  6980  00138A  EFCB  F009         	goto	u2340
  6981  00138E                     u2341:
  6982  00138E  6A10               	clrf	??_LightsToggle^0,c
  6983  001390  2A10               	incf	??_LightsToggle^0,f,c
  6984  001392  EFCC  F009         	goto	u2358
  6985  001396                     u2340:
  6986  001396  6A10               	clrf	??_LightsToggle^0,c
  6987  001398                     u2358:
  6988  001398  3210               	rrcf	??_LightsToggle^0,f,c
  6989  00139A  3210               	rrcf	??_LightsToggle^0,f,c
  6990  00139C  507C               	movf	124,w,c	;volatile
  6991  00139E  1810               	xorwf	??_LightsToggle^0,w,c
  6992  0013A0  0B7F               	andlw	-129
  6993  0013A2  1810               	xorwf	??_LightsToggle^0,w,c
  6994  0013A4  6E7C               	movwf	124,c	;volatile
  6995                           
  6996                           ;LEDsButtons.c: 54:         LATHbits.LATH3 = !LATHbits.LATH3;
  6997  0013A6  A680               	btfss	128,3,c	;volatile
  6998  0013A8  EFD8  F009         	goto	u2361
  6999  0013AC  EFDC  F009         	goto	u2360
  7000  0013B0                     u2361:
  7001  0013B0  6A10               	clrf	??_LightsToggle^0,c
  7002  0013B2  2A10               	incf	??_LightsToggle^0,f,c
  7003  0013B4  EFDD  F009         	goto	u2378
  7004  0013B8                     u2360:
  7005  0013B8  6A10               	clrf	??_LightsToggle^0,c
  7006  0013BA                     u2378:
  7007  0013BA  4610               	rlncf	??_LightsToggle^0,f,c
  7008  0013BC  4610               	rlncf	??_LightsToggle^0,f,c
  7009  0013BE  4610               	rlncf	??_LightsToggle^0,f,c
  7010  0013C0  5080               	movf	128,w,c	;volatile
  7011  0013C2  1810               	xorwf	??_LightsToggle^0,w,c
  7012  0013C4  0BF7               	andlw	-9
  7013  0013C6  1810               	xorwf	??_LightsToggle^0,w,c
  7014  0013C8  6E80               	movwf	128,c	;volatile
  7015                           
  7016                           ;LEDsButtons.c: 55:         LATDbits.LATD4 = !LATDbits.LATD4;
  7017  0013CA  A87C               	btfss	124,4,c	;volatile
  7018  0013CC  EFEA  F009         	goto	u2381
  7019  0013D0  EFEE  F009         	goto	u2380
  7020  0013D4                     u2381:
  7021  0013D4  6A10               	clrf	??_LightsToggle^0,c
  7022  0013D6  2A10               	incf	??_LightsToggle^0,f,c
  7023  0013D8  EFEF  F009         	goto	u2398
  7024  0013DC                     u2380:
  7025  0013DC  6A10               	clrf	??_LightsToggle^0,c
  7026  0013DE                     u2398:
  7027  0013DE  3A10               	swapf	??_LightsToggle^0,f,c
  7028  0013E0  507C               	movf	124,w,c	;volatile
  7029  0013E2  1810               	xorwf	??_LightsToggle^0,w,c
  7030  0013E4  0BEF               	andlw	-17
  7031  0013E6  1810               	xorwf	??_LightsToggle^0,w,c
  7032  0013E8  6E7C               	movwf	124,c	;volatile
  7033  0013EA                     
  7034                           ;LEDsButtons.c: 56:         _delay((unsigned long)((500)*(64000000/4000.0)));
  7035  0013EA  0E29               	movlw	41
  7036  0013EC  6E11               	movwf	(??_LightsToggle+1)^0,c
  7037  0013EE  0E96               	movlw	150
  7038  0013F0  6E10               	movwf	??_LightsToggle^0,c
  7039  0013F2  0E7F               	movlw	127
  7040  0013F4                     u3257:
  7041  0013F4  2EE8               	decfsz	wreg,f,c
  7042  0013F6  D7FE               	bra	u3257
  7043  0013F8  2E10               	decfsz	??_LightsToggle^0,f,c
  7044  0013FA  D7FC               	bra	u3257
  7045  0013FC  2E11               	decfsz	(??_LightsToggle+1)^0,f,c
  7046  0013FE  D7FA               	bra	u3257
  7047  001400  F000               	nop	
  7048                           
  7049                           ;LEDsButtons.c: 57:     }
  7050  001402  2A12               	incf	LightsToggle@i^0,f,c
  7051  001404  0E03               	movlw	3
  7052  001406  6412               	cpfsgt	LightsToggle@i^0,c
  7053  001408  EF08  F00A         	goto	u2401
  7054  00140C  EF0A  F00A         	goto	u2400
  7055  001410                     u2401:
  7056  001410  EFC2  F009         	goto	l3410
  7057  001414                     u2400:
  7058  001414                     
  7059                           ;LEDsButtons.c: 58:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7060  001414  0E29               	movlw	41
  7061  001416  6E11               	movwf	(??_LightsToggle+1)^0,c
  7062  001418  0E96               	movlw	150
  7063  00141A  6E10               	movwf	??_LightsToggle^0,c
  7064  00141C  0E7F               	movlw	127
  7065  00141E                     u3267:
  7066  00141E  2EE8               	decfsz	wreg,f,c
  7067  001420  D7FE               	bra	u3267
  7068  001422  2E10               	decfsz	??_LightsToggle^0,f,c
  7069  001424  D7FC               	bra	u3267
  7070  001426  2E11               	decfsz	(??_LightsToggle+1)^0,f,c
  7071  001428  D7FA               	bra	u3267
  7072  00142A  F000               	nop	
  7073  00142C  0012               	return		;funcret
  7074  00142E                     __end_of_LightsToggle:
  7075                           	callstack 0
  7076                           
  7077 ;; *************** function _HighISR *****************
  7078 ;; Defined at:
  7079 ;;		line 26 in file "interrupts.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;		None
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;		None
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  1    wreg      void 
  7086 ;; Registers used:
  7087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7095 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7096 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7097 ;;Total ram usage:        4 bytes
  7098 ;; Hardware stack levels used: 1
  7099 ;; Hardware stack levels required when called: 4
  7100 ;; This function calls:
  7101 ;;		i2_color_click_interrupt_off
  7102 ;;		i2_getTMR0_in_ms
  7103 ;; This function is called by:
  7104 ;;		Interrupt level 2
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           	psect	intcode
  7109  000008                     __pintcode:
  7110                           	callstack 0
  7111  000008                     _HighISR:
  7112                           	callstack 17
  7113                           
  7114                           ;incstack = 0
  7115  000008  8250               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7116  00000A  CFD9 F00C          	movff	fsr2l,??_HighISR
  7117  00000E  CFDA F00D          	movff	fsr2h,??_HighISR+1
  7118  000012  CFF3 F00E          	movff	prodl,??_HighISR+2
  7119  000016  CFF4 F00F          	movff	prodh,??_HighISR+3
  7120  00001A                     
  7121                           ;interrupts.c: 28:     if(PIR0bits.INT0IF){
  7122  00001A  010E               	movlb	14	; () banked
  7123  00001C  A133               	btfss	51,0,b	;volatile
  7124  00001E  EF13  F000         	goto	i2u209_41
  7125  000022  EF15  F000         	goto	i2u209_40
  7126  000026                     i2u209_41:
  7127  000026  EF1F  F000         	goto	i2l3172
  7128  00002A                     i2u209_40:
  7129  00002A                     
  7130                           ; BSR set to: 14
  7131                           ;interrupts.c: 29:         getTMR0_in_ms();
  7132  00002A  ECC0  F00D         	call	i2_getTMR0_in_ms	;wreg free
  7133  00002E                     
  7134                           ;interrupts.c: 30:         LATDbits.LATD4 = 1;
  7135  00002E  887C               	bsf	124,4,c	;volatile
  7136  000030                     
  7137                           ;interrupts.c: 31:         color_flag = 1;
  7138  000030  0E01               	movlw	1
  7139  000032  0100               	movlb	0	; () banked
  7140  000034  6F9C               	movwf	_color_flag& (0+255),b
  7141  000036                     
  7142                           ; BSR set to: 0
  7143                           ;interrupts.c: 32:         color_click_interrupt_off();
  7144  000036  ECC4  F00E         	call	i2_color_click_interrupt_off	;wreg free
  7145  00003A                     
  7146                           ;interrupts.c: 33:         PIR0bits.INT0IF = 0;
  7147  00003A  010E               	movlb	14	; () banked
  7148  00003C  9133               	bcf	51,0,b	;volatile
  7149  00003E                     i2l3172:
  7150                           
  7151                           ; BSR set to: 14
  7152                           ;interrupts.c: 37:     if(PIR0bits.TMR0IF == 1) {
  7153  00003E  AB33               	btfss	51,5,b	;volatile
  7154  000040  EF24  F000         	goto	i2u210_41
  7155  000044  EF26  F000         	goto	i2u210_40
  7156  000048                     i2u210_41:
  7157  000048  EF2C  F000         	goto	i2l456
  7158  00004C                     i2u210_40:
  7159  00004C                     
  7160                           ; BSR set to: 14
  7161                           ;interrupts.c: 38:         lost_flag = 1;
  7162  00004C  0E01               	movlw	1
  7163  00004E  0100               	movlb	0	; () banked
  7164  000050  6F9D               	movwf	_lost_flag& (0+255),b
  7165  000052                     
  7166                           ; BSR set to: 0
  7167                           ;interrupts.c: 39:         PIR0bits.TMR0IF = 0;
  7168  000052  010E               	movlb	14	; () banked
  7169  000054  9B33               	bcf	51,5,b	;volatile
  7170  000056                     
  7171                           ; BSR set to: 14
  7172                           ;interrupts.c: 40:         PIE0bits.TMR0IE = 0;
  7173  000056  9B29               	bcf	41,5,b	;volatile
  7174  000058                     i2l456:
  7175                           
  7176                           ; BSR set to: 14
  7177  000058  C00F  FFF4         	movff	??_HighISR+3,prodh
  7178  00005C  C00E  FFF3         	movff	??_HighISR+2,prodl
  7179  000060  C00D  FFDA         	movff	??_HighISR+1,fsr2h
  7180  000064  C00C  FFD9         	movff	??_HighISR,fsr2l
  7181  000068  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7182  00006A  0011               	retfie		f
  7183  00006C                     __end_of_HighISR:
  7184                           	callstack 0
  7185                           
  7186 ;; *************** function i2_getTMR0_in_ms *****************
  7187 ;; Defined at:
  7188 ;;		line 16 in file "timers.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;		None
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  temp            2    9[COMRAM] unsigned int 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      void 
  7195 ;; Registers used:
  7196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7203 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7205 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7206 ;;Total ram usage:        2 bytes
  7207 ;; Hardware stack levels used: 1
  7208 ;; Hardware stack levels required when called: 1
  7209 ;; This function calls:
  7210 ;;		i2___lwdiv
  7211 ;;		i2_add_timing
  7212 ;; This function is called by:
  7213 ;;		_HighISR
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           	psect	text59
  7218  001B80                     __ptext59:
  7219                           	callstack 0
  7220  001B80                     i2_getTMR0_in_ms:
  7221                           	callstack 19
  7222  001B80  50D3               	movf	211,w,c	;volatile
  7223  001B82                     
  7224                           ;timers.c: 18:     temp = TMR0H<<8;
  7225  001B82  50D4               	movf	212,w,c	;volatile
  7226  001B84  6E0B               	movwf	(i2getTMR0_in_ms@temp+1)^0,c
  7227  001B86  6A0A               	clrf	i2getTMR0_in_ms@temp^0,c
  7228  001B88                     
  7229                           ;timers.c: 19:     add_timing(temp + temp / 42 );
  7230  001B88  C00A  F001         	movff	i2getTMR0_in_ms@temp,i2___lwdiv@dividend
  7231  001B8C  C00B  F002         	movff	i2getTMR0_in_ms@temp+1,i2___lwdiv@dividend+1
  7232  001B90  0E00               	movlw	0
  7233  001B92  6E04               	movwf	(i2___lwdiv@divisor+1)^0,c
  7234  001B94  0E2A               	movlw	42
  7235  001B96  6E03               	movwf	i2___lwdiv@divisor^0,c
  7236  001B98  EC51  F00A         	call	i2___lwdiv	;wreg free
  7237  001B9C  500A               	movf	i2getTMR0_in_ms@temp^0,w,c
  7238  001B9E  2401               	addwf	?i2___lwdiv^0,w,c
  7239  001BA0  6E08               	movwf	i2add_timing@timing^0,c
  7240  001BA2  500B               	movf	(i2getTMR0_in_ms@temp+1)^0,w,c
  7241  001BA4  2002               	addwfc	(?i2___lwdiv+1)^0,w,c
  7242  001BA6  6E09               	movwf	(i2add_timing@timing+1)^0,c
  7243  001BA8  EC95  F00E         	call	i2_add_timing	;wreg free
  7244  001BAC  0012               	return		;funcret
  7245  001BAE                     __end_ofi2_getTMR0_in_ms:
  7246                           	callstack 0
  7247                           
  7248 ;; *************** function i2_add_timing *****************
  7249 ;; Defined at:
  7250 ;;		line 22 in file "Memory.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;  timing          2    7[COMRAM] unsigned int 
  7253 ;; Auto vars:     Size  Location     Type
  7254 ;;		None
  7255 ;; Return value:  Size  Location     Type
  7256 ;;                  1    wreg      void 
  7257 ;; Registers used:
  7258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7259 ;; Tracked objects:
  7260 ;;		On entry : 0/0
  7261 ;;		On exit  : 0/0
  7262 ;;		Unchanged: 0/0
  7263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7267 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7268 ;;Total ram usage:        2 bytes
  7269 ;; Hardware stack levels used: 1
  7270 ;; This function calls:
  7271 ;;		Nothing
  7272 ;; This function is called by:
  7273 ;;		i2_getTMR0_in_ms
  7274 ;; This function uses a non-reentrant model
  7275 ;;
  7276                           
  7277                           	psect	text60
  7278  001D2A                     __ptext60:
  7279                           	callstack 0
  7280  001D2A                     i2_add_timing:
  7281                           	callstack 19
  7282  001D2A                     
  7283                           ;Memory.c: 23:     timeList[time_index++] = timing;
  7284  001D2A  0100               	movlb	0	; () banked
  7285  001D2C  519E               	movf	_time_index& (0+255),w,b
  7286  001D2E  0D02               	mullw	2
  7287  001D30  0E60               	movlw	low _timeList
  7288  001D32  24F3               	addwf	243,w,c
  7289  001D34  6ED9               	movwf	fsr2l,c
  7290  001D36  0E00               	movlw	high _timeList
  7291  001D38  20F4               	addwfc	prodh,w,c
  7292  001D3A  6EDA               	movwf	fsr2h,c
  7293  001D3C  C008  FFDE         	movff	i2add_timing@timing,postinc2
  7294  001D40  C009  FFDD         	movff	i2add_timing@timing+1,postdec2
  7295  001D44                     
  7296                           ; BSR set to: 0
  7297  001D44  2B9E               	incf	_time_index& (0+255),f,b
  7298  001D46                     
  7299                           ; BSR set to: 0
  7300  001D46  0012               	return		;funcret
  7301  001D48                     __end_ofi2_add_timing:
  7302                           	callstack 0
  7303                           
  7304 ;; *************** function i2___lwdiv *****************
  7305 ;; Defined at:
  7306 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;  dividend        2    0[COMRAM] unsigned int 
  7309 ;;  divisor         2    2[COMRAM] unsigned int 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  quotient        2    4[COMRAM] unsigned int 
  7312 ;;  counter         1    6[COMRAM] unsigned char 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  2    0[COMRAM] unsigned int 
  7315 ;; Registers used:
  7316 ;;		wreg, status,2, status,0
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7322 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7323 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7325 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7326 ;;Total ram usage:        7 bytes
  7327 ;; Hardware stack levels used: 1
  7328 ;; This function calls:
  7329 ;;		Nothing
  7330 ;; This function is called by:
  7331 ;;		i2_getTMR0_in_ms
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           	psect	text61
  7336  0014A2                     __ptext61:
  7337                           	callstack 0
  7338  0014A2                     i2___lwdiv:
  7339                           	callstack 19
  7340  0014A2  0E00               	movlw	0
  7341  0014A4  6E06               	movwf	(i2___lwdiv@quotient+1)^0,c
  7342  0014A6  0E00               	movlw	0
  7343  0014A8  6E05               	movwf	i2___lwdiv@quotient^0,c
  7344  0014AA  5003               	movf	i2___lwdiv@divisor^0,w,c
  7345  0014AC  1004               	iorwf	(i2___lwdiv@divisor+1)^0,w,c
  7346  0014AE  B4D8               	btfsc	status,2,c
  7347  0014B0  EF5C  F00A         	goto	i2u156_41
  7348  0014B4  EF5E  F00A         	goto	i2u156_40
  7349  0014B8                     i2u156_41:
  7350  0014B8  EF86  F00A         	goto	i2l1210
  7351  0014BC                     i2u156_40:
  7352  0014BC  0E01               	movlw	1
  7353  0014BE  6E07               	movwf	i2___lwdiv@counter^0,c
  7354  0014C0  EF66  F00A         	goto	i2l2758
  7355  0014C4                     i2l2756:
  7356  0014C4  90D8               	bcf	status,0,c
  7357  0014C6  3603               	rlcf	i2___lwdiv@divisor^0,f,c
  7358  0014C8  3604               	rlcf	(i2___lwdiv@divisor+1)^0,f,c
  7359  0014CA  2A07               	incf	i2___lwdiv@counter^0,f,c
  7360  0014CC                     i2l2758:
  7361  0014CC  AE04               	btfss	(i2___lwdiv@divisor+1)^0,7,c
  7362  0014CE  EF6B  F00A         	goto	i2u157_41
  7363  0014D2  EF6D  F00A         	goto	i2u157_40
  7364  0014D6                     i2u157_41:
  7365  0014D6  EF62  F00A         	goto	i2l2756
  7366  0014DA                     i2u157_40:
  7367  0014DA                     i2l2760:
  7368  0014DA  90D8               	bcf	status,0,c
  7369  0014DC  3605               	rlcf	i2___lwdiv@quotient^0,f,c
  7370  0014DE  3606               	rlcf	(i2___lwdiv@quotient+1)^0,f,c
  7371  0014E0  5003               	movf	i2___lwdiv@divisor^0,w,c
  7372  0014E2  5C01               	subwf	i2___lwdiv@dividend^0,w,c
  7373  0014E4  5004               	movf	(i2___lwdiv@divisor+1)^0,w,c
  7374  0014E6  5802               	subwfb	(i2___lwdiv@dividend+1)^0,w,c
  7375  0014E8  A0D8               	btfss	status,0,c
  7376  0014EA  EF79  F00A         	goto	i2u158_41
  7377  0014EE  EF7B  F00A         	goto	i2u158_40
  7378  0014F2                     i2u158_41:
  7379  0014F2  EF80  F00A         	goto	i2l2768
  7380  0014F6                     i2u158_40:
  7381  0014F6  5003               	movf	i2___lwdiv@divisor^0,w,c
  7382  0014F8  5E01               	subwf	i2___lwdiv@dividend^0,f,c
  7383  0014FA  5004               	movf	(i2___lwdiv@divisor+1)^0,w,c
  7384  0014FC  5A02               	subwfb	(i2___lwdiv@dividend+1)^0,f,c
  7385  0014FE  8005               	bsf	i2___lwdiv@quotient^0,0,c
  7386  001500                     i2l2768:
  7387  001500  90D8               	bcf	status,0,c
  7388  001502  3204               	rrcf	(i2___lwdiv@divisor+1)^0,f,c
  7389  001504  3203               	rrcf	i2___lwdiv@divisor^0,f,c
  7390  001506  2E07               	decfsz	i2___lwdiv@counter^0,f,c
  7391  001508  EF6D  F00A         	goto	i2l2760
  7392  00150C                     i2l1210:
  7393  00150C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7394  001510  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7395  001514  0012               	return		;funcret
  7396  001516                     __end_ofi2___lwdiv:
  7397                           	callstack 0
  7398                           
  7399 ;; *************** function i2_color_click_interrupt_off *****************
  7400 ;; Defined at:
  7401 ;;		line 34 in file "color.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;		None
  7406 ;; Return value:  Size  Location     Type
  7407 ;;                  1    wreg      void 
  7408 ;; Registers used:
  7409 ;;		wreg, status,2, status,0, cstack
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7419 ;;Total ram usage:        0 bytes
  7420 ;; Hardware stack levels used: 1
  7421 ;; Hardware stack levels required when called: 3
  7422 ;; This function calls:
  7423 ;;		i2_color_int_clear
  7424 ;;		i2_color_writetoaddr
  7425 ;; This function is called by:
  7426 ;;		_HighISR
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           	psect	text62
  7431  001D88                     __ptext62:
  7432                           	callstack 0
  7433  001D88                     i2_color_click_interrupt_off:
  7434                           	callstack 17
  7435  001D88                     
  7436                           ;color.c: 35:     color_int_clear();
  7437  001D88  ECAF  F00E         	call	i2_color_int_clear	;wreg free
  7438                           
  7439                           ;color.c: 36:     color_writetoaddr(0x00,0x03);
  7440  001D8C  0E03               	movlw	3
  7441  001D8E  6E03               	movwf	i2color_writetoaddr@value^0,c
  7442  001D90  0E00               	movlw	0
  7443  001D92  EC58  F00E         	call	i2_color_writetoaddr
  7444                           
  7445                           ;color.c: 37:     color_int_clear();
  7446  001D96  ECAF  F00E         	call	i2_color_int_clear	;wreg free
  7447  001D9A  0012               	return		;funcret
  7448  001D9C                     __end_ofi2_color_click_interrupt_off:
  7449                           	callstack 0
  7450                           
  7451 ;; *************** function i2_color_writetoaddr *****************
  7452 ;; Defined at:
  7453 ;;		line 79 in file "color.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;  address         1    wreg     unsigned char 
  7456 ;;  value           1    2[COMRAM] unsigned char 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  address         1    3[COMRAM] unsigned char 
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  1    wreg      void 
  7461 ;; Registers used:
  7462 ;;		wreg, status,2, status,0, cstack
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7468 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7471 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7472 ;;Total ram usage:        2 bytes
  7473 ;; Hardware stack levels used: 1
  7474 ;; Hardware stack levels required when called: 2
  7475 ;; This function calls:
  7476 ;;		i2_I2C_2_Master_Start
  7477 ;;		i2_I2C_2_Master_Stop
  7478 ;;		i2_I2C_2_Master_Write
  7479 ;; This function is called by:
  7480 ;;		i2_color_click_interrupt_off
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           	psect	text63
  7485  001CB0                     __ptext63:
  7486                           	callstack 0
  7487  001CB0                     i2_color_writetoaddr:
  7488                           	callstack 17
  7489                           
  7490                           ;incstack = 0
  7491                           ;i2color_writetoaddr@address stored from wreg
  7492  001CB0  6E04               	movwf	i2color_writetoaddr@address^0,c
  7493  001CB2                     
  7494                           ;color.c: 80:     I2C_2_Master_Start();
  7495  001CB2  ECF3  F00E         	call	i2_I2C_2_Master_Start	;wreg free
  7496                           
  7497                           ;color.c: 81:     I2C_2_Master_Write(0x52 | 0x00);
  7498  001CB6  0E52               	movlw	82
  7499  001CB8  ECD4  F00E         	call	i2_I2C_2_Master_Write
  7500                           
  7501                           ;color.c: 82:     I2C_2_Master_Write(0x80 | address);
  7502  001CBC  5004               	movf	i2color_writetoaddr@address^0,w,c
  7503  001CBE  0980               	iorlw	128
  7504  001CC0  ECD4  F00E         	call	i2_I2C_2_Master_Write
  7505                           
  7506                           ;color.c: 83:     I2C_2_Master_Write(value);
  7507  001CC4  5003               	movf	i2color_writetoaddr@value^0,w,c
  7508  001CC6  ECD4  F00E         	call	i2_I2C_2_Master_Write
  7509                           
  7510                           ;color.c: 84:     I2C_2_Master_Stop();
  7511  001CCA  ECEE  F00E         	call	i2_I2C_2_Master_Stop	;wreg free
  7512  001CCE  0012               	return		;funcret
  7513  001CD0                     __end_ofi2_color_writetoaddr:
  7514                           	callstack 0
  7515                           
  7516 ;; *************** function i2_color_int_clear *****************
  7517 ;; Defined at:
  7518 ;;		line 41 in file "color.c"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;		None
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;		None
  7523 ;; Return value:  Size  Location     Type
  7524 ;;                  1    wreg      void 
  7525 ;; Registers used:
  7526 ;;		wreg, status,2, status,0, cstack
  7527 ;; Tracked objects:
  7528 ;;		On entry : 0/0
  7529 ;;		On exit  : 0/0
  7530 ;;		Unchanged: 0/0
  7531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7536 ;;Total ram usage:        0 bytes
  7537 ;; Hardware stack levels used: 1
  7538 ;; Hardware stack levels required when called: 2
  7539 ;; This function calls:
  7540 ;;		i2_I2C_2_Master_Start
  7541 ;;		i2_I2C_2_Master_Stop
  7542 ;;		i2_I2C_2_Master_Write
  7543 ;; This function is called by:
  7544 ;;		i2_color_click_interrupt_off
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           	psect	text64
  7549  001D5E                     __ptext64:
  7550                           	callstack 0
  7551  001D5E                     i2_color_int_clear:
  7552                           	callstack 17
  7553  001D5E                     
  7554                           ;color.c: 42:     I2C_2_Master_Start();
  7555  001D5E  ECF3  F00E         	call	i2_I2C_2_Master_Start	;wreg free
  7556                           
  7557                           ;color.c: 43:  I2C_2_Master_Write(0x52 | 0x00);
  7558  001D62  0E52               	movlw	82
  7559  001D64  ECD4  F00E         	call	i2_I2C_2_Master_Write
  7560                           
  7561                           ;color.c: 44:     I2C_2_Master_Write(0xE6);
  7562  001D68  0EE6               	movlw	230
  7563  001D6A  ECD4  F00E         	call	i2_I2C_2_Master_Write
  7564                           
  7565                           ;color.c: 45:     I2C_2_Master_Stop();
  7566  001D6E  ECEE  F00E         	call	i2_I2C_2_Master_Stop	;wreg free
  7567  001D72  0012               	return		;funcret
  7568  001D74                     __end_ofi2_color_int_clear:
  7569                           	callstack 0
  7570                           
  7571 ;; *************** function i2_I2C_2_Master_Write *****************
  7572 ;; Defined at:
  7573 ;;		line 45 in file "i2c.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;  data_byte       1    wreg     unsigned char 
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;  data_byte       1    1[COMRAM] unsigned char 
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  1    wreg      void 
  7580 ;; Registers used:
  7581 ;;		wreg, status,2, status,0, cstack
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7590 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7591 ;;Total ram usage:        1 bytes
  7592 ;; Hardware stack levels used: 1
  7593 ;; Hardware stack levels required when called: 1
  7594 ;; This function calls:
  7595 ;;		i2_I2C_2_Master_Idle
  7596 ;; This function is called by:
  7597 ;;		i2_color_int_clear
  7598 ;;		i2_color_writetoaddr
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           	psect	text65
  7603  001DA8                     __ptext65:
  7604                           	callstack 0
  7605  001DA8                     i2_I2C_2_Master_Write:
  7606                           	callstack 17
  7607                           
  7608                           ;incstack = 0
  7609                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7610  001DA8  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7611  001DAA                     
  7612                           ;i2c.c: 46:   I2C_2_Master_Idle();
  7613  001DAA  EC00  F00E         	call	i2_I2C_2_Master_Idle	;wreg free
  7614  001DAE                     
  7615                           ;i2c.c: 47:   SSP2BUF = data_byte;
  7616  001DAE  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7617  001DB2  0012               	return		;funcret
  7618  001DB4                     __end_ofi2_I2C_2_Master_Write:
  7619                           	callstack 0
  7620                           
  7621 ;; *************** function i2_I2C_2_Master_Stop *****************
  7622 ;; Defined at:
  7623 ;;		line 39 in file "i2c.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;		None
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;		None
  7628 ;; Return value:  Size  Location     Type
  7629 ;;                  1    wreg      void 
  7630 ;; Registers used:
  7631 ;;		wreg, status,2, status,0, cstack
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7641 ;;Total ram usage:        0 bytes
  7642 ;; Hardware stack levels used: 1
  7643 ;; Hardware stack levels required when called: 1
  7644 ;; This function calls:
  7645 ;;		i2_I2C_2_Master_Idle
  7646 ;; This function is called by:
  7647 ;;		i2_color_int_clear
  7648 ;;		i2_color_writetoaddr
  7649 ;; This function uses a non-reentrant model
  7650 ;;
  7651                           
  7652                           	psect	text66
  7653  001DDC                     __ptext66:
  7654                           	callstack 0
  7655  001DDC                     i2_I2C_2_Master_Stop:
  7656                           	callstack 17
  7657  001DDC                     
  7658                           ;i2c.c: 40:   I2C_2_Master_Idle();
  7659  001DDC  EC00  F00E         	call	i2_I2C_2_Master_Idle	;wreg free
  7660  001DE0                     
  7661                           ;i2c.c: 41:   SSP2CON2bits.PEN = 1;
  7662  001DE0  010E               	movlb	14	; () banked
  7663  001DE2  85DA               	bsf	218,2,b	;volatile
  7664  001DE4                     
  7665                           ; BSR set to: 14
  7666  001DE4  0012               	return		;funcret
  7667  001DE6                     __end_ofi2_I2C_2_Master_Stop:
  7668                           	callstack 0
  7669                           
  7670 ;; *************** function i2_I2C_2_Master_Start *****************
  7671 ;; Defined at:
  7672 ;;		line 27 in file "i2c.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;		None
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;		None
  7677 ;; Return value:  Size  Location     Type
  7678 ;;                  1    wreg      void 
  7679 ;; Registers used:
  7680 ;;		wreg, status,2, status,0, cstack
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7690 ;;Total ram usage:        0 bytes
  7691 ;; Hardware stack levels used: 1
  7692 ;; Hardware stack levels required when called: 1
  7693 ;; This function calls:
  7694 ;;		i2_I2C_2_Master_Idle
  7695 ;; This function is called by:
  7696 ;;		i2_color_int_clear
  7697 ;;		i2_color_writetoaddr
  7698 ;; This function uses a non-reentrant model
  7699 ;;
  7700                           
  7701                           	psect	text67
  7702  001DE6                     __ptext67:
  7703                           	callstack 0
  7704  001DE6                     i2_I2C_2_Master_Start:
  7705                           	callstack 17
  7706  001DE6                     
  7707                           ;i2c.c: 28:   I2C_2_Master_Idle();
  7708  001DE6  EC00  F00E         	call	i2_I2C_2_Master_Idle	;wreg free
  7709  001DEA                     
  7710                           ;i2c.c: 29:   SSP2CON2bits.SEN = 1;
  7711  001DEA  010E               	movlb	14	; () banked
  7712  001DEC  81DA               	bsf	218,0,b	;volatile
  7713  001DEE                     
  7714                           ; BSR set to: 14
  7715  001DEE  0012               	return		;funcret
  7716  001DF0                     __end_ofi2_I2C_2_Master_Start:
  7717                           	callstack 0
  7718                           
  7719 ;; *************** function i2_I2C_2_Master_Idle *****************
  7720 ;; Defined at:
  7721 ;;		line 22 in file "i2c.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;		None
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;		None
  7726 ;; Return value:  Size  Location     Type
  7727 ;;                  1    wreg      void 
  7728 ;; Registers used:
  7729 ;;		wreg, status,2, status,0
  7730 ;; Tracked objects:
  7731 ;;		On entry : 0/0
  7732 ;;		On exit  : 0/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7737 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7738 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7739 ;;Total ram usage:        1 bytes
  7740 ;; Hardware stack levels used: 1
  7741 ;; This function calls:
  7742 ;;		Nothing
  7743 ;; This function is called by:
  7744 ;;		i2_I2C_2_Master_Start
  7745 ;;		i2_I2C_2_Master_Stop
  7746 ;;		i2_I2C_2_Master_Write
  7747 ;; This function uses a non-reentrant model
  7748 ;;
  7749                           
  7750                           	psect	text68
  7751  001C00                     __ptext68:
  7752                           	callstack 0
  7753  001C00                     i2_I2C_2_Master_Idle:
  7754                           	callstack 17
  7755  001C00                     i2l147:
  7756  001C00  010E               	movlb	14	; () banked
  7757  001C02  B5D8               	btfsc	216,2,b	;volatile
  7758  001C04  EF06  F00E         	goto	i2u129_41
  7759  001C08  EF08  F00E         	goto	i2u129_40
  7760  001C0C                     i2u129_41:
  7761  001C0C  EF00  F00E         	goto	i2l147
  7762  001C10                     i2u129_40:
  7763  001C10                     
  7764                           ; BSR set to: 14
  7765  001C10  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7766  001C14  0E1F               	movlw	31
  7767  001C16  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7768  001C18  A4D8               	btfss	status,2,c
  7769  001C1A  EF11  F00E         	goto	i2u130_41
  7770  001C1E  EF13  F00E         	goto	i2u130_40
  7771  001C22                     i2u130_41:
  7772  001C22  EF00  F00E         	goto	i2l147
  7773  001C26                     i2u130_40:
  7774  001C26                     
  7775                           ; BSR set to: 14
  7776  001C26  0012               	return		;funcret
  7777  001C28                     __end_ofi2_I2C_2_Master_Idle:
  7778                           	callstack 0
  7779  0000                     
  7780                           	psect	text69
  7781  000000                     __ptext69:
  7782                           	callstack 0
  7783  000000                     
  7784                           	psect	rparam
  7785  0000                     
  7786                           	psect	temp
  7787  000050                     btemp:
  7788                           	callstack 0
  7789  000050                     	ds	1
  7790  0000                     int$flags	set	btemp
  7791  0000                     wtemp8	set	btemp+1
  7792  0000                     ttemp5	set	btemp+1
  7793  0000                     ttemp6	set	btemp+4
  7794  0000                     ttemp7	set	btemp+8
  7795                           
  7796                           	psect	idloc
  7797                           
  7798                           ;Config register IDLOC0 @ 0x200000
  7799                           ;	unspecified, using default values
  7800  200000                     	org	2097152
  7801  200000  0FFF               	dw	4095
  7802                           
  7803                           ;Config register IDLOC1 @ 0x200002
  7804                           ;	unspecified, using default values
  7805  200002                     	org	2097154
  7806  200002  0FFF               	dw	4095
  7807                           
  7808                           ;Config register IDLOC2 @ 0x200004
  7809                           ;	unspecified, using default values
  7810  200004                     	org	2097156
  7811  200004  0FFF               	dw	4095
  7812                           
  7813                           ;Config register IDLOC3 @ 0x200006
  7814                           ;	unspecified, using default values
  7815  200006                     	org	2097158
  7816  200006  0FFF               	dw	4095
  7817                           
  7818                           ;Config register IDLOC4 @ 0x200008
  7819                           ;	unspecified, using default values
  7820  200008                     	org	2097160
  7821  200008  0FFF               	dw	4095
  7822                           
  7823                           ;Config register IDLOC5 @ 0x20000A
  7824                           ;	unspecified, using default values
  7825  20000A                     	org	2097162
  7826  20000A  0FFF               	dw	4095
  7827                           
  7828                           ;Config register IDLOC6 @ 0x20000C
  7829                           ;	unspecified, using default values
  7830  20000C                     	org	2097164
  7831  20000C  0FFF               	dw	4095
  7832                           
  7833                           ;Config register IDLOC7 @ 0x20000E
  7834                           ;	unspecified, using default values
  7835  20000E                     	org	2097166
  7836  20000E  0FFF               	dw	4095
  7837                           
  7838                           	psect	config
  7839                           
  7840                           ;Config register CONFIG1L @ 0x300000
  7841                           ;	External Oscillator mode Selection bits
  7842                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7843                           ;	Power-up default value for COSC bits
  7844                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7845  300000                     	org	3145728
  7846  300000  AA                 	db	170
  7847                           
  7848                           ;Config register CONFIG1H @ 0x300001
  7849                           ;	unspecified, using default values
  7850                           ;	Clock Out Enable bit
  7851                           ;	CLKOUTEN = 0x1, unprogrammed default
  7852                           ;	Clock Switch Enable bit
  7853                           ;	CSWEN = 0x1, unprogrammed default
  7854                           ;	Fail-Safe Clock Monitor Enable bit
  7855                           ;	FCMEN = 0x1, unprogrammed default
  7856  300001                     	org	3145729
  7857  300001  FF                 	db	255
  7858                           
  7859                           ;Config register CONFIG2L @ 0x300002
  7860                           ;	unspecified, using default values
  7861                           ;	Master Clear Enable bit
  7862                           ;	MCLRE = 0x1, unprogrammed default
  7863                           ;	Power-up Timer Enable bit
  7864                           ;	PWRTE = 0x1, unprogrammed default
  7865                           ;	Low-power BOR enable bit
  7866                           ;	LPBOREN = 0x1, unprogrammed default
  7867                           ;	Brown-out Reset Enable bits
  7868                           ;	BOREN = 0x3, unprogrammed default
  7869  300002                     	org	3145730
  7870  300002  FF                 	db	255
  7871                           
  7872                           ;Config register CONFIG2H @ 0x300003
  7873                           ;	unspecified, using default values
  7874                           ;	Brown Out Reset Voltage selection bits
  7875                           ;	BORV = 0x3, unprogrammed default
  7876                           ;	ZCD Disable bit
  7877                           ;	ZCD = 0x1, unprogrammed default
  7878                           ;	PPSLOCK bit One-Way Set Enable bit
  7879                           ;	PPS1WAY = 0x1, unprogrammed default
  7880                           ;	Stack Full/Underflow Reset Enable bit
  7881                           ;	STVREN = 0x1, unprogrammed default
  7882                           ;	Debugger Enable bit
  7883                           ;	DEBUG = 0x1, unprogrammed default
  7884                           ;	Extended Instruction Set Enable bit
  7885                           ;	XINST = 0x1, unprogrammed default
  7886  300003                     	org	3145731
  7887  300003  FF                 	db	255
  7888                           
  7889                           ;Config register CONFIG3L @ 0x300004
  7890                           ;	WDT Period Select bits
  7891                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7892                           ;	WDT operating mode
  7893                           ;	WDTE = OFF, WDT Disabled
  7894  300004                     	org	3145732
  7895  300004  9F                 	db	159
  7896                           
  7897                           ;Config register CONFIG3H @ 0x300005
  7898                           ;	unspecified, using default values
  7899                           ;	WDT Window Select bits
  7900                           ;	WDTCWS = 0x7, unprogrammed default
  7901                           ;	WDT input clock selector
  7902                           ;	WDTCCS = 0x7, unprogrammed default
  7903  300005                     	org	3145733
  7904  300005  FF                 	db	255
  7905                           
  7906                           ;Config register CONFIG4L @ 0x300006
  7907                           ;	unspecified, using default values
  7908                           ;	Write Protection Block 0
  7909                           ;	WRT0 = 0x1, unprogrammed default
  7910                           ;	Write Protection Block 1
  7911                           ;	WRT1 = 0x1, unprogrammed default
  7912                           ;	Write Protection Block 2
  7913                           ;	WRT2 = 0x1, unprogrammed default
  7914                           ;	Write Protection Block 3
  7915                           ;	WRT3 = 0x1, unprogrammed default
  7916                           ;	Write Protection Block 3
  7917                           ;	WRT4 = 0x1, unprogrammed default
  7918                           ;	Write Protection Block 3
  7919                           ;	WRT5 = 0x1, unprogrammed default
  7920                           ;	Write Protection Block 3
  7921                           ;	WRT6 = 0x1, unprogrammed default
  7922                           ;	Write Protection Block 3
  7923                           ;	WRT7 = 0x1, unprogrammed default
  7924  300006                     	org	3145734
  7925  300006  FF                 	db	255
  7926                           
  7927                           ;Config register CONFIG4H @ 0x300007
  7928                           ;	unspecified, using default values
  7929                           ;	Configuration Register Write Protection bit
  7930                           ;	WRTC = 0x1, unprogrammed default
  7931                           ;	Boot Block Write Protection bit
  7932                           ;	WRTB = 0x1, unprogrammed default
  7933                           ;	Data EEPROM Write Protection bit
  7934                           ;	WRTD = 0x1, unprogrammed default
  7935                           ;	Scanner Enable bit
  7936                           ;	SCANE = 0x1, unprogrammed default
  7937                           ;	Low Voltage Programming Enable bit
  7938                           ;	LVP = 0x1, unprogrammed default
  7939  300007                     	org	3145735
  7940  300007  FF                 	db	255
  7941                           
  7942                           ;Config register CONFIG5L @ 0x300008
  7943                           ;	unspecified, using default values
  7944                           ;	UserNVM Program Memory Code Protection bit
  7945                           ;	CP = 0x1, unprogrammed default
  7946                           ;	DataNVM Memory Code Protection bit
  7947                           ;	CPD = 0x1, unprogrammed default
  7948  300008                     	org	3145736
  7949  300008  FF                 	db	255
  7950                           
  7951                           ;Config register CONFIG5H @ 0x300009
  7952                           ;	unspecified, using default values
  7953  300009                     	org	3145737
  7954  300009  FF                 	db	255
  7955                           
  7956                           ;Config register CONFIG6L @ 0x30000A
  7957                           ;	unspecified, using default values
  7958                           ;	Table Read Protection Block 0
  7959                           ;	EBTR0 = 0x1, unprogrammed default
  7960                           ;	Table Read Protection Block 1
  7961                           ;	EBTR1 = 0x1, unprogrammed default
  7962                           ;	Table Read Protection Block 2
  7963                           ;	EBTR2 = 0x1, unprogrammed default
  7964                           ;	Table Read Protection Block 3
  7965                           ;	EBTR3 = 0x1, unprogrammed default
  7966                           ;	Table Read Protection Block 4
  7967                           ;	EBTR4 = 0x1, unprogrammed default
  7968                           ;	Table Read Protection Block 5
  7969                           ;	EBTR5 = 0x1, unprogrammed default
  7970                           ;	Table Read Protection Block 6
  7971                           ;	EBTR6 = 0x1, unprogrammed default
  7972                           ;	Table Read Protection Block 7
  7973                           ;	EBTR7 = 0x1, unprogrammed default
  7974  30000A                     	org	3145738
  7975  30000A  FF                 	db	255
  7976                           
  7977                           ;Config register CONFIG6H @ 0x30000B
  7978                           ;	unspecified, using default values
  7979                           ;	Boot Block Table Read Protection bit
  7980                           ;	EBTRB = 0x1, unprogrammed default
  7981  30000B                     	org	3145739
  7982  30000B  FF                 	db	255
  7983                           tosu	equ	0xFFF
  7984                           tosh	equ	0xFFE
  7985                           tosl	equ	0xFFD
  7986                           stkptr	equ	0xFFC
  7987                           pclatu	equ	0xFFB
  7988                           pclath	equ	0xFFA
  7989                           pcl	equ	0xFF9
  7990                           tblptru	equ	0xFF8
  7991                           tblptrh	equ	0xFF7
  7992                           tblptrl	equ	0xFF6
  7993                           tablat	equ	0xFF5
  7994                           prodh	equ	0xFF4
  7995                           prodl	equ	0xFF3
  7996                           indf0	equ	0xFEF
  7997                           postinc0	equ	0xFEE
  7998                           postdec0	equ	0xFED
  7999                           preinc0	equ	0xFEC
  8000                           plusw0	equ	0xFEB
  8001                           fsr0h	equ	0xFEA
  8002                           fsr0l	equ	0xFE9
  8003                           wreg	equ	0xFE8
  8004                           indf1	equ	0xFE7
  8005                           postinc1	equ	0xFE6
  8006                           postdec1	equ	0xFE5
  8007                           preinc1	equ	0xFE4
  8008                           plusw1	equ	0xFE3
  8009                           fsr1h	equ	0xFE2
  8010                           fsr1l	equ	0xFE1
  8011                           bsr	equ	0xFE0
  8012                           indf2	equ	0xFDF
  8013                           postinc2	equ	0xFDE
  8014                           postdec2	equ	0xFDD
  8015                           preinc2	equ	0xFDC
  8016                           plusw2	equ	0xFDB
  8017                           fsr2h	equ	0xFDA
  8018                           fsr2l	equ	0xFD9
  8019                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         156
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     70      79
    BANK0           160     59     123
    BANK1           256      0      90
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    sp__get_function_ptr$1	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    sp__get_function_ptr$0	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    funcPtrList$1	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    funcPtrList$0	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    func$1	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    func$0	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    temp_func$1	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    temp_func$0	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    add_function_ptr@func	PTR FTN(PTR struct DC_motor,PTR struct DC_motor,)void  size(3) Largest target is 1
		 -> orange_move(), lightblue_move(), reverse_pink_move(), reverse_yellow_move(), 
		 -> blue_move(), red_move(), green_move(), 

    funcPtrList	PTR FTN(PTR struct DC_motor,PTR struct DC_motor,)void [30] size(3) Largest target is 1
		 -> orange_move(), lightblue_move(), reverse_pink_move(), reverse_yellow_move(), 
		 -> blue_move(), red_move(), green_move(), 

    sp__get_function_ptr	PTR FTN(PTR struct DC_motor,PTR struct DC_motor,)void  size(3) Largest target is 1
		 -> orange_move(), lightblue_move(), reverse_pink_move(), reverse_yellow_move(), 
		 -> blue_move(), red_move(), green_move(), 

    white_move@temp_func	PTR FTN(PTR struct DC_motor,PTR struct DC_motor,)void  size(3) Largest target is 1
		 -> orange_move(), lightblue_move(), reverse_pink_move(), reverse_yellow_move(), 
		 -> blue_move(), red_move(), green_move(), 

    white_move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    white_move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverse_pink_move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverse_pink_move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverse_yellow_move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverse_yellow_move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    pink_move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    pink_move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    yellow_move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    yellow_move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    lightblue_move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    lightblue_move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    orange_move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    orange_move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    blue_move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    blue_move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    green_move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    green_move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    red_move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    red_move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    pick_move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    pick_move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    main@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    main@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    main@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    main@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    main@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    main@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    CalibrateReverseSquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    CalibrateReverseSquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    CalibrateTurns@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    CalibrateTurns@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    PrepareForTurn@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    PrepareForTurn@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    TurnRight@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    TurnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    TurnRight@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    TurnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    TurnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    TurnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    TurnLeft@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    TurnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    TurnLeft@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    TurnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    TurnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    TurnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    forward_square@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    forward_square@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverse_square@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverse_square@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    move_backward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    move_backward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    move_backward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    move_backward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    move_backward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    move_backward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    move_forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    move_forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    move_forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    move_forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    move_forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    move_forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    S24DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S24DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    read_All_Colors@writeArray	PTR unsigned int  size(2) Largest target is 8
		 -> decide_color@ambient(BANK0[8]), decide_color@LED_and_ambient(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_CalibrateTurns
    _pick_move->_white_move
    _yellow_move->_reverse_square
    _white_move->_lightblue_move
    _white_move->_orange_move
    _reverse_yellow_move->_blue_move
    _reverse_pink_move->_blue_move
    _forward_square->_move_forward
    _move_forward->_stop
    _blue_move->_PrepareForTurn
    _red_move->_PrepareForTurn
    _TurnRight->_stop
    _green_move->_PrepareForTurn
    _pink_move->_reverse_square
    _interrupt_threshold_calibrate->_color_read
    _getTMR0_in_ms->_add_timing
    _add_timing->___lwdiv
    _decide_color->___atdiv
    _read_All_Colors->_color_read
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___atdiv->___tmul
    _color_click_interrupt_off->_color_writetoaddr
    _color_click_init->_color_writetoaddr
    _color_click_interrupt_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _color_int_clear->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _CalibrateTurns->_PrepareForTurn
    _TurnLeft->_stop
    _PrepareForTurn->_move_backward
    _CalibrateReverseSquare->_reverse_square
    _reverse_square->_move_backward
    _move_backward->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->i2_getTMR0_in_ms
    i2_getTMR0_in_ms->i2_add_timing
    i2_add_timing->i2___lwdiv
    i2_color_click_interrupt_off->i2_color_writetoaddr
    i2_color_writetoaddr->i2_I2C_2_Master_Write
    i2_color_int_clear->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_decide_color
    _pick_move->_white_move
    _white_move->_blue_move
    _white_move->_green_move
    _white_move->_lightblue_move
    _white_move->_orange_move
    _white_move->_red_move
    _white_move->_reverse_pink_move
    _white_move->_reverse_yellow_move

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  698763
                                             34 BANK0     25    25      0
             _CalibrateReverseSquare
                     _CalibrateTurns
                    _Interrupts_init
                  _LEDs_Buttons_init
                            _LightOn
                          _ResetTMR0
                        _Timer0_init
                   _color_click_init
         _color_click_interrupt_init
          _color_click_interrupt_off
                       _decide_color
                      _getTMR0_in_ms
                    _initDCmotorsPWM
      _interrupt_threshold_calibrate
                       _move_forward
                          _pick_move
                               _stop
 ---------------------------------------------------------------------------------
 (1) _pick_move                                            5     1      4  602601
                                             68 COMRAM     1     1      0
                                             29 BANK0      4     0      4
                       _LightsToggle
                   _add_function_ptr
                          _blue_move
                         _green_move
                     _lightblue_move
                        _orange_move
                          _pink_move
                           _red_move
                         _white_move
                        _yellow_move
 ---------------------------------------------------------------------------------
 (2) _yellow_move                                          4     0      4   34784
                                             62 COMRAM     4     0      4
                          _TurnRight
                     _reverse_square
 ---------------------------------------------------------------------------------
 (2) _white_move                                          11     7      4  347864
                                             66 COMRAM     2     2      0
                                             20 BANK0      9     5      4
                       _LightsToggle
                          _blue_move *
                   _get_function_ptr
                         _get_timing
                         _green_move *
                     _lightblue_move *
                       _move_forward
                        _orange_move *
                           _red_move *
                  _reverse_pink_move *
                _reverse_yellow_move *
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse_yellow_move                                  4     0      4   71699
                                             16 BANK0      4     0      4
                          _TurnRight
                          _blue_move
                     _forward_square
 ---------------------------------------------------------------------------------
 (3) _reverse_pink_move                                    4     0      4   72059
                                             16 BANK0      4     0      4
                           _TurnLeft
                          _blue_move
                     _forward_square
 ---------------------------------------------------------------------------------
 (4) _forward_square                                       6     2      4   20839
                                             56 COMRAM     6     2      4
                       _move_forward
                               _stop
 ---------------------------------------------------------------------------------
 (5) _move_forward                                         9     3      6   13033
                                             47 COMRAM     9     3      6
                    _custom_delay_ms
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (4) _blue_move                                            5     1      4   37129
                                             64 COMRAM     1     1      0
                                             16 BANK0      4     0      4
                     _PrepareForTurn
                           _TurnLeft
 ---------------------------------------------------------------------------------
 (3) _red_move                                             4     0      4   36223
                                             16 BANK0      4     0      4
                     _PrepareForTurn
                          _TurnRight
 ---------------------------------------------------------------------------------
 (3) _orange_move                                          5     1      4   36359
                                             65 COMRAM     1     1      0
                                             16 BANK0      4     0      4
                     _PrepareForTurn
                          _TurnRight
 ---------------------------------------------------------------------------------
 (3) _TurnRight                                            6     2      4   13483
                                             47 COMRAM     6     2      4
                    _custom_delay_ms
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _lightblue_move                                       5     1      4   36589
                                             65 COMRAM     1     1      0
                                             16 BANK0      4     0      4
                     _PrepareForTurn
                           _TurnLeft
 ---------------------------------------------------------------------------------
 (3) _green_move                                           4     0      4   36583
                                             16 BANK0      4     0      4
                     _PrepareForTurn
                           _TurnLeft
 ---------------------------------------------------------------------------------
 (3) _get_timing                                           2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _get_function_ptr                                     3     0      3       0
                                             15 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _pink_move                                            4     0      4   35144
                                             62 COMRAM     4     0      4
                           _TurnLeft
                     _reverse_square
 ---------------------------------------------------------------------------------
 (2) _add_function_ptr                                     3     0      3     661
                                             15 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _interrupt_threshold_calibrate                        4     4      0     859
                                             27 COMRAM     4     4      0
                            _LightOn
                       _LightsToggle
                            ___lwdiv
                         _color_read
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getTMR0_in_ms                                        2     2      0     610
                                             24 COMRAM     2     2      0
                            ___lwdiv
                         _add_timing
 ---------------------------------------------------------------------------------
 (2) _add_timing                                           2     0      2      98
                                             22 COMRAM     2     0      2
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _decide_color                                        38    38      0    3239
                                             35 COMRAM     4     4      0
                                              0 BANK0     34    34      0
                           _LightOff
                            _LightOn
                            ___atdiv
                             ___tmul
                    _read_All_Colors
 ---------------------------------------------------------------------------------
 (2) _read_All_Colors                                      4     2      2     536
                                             27 COMRAM     4     2      2
                         _color_read
 ---------------------------------------------------------------------------------
 (2) _color_read                                           8     6      2     195
                                             19 COMRAM     8     6      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                             16 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     676
                                             15 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___atdiv                                             11     5      6     985
                                             24 COMRAM    11     5      6
                             ___tmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _LightOn                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LightOff                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_interrupt_off                            0     0      0    1114
                    _color_int_clear
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    1083
                                             19 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ResetTMR0                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDs_Buttons_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0    1114
         _color_click_interrupt_init
 ---------------------------------------------------------------------------------
 (1) _color_click_interrupt_init                           0     0      0    1114
                    _color_int_clear
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1    1083
                                             17 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_int_clear                                      0     0      0      31
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                             16 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CalibrateTurns                                       7     3      4   36657
                                             64 COMRAM     6     2      4
                                              0 BANK0      1     1      0
                       _LightsToggle
                     _PrepareForTurn
                           _TurnLeft
 ---------------------------------------------------------------------------------
 (5) _TurnLeft                                             6     2      4   13843
                                             47 COMRAM     6     2      4
                    _custom_delay_ms
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (5) _PrepareForTurn                                       8     4      4   22374
                                             56 COMRAM     8     4      4
                            ___awdiv
                      _move_backward
                               _stop
 ---------------------------------------------------------------------------------
 (1) _CalibrateReverseSquare                               6     2      4   28629
                                             62 COMRAM     6     2      4
                       _LightsToggle
                     _reverse_square
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse_square                                       6     2      4   20935
                                             56 COMRAM     6     2      4
                      _move_backward
                               _stop
 ---------------------------------------------------------------------------------
 (4) _move_backward                                        9     3      6   12949
                                             47 COMRAM     9     3      6
                    _custom_delay_ms
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    7322
                                             40 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    4008
                                             29 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     692
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     865
                                             21 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _custom_delay_ms                                      5     3      2     428
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _LightsToggle                                         3     3      0      68
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             4     4      0     422
                                             11 COMRAM     4     4      0
        i2_color_click_interrupt_off
                    i2_getTMR0_in_ms
 ---------------------------------------------------------------------------------
 (11) i2_getTMR0_in_ms                                     2     2      0     308
                                              9 COMRAM     2     2      0
                          i2___lwdiv
                       i2_add_timing
 ---------------------------------------------------------------------------------
 (12) i2_add_timing                                        2     0      2      48
                                              7 COMRAM     2     0      2
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (12) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) i2_color_click_interrupt_off                         0     0      0     114
                  i2_color_int_clear
                i2_color_writetoaddr
 ---------------------------------------------------------------------------------
 (12) i2_color_writetoaddr                                 2     1      1      92
                                              2 COMRAM     2     1      1
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_color_int_clear                                   0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (13) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (13) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (13) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (14) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CalibrateReverseSquare
     _LightsToggle
     _reverse_square
       _move_backward
         _custom_delay_ms
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
         _stop
           _setMotorPWM
       _stop
     _stop
   _CalibrateTurns
     _LightsToggle
     _PrepareForTurn
       ___awdiv
       _move_backward
       _stop
     _TurnLeft
       _custom_delay_ms
       _setMotorPWM
       _stop
   _Interrupts_init
     _color_click_interrupt_init
       _color_int_clear
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _LEDs_Buttons_init
   _LightOn
   _ResetTMR0
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
   _color_click_interrupt_init
   _color_click_interrupt_off
     _color_int_clear
     _color_writetoaddr
   _decide_color
     _LightOff
     _LightOn
     ___atdiv
       ___tmul (ARG)
     ___tmul
     _read_All_Colors
       _color_read
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _getTMR0_in_ms
     ___lwdiv
     _add_timing
       ___lwdiv (ARG)
   _initDCmotorsPWM
   _interrupt_threshold_calibrate
     _LightOn
     _LightsToggle
     ___lwdiv
     _color_read
   _move_forward
     _custom_delay_ms
     _setMotorPWM
     _stop
   _pick_move
     _LightsToggle
     _add_function_ptr
     _blue_move
       _PrepareForTurn
       _TurnLeft
     _green_move
       _PrepareForTurn
       _TurnLeft
     _lightblue_move
       _PrepareForTurn
       _TurnLeft
     _orange_move
       _PrepareForTurn
       _TurnRight
         _custom_delay_ms
         _setMotorPWM
         _stop
     _pink_move
       _TurnLeft
       _reverse_square
     _red_move
       _PrepareForTurn
       _TurnRight
     _white_move
       _LightsToggle
       _blue_move *
       _get_function_ptr *
       _get_timing *
       _green_move *
       _lightblue_move *
       _move_forward *
       _orange_move *
       _red_move *
       _reverse_pink_move *
         _TurnLeft
         _blue_move
         _forward_square
           _move_forward
           _stop
       _reverse_yellow_move *
         _TurnRight
         _blue_move
         _forward_square
       _stop *
     _yellow_move
       _TurnRight
       _reverse_square
   _stop

 _HighISR (ROOT)
   i2_color_click_interrupt_off
     i2_color_int_clear
       i2_I2C_2_Master_Start
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Stop
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Write
         i2_I2C_2_Master_Idle
     i2_color_writetoaddr
       i2_I2C_2_Master_Start
       i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Write
   i2_getTMR0_in_ms
     i2___lwdiv
     i2_add_timing
       i2___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      5A       7       35.2%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3B      7B       5       76.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     46      4F       1       84.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     124       8        0.0%
DATA                 0      0     124       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Dec 16 15:37:36 2021

                         _read_All_Colors 16CC                             fp__green_move 0000  
                         i2_getTMR0_in_ms 1B80                               fp__red_move 0000  
                __end_of_add_function_ptr 1B1E                                        l62 17F6  
                                      l71 12CA                                        l65 1D86  
                                      l82 136C                                        l74 12EA  
                                      l59 1A74                                        l91 1626  
                                      l68 1D5C                                        l85 137E  
                                      l77 130A                                        l88 1CAE  
                                      l96 171A                          ___atdiv@quotient 0021  
                            ___awdiv@sign 001B                           _color_int_clear 1D48  
                     ___wmul@multiplicand 0012                        i2___lwdiv@dividend 0001  
                       ??_Interrupts_init 0014                          custom_delay_ms@i 0013  
                                     l300 0B72                                       l117 0348  
                                     l310 0D12                                       l150 1BFE  
                                     l312 0D2E                                       l144 1BD6  
                                     l241 0936                                       l153 1DDA  
                                     l162 1DA6                                       l234 1AAE  
                                     l147 1BD8                                       l244 10B0  
                                     l316 0D82                                       l156 1DBC  
                                     l252 11B2                                       l261 0A5A  
                                     l309 0CEE                                       l165 187E  
                                     l502 1AD0                                       l270 0FE6  
                                     l159 1DD0                                       l255 11FC  
                                     l264 17AE                                       l505 1AE6  
                                     l249 111C                                       l273 1036  
                                     l258 09CC                                       l282 157A  
                                     l602 193E                                       l267 1764  
                                     l276 0F00                                       l612 18FE  
                                     l293 0ADE                                       l621 16CA  
                                     l294 0B02                                       l710 1D0A  
                                     l279 0F50                                       l607 18BE  
                                     l631 0C84                                       l615 197C  
                                     l296 0B1E                                       l624 1678  
                                     l449 1D28                                       l713 1CEC  
                                     l618 1A36                                       l707 1B1C  
                                     l724 15C6                                       l716 1C6E  
                                     l493 1C8E                                       l725 15D2  
                                     l662 1B50                                       l719 1C4C  
                                     l591 0762                                       l496 1B7E  
                                     l673 142C                                       l665 1DF6  
                                     l585 0762                                       l594 19BA  
                                     l499 1DC6                                       l915 0E34  
                                     l668 1DFE                                       l597 19F8  
                                     l950 12C0                                       l918 0E6A  
                ??_CalibrateReverseSquare 0043                                       prod 000FF3  
                     i2_color_writetoaddr 1CB0                                       tosl 000FFD  
                                     wreg 000FE8                     __size_ofi2_add_timing 001E  
                             _yellow_move 1940                                      l1210 1498  
                                    l3000 1DBE                                      l1217 14A0  
                                    l3200 1236                                      l3210 126E  
                                    l3202 123E                                      l3220 129A  
                                    l3212 1274                                      l3204 1250  
                                    l3300 116E                                      l3214 128A  
                                    l3206 1258                                      l3222 12A0  
                                    l3230 0764                                      l3310 0F66  
                                    l3054 1B52                                      l3302 119A  
                                    l3224 12B0                                      l3216 1292  
                                    l3208 1260                                      l3240 0864  
                                    l3232 0780                                      l3320 1000  
                                    l3312 0F76                                      l3400 1C92  
                                    l2600 1BC0                                      l3056 1B54  
                                    l3304 11A6                                      l3410 1384  
                                    l3226 12B8                                      l3218 1294  
                                    l3242 08CE                                      l3234 07E2  
                                    l3250 106A                                      l3330 154E  
                                    l3322 100C                                      l3314 0FA2  
                                    l3402 1D48                                      l2602 1BC2  
                                    l3058 1B5A                                      l3306 11F0  
                                    l3412 13EA                                      l3404 1380  
                                    l3180 1C28                                      l3236 0828  
                                    l3260 1104                                      l3252 1082  
                                    l3244 1038                                      l3332 1562  
                                    l3324 1020                                      l3316 0FCE  
                                    l3308 0F52                                      l3340 1DA2  
                                    l2604 1BC4                                      l3420 161E  
                                    l3500 0BC8                                      l3414 1404  
                                    l3190 1210                                      l3182 1C44  
                                    l3238 0848                                      l3262 1110  
                                    l3254 1098                                      l3246 103C  
                                    l3270 0938                                      l3326 1516  
                                    l3318 0FDA                                      l3334 1DD2  
                                    l3342 1DC8                                      l3350 1840  
                                    l3430 19BC                                      l3510 0C42  
                                    l3502 0BE0                                      l3416 1414  
                                    l3264 1AB0                                      l3192 1218  
                                    l3256 10A4                                      l3248 1054  
                                    l3280 09C0                                      l3272 094C  
                                    l3424 1766                                      l3328 1532  
                                    l3336 1DD6                                      l3344 1DCC  
                                    l3360 187C                                      l3352 1844  
                                    l2720 142E                                      l3600 12D8  
                                    l3520 1B06                                      l3440 1898  
                                    l3432 1880                                      l3504 0BF2  
                                    l3512 0C5A                                      l3266 1ABC  
                                    l3194 121C                                      l3186 11FE  
                                    l3258 10EC                                      l3282 0A0A  
                                    l3274 095C                                      l3426 1796  
                                    l3290 1BD8                                      l3338 1D9E  
                                    l3530 157C                                      l3354 184C  
                                    l3346 1DB4                                      l3418 15D6  
                                    l2730 1466                                      l2722 1436  
                                    l2626 1CEE                                      l3610 1364  
                                    l3602 12F8                                      l3522 1B08  
                                    l3370 0E80                                      l3442 18AC  
                                    l3434 1894                                      l3514 0C6C  
                                    l3506 0C02                                      l3268 1ACC  
                                    l3196 122A                                      l3188 1202  
                                    l3284 0A36                                      l3276 0988  
                                    l3292 1BE8                                      l3540 0D84  
                                    l3532 1588                                      l3356 1854  
                                    l3348 1DB8                                      l3620 0098  
                                    l2740 1492                                      l2732 146C  
                                    l2724 1448                                      l2628 1D08  
                                    l2900 1AAC                                      l3612 137A  
                                    l3604 1318                                      l3524 1B18  
                                    l3380 0F1A                                      l3372 0E90  
                                    l3364 171C                                      l3460 167A  
                                    l3428 197E                                      l3444 18AE  
                                    l3516 0C80                                      l3508 0C2E  
                                    l3198 1232                                      l3286 0A42  
                                    l3278 09B4                                      l3710 0AAA  
                                    l3550 0DB4                                      l3542 0D88  
                                    l3534 1596                                      l3358 187A  
                                    l3630 0116                                      l3622 00A0  
                                    l3614 0070                                      l2734 1482  
                                    l2726 1450                                      l3606 132A  
                                    l3518 1AE8                                      l3382 0F26  
                                    l3374 0EBC                                      l3294 111E  
                                    l3366 174C                                      l3462 1628  
                                    l3454 18D8                                      l3446 18C0  
                                    l3526 1940                                      l3288 0A4E  
                                    l3720 0B10                                      l3712 0AC2  
                                    l3704 0A7E                                      l3472 17B0  
                                    l3560 0DEC                                      l3552 0DC0  
                                    l3544 0D96                                      l3536 15A2  
                                    l3640 021C                                      l3632 013C  
                                    l3624 00A4                                      l3616 0074  
                                    l2736 148A                                      l2728 1458  
                                    l3608 1340                                      l3528 19FA  
                                    l3464 1CD0                                      l3384 0F3A  
                                    l3376 0EE8                                      l3368 0E6C  
                                    l3296 1132                                      l3456 18EC  
                                    l3448 18D4                                      l3800 0618  
                                    l3730 0B4E                                      l3722 0B18  
                                    l3714 0AD0                                      l3706 0A92  
                                    l3474 17F4                                      l2594 1BAE  
                                    l3490 1DF8                                      l3570 0E32  
                                    l3562 0DF6                                      l3554 0DC4  
                                    l3546 0DA2                                      l3538 15B2  
                                    l3650 0262                                      l3642 0232  
                                    l3634 0162                                      l3626 00C8  
                                    l3618 008C                                      l2738 148C  
                                    l3378 0EF4                                      l3298 1142  
                                    l3394 1918                                      l3386 1900  
                                    l3458 18EE                                      l3810 067A  
                                    l3802 0628                                      l3740 0C86  
                                    l3732 0B50                                      l3724 0B2C  
                                    l3716 0AEC                                      l3708 0A96  
                                    l2596 1BB8                                      l3476 1DF0  
                                    l3572 0E3C                                      l3564 0E04  
                                    l3556 0DD0                                      l3548 0DA6  
                                    l3484 16D4                                      l3660 02AA  
                                    l3652 026A                                      l3644 023A  
                                    l3636 01A0                                      l3628 00F0  
                                    l3468 1C4E                                      l3396 192C  
                                    l3388 1914                                      l3492 0B74  
                                    l3820 06D6                                      l3812 068C  
                                    l3804 0640                                      l3900 04C4  
                                    l3750 0CFC                                      l3742 0C8E  
                                    l3726 0B34                                      l3718 0AFA  
                                    l3734 0B52                                      l2598 1BBE  
                                    l3590 1A60                                      l3582 1A38  
                                    l3566 0E0C                                      l3558 0DE4  
                                    l3574 0E42                                      l3486 16FA  
                                    l3478 16CC                                      l3670 02EA  
                                    l3662 02B2                                      l3654 027A  
                                    l3646 024A                                      l3638 01DE  
                                    l3398 192E                                      l3494 0B8C  
                                    l3830 073A                                      l3822 06EE  
                                    l3814 069C                                      l3806 0652  
                                    l3910 051A                                      l3902 04D4  
                                    l3760 0D44                                      l3752 0D0A  
                                    l3744 0CBA                                      l3736 0B60  
                                    l3728 0B36                                      l3592 1A6A  
                                    l3584 1A3C                                      l3576 0E52  
                                    l3568 0E26                                      l3488 16FE  
                                    l3680 032A                                      l3672 02F2  
                                    l3656 028A                                      l3664 02BA  
                                    l3648 025A                                      l3496 0B98  
                                    l3832 074A                                      l3824 0700  
                                    l3816 06B4                                      l3808 0662  
                                    l3920 0554                                      l3912 051E  
                                    l3904 04E4                                      l3840 0368  
                                    l3770 0D70                                      l3754 0D20  
                                    l3762 0D46                                      l3746 0CD2  
                                    l3738 0B6E                                      l3586 1A46  
                                    l3594 1D74                                      l3578 0E5E  
                                    l3690 0344                                      l3682 0332  
                                    l3666 02CA                                      l3674 02FA  
                                    l3658 029A                                      l2890 1A90  
                                    l3498 0BB4                                      l3826 0710  
                                    l3818 06C6                                      l3922 0558  
                                    l3914 0534                                      l3906 04F8  
                                    l3850 03A0                                      l3842 037C  
                                    l3834 034A                                      l3772 0D7E  
                                    l3764 0D5E                                      l3756 0D28  
                                    l3748 0CE0                                      l3780 1D26  
                                    l3588 1A56                                      l3676 030A  
                                    l3684 033A                                      l3668 02DA  
                                    l2892 1A92                                      l2884 1A76  
                                    l3596 12C2                                      l3828 0728  
                                    l3908 0512                                      l3916 053C  
                                    l3924 056E                                      l3860 03D0  
                                    l3852 03A4                                      l3844 0380  
                                    l3836 034E                                      l3766 0D60  
                                    l3758 0D3C                                      l3694 0A5C  
                                    l3774 1D0C                                      l2982 1B1E  
                                    l3678 031A                                      l2894 1A94  
                                    l2886 1A8A                                      l3598 12C6  
                                    l3782 058A                                      l3918 0550  
                                    l3870 0446                                      l3862 03EA  
                                    l3854 03AC                                      l3846 0388  
                                    l3838 0364                                      l3768 0D62  
                                    l3696 0A64                                      l3776 1D20  
                                    l2992 1C70                                      l3688 0340  
                                    l2896 1A96                                      l2888 1A8E  
                                    l3792 05CE                                      l3784 059C  
                                    l3880 0466                                      l3872 044A  
                                    l3864 03FE                                      l3856 03B8  
                                    l3848 038C                                      l3698 0A78  
                                    l3778 1D24                                      l2994 1C78  
                                    l2898 1AAA                                      l3794 05DE  
                                    l3786 05B4                                      l3890 0486  
                                    l3882 0474                                      l3874 044E  
                                    l3866 0418                                      l3858 03CC  
                                    l2996 1C82                                      l3796 05EE  
                                    l3788 05C6                                      l3892 048A  
                                    l3884 0478                                      l3876 0454  
                                    l3868 042C                                      l2998 1C8C  
                                    l3798 0606                                      l3894 0492  
                                    l3886 047C                                      l3878 0462  
                                    l3896 0496                                      l3888 0480  
                                    l3898 04B2                                      u2110 1210  
                                    u2111 120C                                      u2120 122A  
                                    u3000 0462                                      u2121 1226  
                                    u3001 045E                                      u2130 1250  
                                    u2210 1054                                      u3010 0474  
                                    u2131 124C                                      u2211 1050  
                                    u3011 0470                                      u2140 126E  
                                    u2204 0928                                      u2220 1082  
                                    u2300 1868                                      u3020 04C4  
                                    u2141 126A                                      u2205 0924  
                                    u2221 107E                                      u2301 1860  
                                    u3021 04C0                                      u2150 128A  
                                    u2230 10EC                                      u3030 04D4  
                                    u2151 1286                                      u2231 10E8  
                                    u3031 04D0                                      u2400 1414  
                                    u2240 1AE6                                      u2160 12B0  
                                    u2320 0F1A                                      u3040 04E4  
                                    u2401 1410                                      u2241 1AE2  
                                    u2161 12AC                                      u2321 0F16  
                                    u3041 04E0                                      _LATE 000F7D  
                                    u2170 0780                                      u2250 0A0A  
                                    u1530 1448                                      u2330 193E  
                                    u2410 18BE                                      u3050 0580  
                                    u2171 077C                                      u2251 0A06  
                                    u1531 1444                                      u2331 193A  
                                    u2411 18BA                                      u3107 0BD2  
                                    u3051 057C                                      _LATG 000F7F  
                                    u2340 1396                                      u2180 0864  
                                    u2260 1BE8                                      u2500 0D96  
                                    u1540 1466                                      u2420 18FE  
                                    u2341 138E                                      u2181 0860  
                                    u2261 1BE4                                      u2501 0D92  
                                    u1541 1462                                      u2421 18FA  
                                    u3117 0C4C                                      u2270 1BFE  
                                    u2510 0DB4                                      u2318 186A  
                                    u2430 171A                                      u1550 1482  
                                    u3207 156C                                      u2271 1BFA  
                                    u2511 0DB0                                      u2431 1716  
                                    u1551 147E                                      u3127 1756  
                                    u2360 13B8                                      u2520 0DE4  
                                    u2600 137A                                      u2280 11F0  
                                    u2440 0BF2                                      u2361 13B0  
                                    u3217 0CC4                                      u2521 0DE0  
                                    u2601 1376                                      u3137 0F44  
                                    u2281 11EC                                      u2441 0BEE  
                                    u2194 08BE                                      u2290 1000  
                                    u2530 0E04                                      u2610 0232  
                                    _T2PR 000FBC                                      u2195 08BA  
                                    u3227 0D50                                      u2291 0FFC  
                                    u2531 0E00                                      u2611 022E  
                                    u3147 007E                                      u3067 03DC  
                                    u2380 13DC                                      u2540 0E26  
                                    u2700 02EA                                      u2620 024A  
                                    u2460 0C6C                                      u2381 13D4  
                                    u3237 17A0                                      u2541 0E22  
                                    u2701 02E6                                      u2621 0246  
                                    u3157 00AE                                      u2461 0C68  
                                    u3077 040A                                      u2358 1398  
                                    u2550 0E52                                      u2710 030A  
                                    u2630 025A                                      u2470 1B18  
                                    u3247 1AC2                                      u3167 1A4C  
                                    u2551 0E4E                                      u2711 0306  
                                    u2631 0256                                      u2471 1B14  
                                    u3087 0438                                      u2800 0B2C  
                                    u2480 1596                                      u2720 031A  
                                    u2640 027A                                      u2560 12D8  
                                    u3257 13F4                                      u2801 0B28  
                                    u3177 0AB4                                      u2481 1592  
                                    u2721 0316                                      u2641 0276  
                                    u2561 12D4                                      u3097 0504  
                                    u2378 13BA                                      u2810 0B60  
                                    u2490 15C6                                      u2730 032A  
                                    u2650 028A                                      u2570 12F8  
                                    u2458 0C18                                      u3267 141E  
                                    u2811 0B5C                                      u3187 0B40  
                                    u2491 15C2                                      u2731 0326  
                                    u2651 0286                                      u2571 12F4  
                                    u2459 0C2E                                      u2900 0D7E  
                                    u2820 0B6E                                      u2740 0AA6  
                                    u2660 029A                                      u2580 1318  
                                    u2901 0D7A                                      u3197 102A  
                                    u2821 0B6A                                      u2741 0AA2  
                                    u2661 0296                                      u2581 1314  
                                    u2398 13DE                                      u2830 0CE0  
                                    u2750 0AD0                                      u2670 02AA  
                                    u2590 1340                                      u2910 059C  
                                    u2831 0CDC                                      u2751 0ACC  
                                    u2671 02A6                                      u2591 133C  
                                    u2911 0598                                      u2840 0CEE  
                                    u2760 0ADE                                      u2680 02CA  
                                    u2920 05C6                                      u2841 0CEA  
                                    u2761 0ADA                                      u2681 02C6  
                                    u2921 05C2                                      u2850 0CFC  
                                    u2770 0AEC                                      u2690 02DA  
                                    u2930 05DE                                      u2851 0CF8  
                                    u2771 0AE8                                      u2691 02D6  
                                    u2931 05DA              ??_color_click_interrupt_init 0014  
                                    u2860 0D0A                                      u2780 0AFA  
                                    u2940 0618                                      u2861 0D06  
                                    u2781 0AF6                                      u2941 0614  
                                    u2870 0D20                                      u2790 0B10  
                                    u2950 0652                                      u2871 0D1C  
                                    u2791 0B0C                                      u2951 064E  
                                    u2880 0D3C                                      u2960 068C  
                                    u2881 0D38                                      u2961 0688  
                                    u2890 0D70                                      u2970 06C6  
                                    u2891 0D6C                                      u2971 06C2  
                                    u2980 0700                                      u2981 06FC  
                                    u2990 073A                                      u2991 0736  
                        ??_forward_square 003D                                      i2l65 1D9A  
                                    i2l68 1D72                                      i2l88 1CCE  
                                    _main 034A                                      fsr1h 000FE2  
                      i2___lwdiv@quotient 0005                                      fsr2h 000FDA  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0050                                      _stop 1038  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 006C                      ?i2_color_writetoaddr 0003  
                         __end_of_HighISR 006C                              ___param_bank 000000  
                __size_of_custom_delay_ms 0038                           __end_of_LightOn 1DF8  
                     decide_color@ambient 00AB      __size_ofi2_color_click_interrupt_off 0014  
                            i2_add_timing 1D2A                       _reverse_yellow_move 167A  
                                   ?_main 0001                           __end_of___atdiv 0E6C  
                         __end_of___awdiv 12C2                                     ?_stop 0029  
                __size_of_initDCmotorsPWM 003A                           ___awdiv@divisor 0018  
                         __end_of___lwdiv 14A2                                     i2l150 1C26  
                                   i2l153 1DEE                                     i2l162 1DB2  
                                   i2l147 1C00                                     i2l159 1DE4  
                                   i2l710 1D46                                     i2l456 0058  
                                   i2l496 1BAC                           ___awdiv@counter 001A  
                                   _TMR0H 000FD4                                     _TMR0L 000FD3  
     __size_of_color_click_interrupt_init 0048                             ?_LightsToggle 0001  
              __end_of_I2C_2_Master_Start 1DDC                __end_of_I2C_2_Master_Write 1DA8  
                 __size_of_PrepareForTurn 0066                                     pclath 000FFA  
                                   tablat 000FF5                       white_move@temp_func 00B8  
                    move_forward@duration 0034                       white_move@temp_time 00BB  
                    ?_reverse_yellow_move 00B0                     __end_of_getTMR0_in_ms 1B80  
                                   ttemp5 0051                                     ttemp6 0054  
                                   ttemp7 0058                                     status 000FD8  
                                   wtemp8 0051                   __end_of_read_All_Colors 171C  
                 __end_ofi2_getTMR0_in_ms 1BAE                     ??i2_color_writetoaddr 0004  
                   _I2C_2_Master_RepStart 1DB4                         _LEDs_Buttons_init 1B1E  
                      __size_ofi2___lwdiv 0074                   __end_of_color_int_clear 1D5E  
                         __initialization 17F8                        ?_LEDs_Buttons_init 0001  
                            __end_of_main 0588                              __end_of_stop 111E  
                        __end_of_LightOff 1E00                            fp__orange_move 0000  
                     ??_LEDs_Buttons_init 0010                                    ??_main 00C2  
                                  ??_stop 002D                             __activetblptr 000003  
               read_All_Colors@writeArray 001C                            ??_LightsToggle 0010  
            __size_ofi2_I2C_2_Master_Idle 0028           __size_of_CalibrateReverseSquare 00FE  
            __size_ofi2_I2C_2_Master_Stop 000A                      fp__reverse_pink_move 0000  
                       getTMR0_in_ms@temp 0019                              ?_setMotorPWM 001E  
                        ___awdiv@dividend 0016                          __end_of_TurnLeft 1038  
                        read_All_Colors@i 001E                                    _RE2PPS 000E74  
                                  _RD5PPS 000E6F                                    _RC7PPS 000E69  
                                  i2l1210 150C                                    _RD6PPS 000E70  
                                  i2l1217 1514                                    i2l3060 1D88  
                                  i2l3062 1B80                                    i2l3064 1B82  
                                  i2l3160 001A                                    i2l2506 1C00  
                                  i2l3066 1B88                                    i2l3170 003A  
                                  i2l3162 002A                                    i2l2508 1C10  
                                  i2l3164 002E                                    i2l3172 003E  
                                  i2l3174 004C                                    i2l3166 0030  
                                  i2l3176 0052                                    i2l3168 0036  
                                  i2l3178 0056                                    i2l2582 1DE6  
                                  i2l2590 1DAA                                    i2l2742 1D5E  
                                  i2l2750 14A2                                    i2l2584 1DEA  
                                  i2l2592 1DAE                                    i2l2744 1CB2  
                                  i2l2760 14DA                                    i2l2752 14AA  
                                  i2l2586 1DDC                                    i2l2770 1506  
                                  i2l2762 14E0                                    i2l2754 14BC  
                                  i2l2746 1D2A                                    i2l2588 1DE0  
                                  i2l2764 14F6                                    i2l2756 14C4  
                                  i2l2748 1D44                                    i2l2766 14FE  
                                  i2l2758 14CC                                    i2l2768 1500  
                   ??_reverse_yellow_move 0042                                 ??_HighISR 000C  
                __end_of_color_click_init 1A76                     __size_of_decide_color 02DA  
                            ?_orange_move 00B0                  CalibrateReverseSquare@mL 003F  
               __end_of_LEDs_Buttons_init 1B52                  CalibrateReverseSquare@mR 0041  
                    decide_color@red_real 00A0                                 ??_LightOn 0010  
                     reverse_pink_move@mL 00B0                       reverse_pink_move@mR 00B2  
                            white_move@mL 00B4                              white_move@mR 00B6  
                           ??_Timer0_init 0010                                    ___tmul 157C  
                                  ___wmul 1C28                                 ??___atdiv 001F  
                               ??___awdiv 001A                     __end_of_move_backward 0A5C  
                               ??___lwdiv 0014                        __size_of_ResetTMR0 000A  
                                  clear_0 181E                                    clear_1 182A  
                        ___awdiv@quotient 001C                          add_timing@timing 0017  
                                  isa$std 000001                          __end_of_red_move 19BC  
                            _turning_time 004B                                    main@mL 00C5  
                                  main@mR 00C7                         ??_custom_delay_ms 0012  
                            __pdataCOMRAM 0047               ??_color_click_interrupt_off 0014  
                       __end_ofi2___lwdiv 1516                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                            _decide_color 0070                                    stop@mL 0029  
                                  stop@mR 002B                         ??_initDCmotorsPWM 0012  
      __end_of_color_click_interrupt_init 17F8                _color_click_interrupt_init 17B0  
              i2color_writetoaddr@address 0004                                __accesstop 0060  
                 __end_of__initialization 1834                        __size_of_TurnRight 00E6  
                  ?_I2C_2_Master_RepStart 0001                          ?_read_All_Colors 001C  
                  _CalibrateReverseSquare 0C86               decide_color@greenPercentage 00BB  
                           ___rparam_used 000001                          ?i2_getTMR0_in_ms 0001  
                         _Interrupts_init 1D0C                          ?_color_int_clear 0001  
               __size_of_get_function_ptr 0022                            __pcstackCOMRAM 0001  
                           color_read@tmp 001A                         ?_add_function_ptr 0010  
                         CalibrateTurns@k 00A0                                _add_timing 1CEE  
                     __end_of_Timer0_init 1C90                        ??_add_function_ptr 0013  
                             pick_move@mL 00BD                               pick_move@mR 00BF  
                            green_move@mL 00B0                              green_move@mR 00B2  
                      __size_of_blue_move 0040                            _PrepareForTurn 1516  
                            ?_yellow_move 003F                                __pbssBANK0 0060  
                              __pbssBANK1 0100                         __end_of_ResetTMR0 1DC8  
                              TurnLeft@mL 0030                                TurnLeft@mR 0032  
                               ?_LightOff 0001                __size_of_LEDs_Buttons_init 0034  
            ?i2_color_click_interrupt_off 0001                 _color_click_interrupt_off 1D74  
                          pick_move@color 0045             __size_ofi2_I2C_2_Master_Start 000A  
           __size_ofi2_I2C_2_Master_Write 000C                      __end_of_LightsToggle 142E  
                       _color_writetoaddr 1C90                              _T2CLKCONbits 000FBF  
                      __size_of_pick_move 01DC                        ?_color_writetoaddr 0012  
                   decide_color@blue_real 00A6                                   ?___tmul 0010  
                                 ?___wmul 0010                        __size_of_pink_move 003E  
                               ?_TurnLeft 0030                   __size_of_CalibrateTurns 0118  
                     ??_color_writetoaddr 0013                           lightblue_move@i 0042  
                       color_read@address 0019                         __end_of_TurnRight 0F52  
                  __end_of_PrepareForTurn 157C                                   _PWM6DCH 000FA3  
                                 _PWM7DCH 000FA0                                   _SSP2ADD 000ED6  
                                 _SSP2BUF 000ED5                                _get_timing 1CD0  
                 __size_of_lightblue_move 0040                         fp__lightblue_move 0000  
                              _color_flag 009C                                _color_read 15D4  
                          move_forward@mL 0030                            move_forward@mR 0032  
                    __size_of_setMotorPWM 01D4                   __end_of_Interrupts_init 1D2A  
                  color_writetoaddr@value 0012                                ??_LightOff 0010  
                             pink_move@mL 003F                               pink_move@mR 0041  
                                 _HighISR 0008                             ?_move_forward 0030  
               __end_of_color_writetoaddr 1CB0                                 ?_red_move 00B0  
                                 _LightOn 1DF0                        _I2C_2_Master_Start 1DD2  
                     i2_I2C_2_Master_Idle 1C00                        _I2C_2_Master_Write 1D9C  
                    __size_of_orange_move 0040                                _green_move 19BC  
                                 __Hparam 0000                       i2_I2C_2_Master_Stop 1DDC  
                                 __Lparam 0000             ??i2_color_click_interrupt_off 0005  
                       __end_of_blue_move 1940                   __size_of_reverse_square 004A  
                             _Timer0_init 1C70               decide_color@LED_and_ambient 00B3  
                                 ___atdiv 0D84                                   ___awdiv 11FE  
               decide_color@redPercentage 00C1                           __size_of___tmul 0058  
                         __size_of___wmul 0026                       ?_I2C_2_Master_Start 0001  
                                 ___lwdiv 142E                       ?_I2C_2_Master_Write 0001  
                              _func_index 009F                                _peak_power 004D  
                             ?_add_timing 0017                                   __pcinit 17F8  
                              ??_TurnLeft 0034                                   __ramtop 0E00  
                                 __ptext0 034A                                   __ptext1 0588  
                                 __ptext2 1940                                   __ptext3 0B74  
                                 __ptext4 1880                                   __ptext5 18C0  
                                 __ptext6 1628                                   __ptext7 1900  
                                 __ptext8 197E                                   __ptext9 19BC  
                    add_function_ptr@func 0010                      ?i2_I2C_2_Master_Idle 0001  
                               _T2CONbits 000FBD        interrupt_threshold_calibrate@black 001E  
                                 _int_low 004E                      ?i2_I2C_2_Master_Stop 0001  
                         ?_PrepareForTurn 0039                                 _T2HLTbits 000FBE  
                       __end_of_pick_move 0764                decide_color@bluePercentage 00BC  
                    ??_I2C_2_Master_Start 0011                      ??_I2C_2_Master_Write 0011  
                    end_of_initialization 1834               __end_ofi2_color_writetoaddr 1CD0  
                      setMotorPWM@PWMduty 0027                         __end_of_pink_move 1A38  
                          ??_move_forward 0036                        main@color_detected 00C4  
                       ?_color_click_init 0001                                ??_red_move 0041  
                      ??_color_click_init 0014                          _get_function_ptr 1C4E  
                         _custom_delay_ms 1AB0                   __size_of_forward_square 004A  
                                 postdec1 000FE5                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc1 000FE6  
                                 postinc2 000FDE                                _time_index 009E  
                         _initDCmotorsPWM 1A76                                 _PORTFbits 000F8E  
               custom_delay_ms@delay_time 0010                     ??i2_I2C_2_Master_Idle 0001  
                  __size_of_getTMR0_in_ms 002E                     ??i2_I2C_2_Master_Stop 0002  
                              blue_move@i 0041                           move_backward@mL 0030  
                         move_backward@mR 0032                                 _TRISAbits 000F81  
                               _TRISBbits 000F82                                 _TRISCbits 000F83  
                               _TRISDbits 000F84                                 _TRISEbits 000F85  
                               _TRISFbits 000F86                                 _TRISGbits 000F87  
                        forward_square@mL 0039                          forward_square@mR 003B  
             __end_of_reverse_yellow_move 16CC                                 _TRISHbits 000F88  
                             ?_get_timing 0010                                _white_move 0B74  
                             ?_color_read 0014                         i2___lwdiv@divisor 0003  
             ?_color_click_interrupt_init 0001                  color_writetoaddr@address 0013  
                               i2___lwdiv 14A2                   ??_I2C_2_Master_RepStart 0011  
                       i2___lwdiv@counter 0007                   ?_CalibrateReverseSquare 003F  
                   __size_of_LightsToggle 00AE                      __size_of_yellow_move 003E  
                        ?_Interrupts_init 0001                       __size_of_add_timing 001E  
                           LightsToggle@i 0012                __size_of_color_writetoaddr 0020  
                              main@motorL 00C9                                main@motorR 00D2  
                             ?_green_move 00B0                            __end_of___tmul 15D4  
                          __end_of___wmul 1C4E        __size_of_color_click_interrupt_off 0014  
                           __pidataCOMRAM 1E00                            _CalibrateTurns 0A5C  
                        CalibrateTurns@mL 0041                          CalibrateTurns@mR 0043  
                     start_initialization 17F8                              _LightsToggle 1380  
                      i2add_timing@timing 0008                            _lightblue_move 18C0  
         ??_interrupt_threshold_calibrate 001C            __end_of_CalibrateReverseSquare 0D84  
                              ?i2___lwdiv 0001                 __size_of_add_function_ptr 0036  
                  __size_of_move_backward 0124                   __end_of_custom_delay_ms 1AE8  
                           yellow_move@mL 003F                             yellow_move@mR 0041  
                           _getTMR0_in_ms 1B52                          PrepareForTurn@mL 0039  
                        PrepareForTurn@mR 003B                                 _ResetTMR0 1DBE  
                       __size_of_LightOff 0008                            _reverse_square 1766  
interrupt_threshold_calibrate@amb_and_LED 001C                   __end_of_initDCmotorsPWM 1AB0  
                                ??___tmul 0016                                  ??___wmul 0014  
                     __size_of_get_timing 001E                    __end_of_CalibrateTurns 0B74  
                __size_of_read_All_Colors 0050             i2I2C_2_Master_Write@data_byte 0002  
                     __size_of_color_read 0054                  __size_ofi2_getTMR0_in_ms 002E  
                           ?i2_add_timing 0008                            ___tmul@product 0016  
                __size_of_color_int_clear 0016                      __end_of_move_forward 11FE  
       __end_of_color_click_interrupt_off 1D88              __end_ofi2_I2C_2_Master_Start 1DF0  
            __end_ofi2_I2C_2_Master_Write 1DB4                         __size_of_TurnLeft 00E6  
                           orange_move@mL 00B0                             orange_move@mR 00B2  
                  __end_of_lightblue_move 1900                               __pbssCOMRAM 004E  
                           __pcstackBANK0 00A0                       __size_of_green_move 003E  
                               _TurnRight 0E6C                                red_move@mL 00B0  
                              red_move@mR 00B2                               ?_white_move 00B4  
                             TurnRight@mL 0030                               TurnRight@mR 0032  
                                ?_HighISR 0001                            ?_getTMR0_in_ms 0001  
                  decide_color@clear_real 00BD                    __end_of_reverse_square 17B0  
                                ?_LightOn 0001                                ?_ResetTMR0 0001  
                        ___lwdiv@dividend 0010                         __size_of_red_move 003E  
                            ?_Timer0_init 0001                            _forward_square 171C  
                               __pintcode 0008                                  ?___atdiv 0019  
                                ?___awdiv 0016                                  ?___lwdiv 0010  
                         ?_CalibrateTurns 0041                             _move_backward 0938  
                               _blue_move 1900                            ??i2_add_timing 000A  
                            ??_add_timing 0019                          ??_PrepareForTurn 003D  
                    I2C_2_Master_Read@ack 0012                      I2C_2_Master_Read@tmp 0013  
                       i2_color_int_clear 1D5E                         _I2C_2_Master_Idle 1BD8  
                         ?_lightblue_move 00B0                         _I2C_2_Master_Init 1BAE  
                       _I2C_2_Master_Read 183E                        ?i2_color_int_clear 0001  
                       _I2C_2_Master_Stop 1DC8                       _PrepareForTurn$2745 003F  
                __end_of_get_function_ptr 1C70                                ?_TurnRight 0030  
                      ?_I2C_2_Master_Idle 0001                        ?_I2C_2_Master_Init 0001  
                      ?_I2C_2_Master_Read 0001                             ??_setMotorPWM 0020  
                      ?_I2C_2_Master_Stop 0001                          ___lwdiv@quotient 0014  
                initDCmotorsPWM@PWMperiod 0010                          lightblue_move@mL 00B0  
                        lightblue_move@mR 00B2                               ??i2___lwdiv 0005  
                     ??i2_color_int_clear 0003                    decide_color@green_real 00A3  
                               _pick_move 0588     __end_of_interrupt_threshold_calibrate 1380  
  __size_of_interrupt_threshold_calibrate 00BE             _interrupt_threshold_calibrate 12C2  
                           ??_orange_move 0042                          ?_custom_delay_ms 0010  
                     ??_I2C_2_Master_Idle 0010                       ??_I2C_2_Master_Init 0010  
                     ??_I2C_2_Master_Read 0011                            ___wmul@product 0014  
                                _LATAbits 000F79                       ??_I2C_2_Master_Stop 0011  
                                _LATDbits 000F7C                                  _LATEbits 000F7D  
                                _LATFbits 000F7E                                  _LATGbits 000F7F  
                                _LATHbits 000F80                           ?_reverse_square 0039  
                      __end_of_add_timing 1D0C                                  _IPR0bits 000E1F  
                                _PIE0bits 000E29                    __end_of_forward_square 1766  
                               _pink_move 19FA                                  i2u130_40 1C26  
                                i2u210_40 004C                                  i2u130_41 1C22  
                                i2u210_41 0048                                  i2u129_40 1C10  
                                i2u209_40 002A                                  i2u129_41 1C0C  
                                i2u209_41 0026                                 _lost_flag 009D  
                                i2u156_40 14BC                                  i2u156_41 14B8  
                                i2u157_40 14DA                                  i2u157_41 14D6  
                                i2u158_40 14F6                                  i2u158_41 14F2  
                                _PIR0bits 000E33                          ?_initDCmotorsPWM 0010  
                       _reverse_pink_move 1628                                  _SSP2CON2 000EDA  
                          ?_move_backward 0030                                  _SSP2STAT 000ED8  
                              ?_blue_move 00B0                       __size_of_white_move 0112  
               __end_ofi2_color_int_clear 1D74                        ?_reverse_pink_move 00B0  
               __size_of_color_click_init 003E                 __end_of_I2C_2_Master_Idle 1C00  
               __end_of_I2C_2_Master_Init 1BD8                 __end_of_I2C_2_Master_Read 1880  
                       ___wmul@multiplier 0010                 __end_of_I2C_2_Master_Stop 1DD2  
                            setMotorPWM@m 001E               I2C_2_Master_Write@data_byte 0011  
                       ??_read_All_Colors 001E                       ??_reverse_pink_move 0042  
                       ??i2_getTMR0_in_ms 000A                       ___tmul@multiplicand 0013  
                           ?_decide_color 0001                         ??_color_int_clear 0012  
                            ??_get_timing 0012                  i2color_writetoaddr@value 0003  
                            ??_color_read 0016                                 copy_data0 180C  
             __size_of_I2C_2_Master_Start 000A                          _add_function_ptr 1AE8  
             __size_of_I2C_2_Master_Write 000C                           ??_getTMR0_in_ms 0019  
                              ?_pick_move 00BD            __size_of_I2C_2_Master_RepStart 000A  
                                _LightOff 1DF8             __end_of_I2C_2_Master_RepStart 1DBE  
                  fp__reverse_yellow_move 0000       __end_ofi2_color_click_interrupt_off 1D9C  
             i2_color_click_interrupt_off 1D88                       __end_of_setMotorPWM 0938  
                        __size_of_HighISR 0064                               ??_ResetTMR0 0010  
                    i2_I2C_2_Master_Start 1DE6                      i2_I2C_2_Master_Write 1DA8  
                              ?_pink_move 003F                           ?_forward_square 0039  
                            ??_green_move 0041              __size_ofi2_color_writetoaddr 0020  
                                __Hrparam 0000                          __size_of_LightOn 0008  
               __end_of_reverse_pink_move 167A                                  __Lrparam 0000  
                     __end_of_orange_move 18C0                     __size_of_move_forward 00E0  
             __end_ofi2_I2C_2_Master_Idle 1C28                               _funcPtrList 0100  
             __end_ofi2_I2C_2_Master_Stop 1DE6                          __size_of___atdiv 00E8  
                        __size_of___awdiv 00C4                        __end_of_get_timing 1CEE  
                            orange_move@i 0042                          __size_of___lwdiv 0074  
                      __end_of_color_read 1628                                  _TurnLeft 0F52  
                              _ANSELBbits 000E9A                                _ANSELDbits 000EA7  
                              _ANSELFbits 000EB4                     reverse_yellow_move@mL 00B0  
                   reverse_yellow_move@mR 00B2                            ??_decide_color 0024  
                              _T0CON0bits 000FD5                                _T0CON1bits 000FD6  
                         ___lwdiv@divisor 0012                               ??_TurnRight 0034  
                         ___lwdiv@counter 0016                        __end_of_green_move 19FA  
                           ??_yellow_move 0043                                  __ptext10 167A  
                                __ptext11 171C                                  __ptext20 1B52  
                                __ptext12 111E                                  __ptext21 1CEE  
                                __ptext13 0E6C                                  __ptext30 1DF0  
                                __ptext22 142E                                  __ptext14 1CD0  
                                __ptext31 1DF8                                  __ptext23 0070  
                                __ptext15 1C4E                                  __ptext40 1C90  
                                __ptext32 1D74                                  __ptext24 16CC  
                                __ptext16 19FA                                  __ptext41 1D48  
                                __ptext33 1A38                                  __ptext25 15D4  
                                __ptext17 1AE8                                  __ptext50 1766  
                                __ptext42 1D9C                                  __ptext34 1BAE  
                                __ptext26 1DB4                                  __ptext18 12C2  
                                __ptext51 0938                                  __ptext43 1DC8  
                                __ptext35 1C70                                  __ptext27 183E  
                                __ptext19 1A76                                  __ptext60 1D2A  
                                __ptext52 1038                                  __ptext44 1DD2  
                                __ptext36 1DBE                                  __ptext28 157C  
                                __ptext61 14A2                                  __ptext53 0764  
                                __ptext45 1BD8                                  __ptext37 1B1E  
                                __ptext29 0D84                                  __ptext62 1D88  
                                __ptext54 1C28                                  __ptext46 0A5C  
                                __ptext38 1D0C                                  __ptext63 1CB0  
                                __ptext55 11FE                                  __ptext47 0F52  
                                __ptext39 17B0                                  __ptext64 1D5E  
                                __ptext56 1AB0                                  __ptext48 1516  
                                __ptext65 1DA8                                  __ptext57 1380  
                                __ptext49 0C86                                  __ptext66 1DDC  
                                __ptext67 1DE6                                  __ptext59 1B80  
                                __ptext68 1C00                                  __ptext69 0000  
                            _SSP2CON1bits 000ED9                              _SSP2CON2bits 000EDA  
                    __end_ofi2_add_timing 1D48              __size_of_reverse_yellow_move 0052  
                           __size_of_main 023E                                  _int_high 0047  
                            _move_forward 111E                             __size_of_stop 00E6  
                   ?i2_I2C_2_Master_Start 0001                                  _red_move 197E  
                   ?i2_I2C_2_Master_Write 0001            ?_interrupt_threshold_calibrate 0001  
                         ??_move_backward 0036                                  _timeList 0060  
                     i2getTMR0_in_ms@temp 000A                                  isa$xinst 000000  
                __size_of_Interrupts_init 001E                decide_color@color_decision 00C0  
                                int$flags 0050                      __size_of_Timer0_init 0020  
                             ??_blue_move 0041                __size_ofi2_color_int_clear 0016  
              __size_of_I2C_2_Master_Idle 0028                __size_of_I2C_2_Master_Init 002A  
              __size_of_I2C_2_Master_Read 0042               decide_color@black_threshold 00A9  
              __size_of_I2C_2_Master_Stop 000A                                _INTCONbits 000FF2  
                            _reverse_time 0049                     move_backward@duration 0034  
                             _setMotorPWM 0764                              ??_white_move 0043  
                             _PWM6CONbits 000FA4                               _PWM7CONbits 000FA1  
                                intlevel2 0000                               ??_pick_move 0045  
                             _orange_move 1880                       __end_of_yellow_move 197E  
                             ??_pink_move 0043                          ??_CalibrateTurns 0045  
              __size_of_reverse_pink_move 0052                          reverse_square@mL 0039  
                        reverse_square@mR 003B                         ___tmul@multiplier 0010  
                        ??_lightblue_move 0042                        __end_of_white_move 0C86  
                        _color_click_init 1A38                ?_color_click_interrupt_off 0001  
                              _SSP2DATPPS 000E1D                                _SSP2CLKPPS 000E1C  
                       ?_get_function_ptr 0010                          ___atdiv@dividend 0019  
                        ??_reverse_square 003D                        ??_get_function_ptr 0013  
                  ??i2_I2C_2_Master_Start 0002                              fp__blue_move 0000  
                  ??i2_I2C_2_Master_Write 0002                           ___atdiv@divisor 001C  
                         ___atdiv@counter 001F                               blue_move@mL 00B0  
                             blue_move@mR 00B2                      __end_of_decide_color 034A  
                            ___atdiv@sign 0020  
